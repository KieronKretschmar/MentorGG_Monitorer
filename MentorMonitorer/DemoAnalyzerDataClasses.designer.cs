#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MentorMonitorer
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="demoanalyzer")]
	public partial class DemoAnalyzerDataClassesDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void Insert_FireNadePolygonPoint(_FireNadePolygonPoint instance);
    partial void Update_FireNadePolygonPoint(_FireNadePolygonPoint instance);
    partial void Delete_FireNadePolygonPoint(_FireNadePolygonPoint instance);
    partial void InsertWeaponReload(WeaponReload instance);
    partial void UpdateWeaponReload(WeaponReload instance);
    partial void DeleteWeaponReload(WeaponReload instance);
    partial void Insert_FireNadeZone(_FireNadeZone instance);
    partial void Update_FireNadeZone(_FireNadeZone instance);
    partial void Delete_FireNadeZone(_FireNadeZone instance);
    partial void Insert_FlashPolygonPoint(_FlashPolygonPoint instance);
    partial void Update_FlashPolygonPoint(_FlashPolygonPoint instance);
    partial void Delete_FlashPolygonPoint(_FlashPolygonPoint instance);
    partial void Insert_FlashZone(_FlashZone instance);
    partial void Update_FlashZone(_FlashZone instance);
    partial void Delete_FlashZone(_FlashZone instance);
    partial void Insert_HEPolygonPoint(_HEPolygonPoint instance);
    partial void Update_HEPolygonPoint(_HEPolygonPoint instance);
    partial void Delete_HEPolygonPoint(_HEPolygonPoint instance);
    partial void Insert_HEZone(_HEZone instance);
    partial void Update_HEZone(_HEZone instance);
    partial void Delete_HEZone(_HEZone instance);
    partial void Insert_MapSettings(_MapSettings instance);
    partial void Update_MapSettings(_MapSettings instance);
    partial void Delete_MapSettings(_MapSettings instance);
    partial void Insert_PlayerMatchSmokeStats(_PlayerMatchSmokeStats instance);
    partial void Update_PlayerMatchSmokeStats(_PlayerMatchSmokeStats instance);
    partial void Delete_PlayerMatchSmokeStats(_PlayerMatchSmokeStats instance);
    partial void Insert_PositionOpposingZones(_PositionOpposingZones instance);
    partial void Update_PositionOpposingZones(_PositionOpposingZones instance);
    partial void Delete_PositionOpposingZones(_PositionOpposingZones instance);
    partial void Insert_PositionPolygonPoint(_PositionPolygonPoint instance);
    partial void Update_PositionPolygonPoint(_PositionPolygonPoint instance);
    partial void Delete_PositionPolygonPoint(_PositionPolygonPoint instance);
    partial void Insert_PositionZone(_PositionZone instance);
    partial void Update_PositionZone(_PositionZone instance);
    partial void Delete_PositionZone(_PositionZone instance);
    partial void Insert_Refrag(_Refrag instance);
    partial void Update_Refrag(_Refrag instance);
    partial void Delete_Refrag(_Refrag instance);
    partial void Insert_SinglePath(_SinglePath instance);
    partial void Update_SinglePath(_SinglePath instance);
    partial void Delete_SinglePath(_SinglePath instance);
    partial void Insert_SmokeCategory(_SmokeCategory instance);
    partial void Update_SmokeCategory(_SmokeCategory instance);
    partial void Delete_SmokeCategory(_SmokeCategory instance);
    partial void Insert_SmokeTarget(_SmokeTarget instance);
    partial void Update_SmokeTarget(_SmokeTarget instance);
    partial void Delete_SmokeTarget(_SmokeTarget instance);
    partial void Insert_StutterStep(_StutterStep instance);
    partial void Update_StutterStep(_StutterStep instance);
    partial void Delete_StutterStep(_StutterStep instance);
    partial void Insert_TeamStrategy(_TeamStrategy instance);
    partial void Update_TeamStrategy(_TeamStrategy instance);
    partial void Delete_TeamStrategy(_TeamStrategy instance);
    partial void InsertBombDefused(BombDefused instance);
    partial void UpdateBombDefused(BombDefused instance);
    partial void DeleteBombDefused(BombDefused instance);
    partial void InsertBombExplosion(BombExplosion instance);
    partial void UpdateBombExplosion(BombExplosion instance);
    partial void DeleteBombExplosion(BombExplosion instance);
    partial void InsertBombPlant(BombPlant instance);
    partial void UpdateBombPlant(BombPlant instance);
    partial void DeleteBombPlant(BombPlant instance);
    partial void InsertBotTakeOver(BotTakeOver instance);
    partial void UpdateBotTakeOver(BotTakeOver instance);
    partial void DeleteBotTakeOver(BotTakeOver instance);
    partial void InsertConnectDisconnect(ConnectDisconnect instance);
    partial void UpdateConnectDisconnect(ConnectDisconnect instance);
    partial void DeleteConnectDisconnect(ConnectDisconnect instance);
    partial void InsertDamage(Damage instance);
    partial void UpdateDamage(Damage instance);
    partial void DeleteDamage(Damage instance);
    partial void InsertDecoy(Decoy instance);
    partial void UpdateDecoy(Decoy instance);
    partial void DeleteDecoy(Decoy instance);
    partial void InsertDemoStats(DemoStats instance);
    partial void UpdateDemoStats(DemoStats instance);
    partial void DeleteDemoStats(DemoStats instance);
    partial void InsertEquipment(Equipment instance);
    partial void UpdateEquipment(Equipment instance);
    partial void DeleteEquipment(Equipment instance);
    partial void InsertFireNade(FireNade instance);
    partial void UpdateFireNade(FireNade instance);
    partial void DeleteFireNade(FireNade instance);
    partial void InsertFlash(Flash instance);
    partial void UpdateFlash(Flash instance);
    partial void DeleteFlash(Flash instance);
    partial void InsertFlashed(Flashed instance);
    partial void UpdateFlashed(Flashed instance);
    partial void DeleteFlashed(Flashed instance);
    partial void InsertFriends(Friends instance);
    partial void UpdateFriends(Friends instance);
    partial void DeleteFriends(Friends instance);
    partial void InsertHE(HE instance);
    partial void UpdateHE(HE instance);
    partial void DeleteHE(HE instance);
    partial void InsertHostageDrop(HostageDrop instance);
    partial void UpdateHostageDrop(HostageDrop instance);
    partial void DeleteHostageDrop(HostageDrop instance);
    partial void InsertHostagePickUp(HostagePickUp instance);
    partial void UpdateHostagePickUp(HostagePickUp instance);
    partial void DeleteHostagePickUp(HostagePickUp instance);
    partial void InsertHostageRescue(HostageRescue instance);
    partial void UpdateHostageRescue(HostageRescue instance);
    partial void DeleteHostageRescue(HostageRescue instance);
    partial void InsertItemDropped(ItemDropped instance);
    partial void UpdateItemDropped(ItemDropped instance);
    partial void DeleteItemDropped(ItemDropped instance);
    partial void InsertItemPickedUp(ItemPickedUp instance);
    partial void UpdateItemPickedUp(ItemPickedUp instance);
    partial void DeleteItemPickedUp(ItemPickedUp instance);
    partial void InsertItemSaved(ItemSaved instance);
    partial void UpdateItemSaved(ItemSaved instance);
    partial void DeleteItemSaved(ItemSaved instance);
    partial void InsertKills(Kills instance);
    partial void UpdateKills(Kills instance);
    partial void DeleteKills(Kills instance);
    partial void InsertMatchStats(MatchStats instance);
    partial void UpdateMatchStats(MatchStats instance);
    partial void DeleteMatchStats(MatchStats instance);
    partial void InsertOverTimeStats(OverTimeStats instance);
    partial void UpdateOverTimeStats(OverTimeStats instance);
    partial void DeleteOverTimeStats(OverTimeStats instance);
    partial void InsertPlayerMatchStats(PlayerMatchStats instance);
    partial void UpdatePlayerMatchStats(PlayerMatchStats instance);
    partial void DeletePlayerMatchStats(PlayerMatchStats instance);
    partial void InsertPlayerPosition(PlayerPosition instance);
    partial void UpdatePlayerPosition(PlayerPosition instance);
    partial void DeletePlayerPosition(PlayerPosition instance);
    partial void InsertPlayerRoundStats(PlayerRoundStats instance);
    partial void UpdatePlayerRoundStats(PlayerRoundStats instance);
    partial void DeletePlayerRoundStats(PlayerRoundStats instance);
    partial void InsertPlayerStats(PlayerStats instance);
    partial void UpdatePlayerStats(PlayerStats instance);
    partial void DeletePlayerStats(PlayerStats instance);
    partial void InsertRoundItem(RoundItem instance);
    partial void UpdateRoundItem(RoundItem instance);
    partial void DeleteRoundItem(RoundItem instance);
    partial void InsertRoundStats(RoundStats instance);
    partial void UpdateRoundStats(RoundStats instance);
    partial void DeleteRoundStats(RoundStats instance);
    partial void InsertSmoke(Smoke instance);
    partial void UpdateSmoke(Smoke instance);
    partial void DeleteSmoke(Smoke instance);
    partial void InsertWeaponFired(WeaponFired instance);
    partial void UpdateWeaponFired(WeaponFired instance);
    partial void DeleteWeaponFired(WeaponFired instance);
    #endregion
		
		public DemoAnalyzerDataClassesDataContext() : 
				base(global::MentorMonitorer.Properties.Settings.Default.demoanalyzerConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DemoAnalyzerDataClassesDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DemoAnalyzerDataClassesDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DemoAnalyzerDataClassesDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DemoAnalyzerDataClassesDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<_FireNadePolygonPoint> _FireNadePolygonPoint
		{
			get
			{
				return this.GetTable<_FireNadePolygonPoint>();
			}
		}
		
		public System.Data.Linq.Table<WeaponReload> WeaponReload
		{
			get
			{
				return this.GetTable<WeaponReload>();
			}
		}
		
		public System.Data.Linq.Table<_FireNadeZone> _FireNadeZone
		{
			get
			{
				return this.GetTable<_FireNadeZone>();
			}
		}
		
		public System.Data.Linq.Table<_FlashPolygonPoint> _FlashPolygonPoint
		{
			get
			{
				return this.GetTable<_FlashPolygonPoint>();
			}
		}
		
		public System.Data.Linq.Table<_FlashZone> _FlashZone
		{
			get
			{
				return this.GetTable<_FlashZone>();
			}
		}
		
		public System.Data.Linq.Table<_HEPolygonPoint> _HEPolygonPoint
		{
			get
			{
				return this.GetTable<_HEPolygonPoint>();
			}
		}
		
		public System.Data.Linq.Table<_HEZone> _HEZone
		{
			get
			{
				return this.GetTable<_HEZone>();
			}
		}
		
		public System.Data.Linq.Table<_MapSettings> _MapSettings
		{
			get
			{
				return this.GetTable<_MapSettings>();
			}
		}
		
		public System.Data.Linq.Table<_PlayerMatchSmokeStats> _PlayerMatchSmokeStats
		{
			get
			{
				return this.GetTable<_PlayerMatchSmokeStats>();
			}
		}
		
		public System.Data.Linq.Table<_PositionOpposingZones> _PositionOpposingZones
		{
			get
			{
				return this.GetTable<_PositionOpposingZones>();
			}
		}
		
		public System.Data.Linq.Table<_PositionPolygonPoint> _PositionPolygonPoint
		{
			get
			{
				return this.GetTable<_PositionPolygonPoint>();
			}
		}
		
		public System.Data.Linq.Table<_PositionZone> _PositionZone
		{
			get
			{
				return this.GetTable<_PositionZone>();
			}
		}
		
		public System.Data.Linq.Table<_Refrag> _Refrag
		{
			get
			{
				return this.GetTable<_Refrag>();
			}
		}
		
		public System.Data.Linq.Table<_SinglePath> _SinglePath
		{
			get
			{
				return this.GetTable<_SinglePath>();
			}
		}
		
		public System.Data.Linq.Table<_SmokeCategory> _SmokeCategory
		{
			get
			{
				return this.GetTable<_SmokeCategory>();
			}
		}
		
		public System.Data.Linq.Table<_SmokeTarget> _SmokeTarget
		{
			get
			{
				return this.GetTable<_SmokeTarget>();
			}
		}
		
		public System.Data.Linq.Table<_StutterStep> _StutterStep
		{
			get
			{
				return this.GetTable<_StutterStep>();
			}
		}
		
		public System.Data.Linq.Table<_TeamStrategy> _TeamStrategy
		{
			get
			{
				return this.GetTable<_TeamStrategy>();
			}
		}
		
		public System.Data.Linq.Table<BombDefused> BombDefused
		{
			get
			{
				return this.GetTable<BombDefused>();
			}
		}
		
		public System.Data.Linq.Table<BombExplosion> BombExplosion
		{
			get
			{
				return this.GetTable<BombExplosion>();
			}
		}
		
		public System.Data.Linq.Table<BombPlant> BombPlant
		{
			get
			{
				return this.GetTable<BombPlant>();
			}
		}
		
		public System.Data.Linq.Table<BotTakeOver> BotTakeOver
		{
			get
			{
				return this.GetTable<BotTakeOver>();
			}
		}
		
		public System.Data.Linq.Table<ConnectDisconnect> ConnectDisconnect
		{
			get
			{
				return this.GetTable<ConnectDisconnect>();
			}
		}
		
		public System.Data.Linq.Table<Damage> Damage
		{
			get
			{
				return this.GetTable<Damage>();
			}
		}
		
		public System.Data.Linq.Table<Decoy> Decoy
		{
			get
			{
				return this.GetTable<Decoy>();
			}
		}
		
		public System.Data.Linq.Table<DemoStats> DemoStats
		{
			get
			{
				return this.GetTable<DemoStats>();
			}
		}
		
		public System.Data.Linq.Table<Equipment> Equipment
		{
			get
			{
				return this.GetTable<Equipment>();
			}
		}
		
		public System.Data.Linq.Table<FireNade> FireNade
		{
			get
			{
				return this.GetTable<FireNade>();
			}
		}
		
		public System.Data.Linq.Table<Flash> Flash
		{
			get
			{
				return this.GetTable<Flash>();
			}
		}
		
		public System.Data.Linq.Table<FlashBounce> FlashBounce
		{
			get
			{
				return this.GetTable<FlashBounce>();
			}
		}
		
		public System.Data.Linq.Table<Flashed> Flashed
		{
			get
			{
				return this.GetTable<Flashed>();
			}
		}
		
		public System.Data.Linq.Table<Friends> Friends
		{
			get
			{
				return this.GetTable<Friends>();
			}
		}
		
		public System.Data.Linq.Table<HE> HE
		{
			get
			{
				return this.GetTable<HE>();
			}
		}
		
		public System.Data.Linq.Table<HostageDrop> HostageDrop
		{
			get
			{
				return this.GetTable<HostageDrop>();
			}
		}
		
		public System.Data.Linq.Table<HostagePickUp> HostagePickUp
		{
			get
			{
				return this.GetTable<HostagePickUp>();
			}
		}
		
		public System.Data.Linq.Table<HostageRescue> HostageRescue
		{
			get
			{
				return this.GetTable<HostageRescue>();
			}
		}
		
		public System.Data.Linq.Table<ItemDropped> ItemDropped
		{
			get
			{
				return this.GetTable<ItemDropped>();
			}
		}
		
		public System.Data.Linq.Table<ItemPickedUp> ItemPickedUp
		{
			get
			{
				return this.GetTable<ItemPickedUp>();
			}
		}
		
		public System.Data.Linq.Table<ItemSaved> ItemSaved
		{
			get
			{
				return this.GetTable<ItemSaved>();
			}
		}
		
		public System.Data.Linq.Table<Kills> Kills
		{
			get
			{
				return this.GetTable<Kills>();
			}
		}
		
		public System.Data.Linq.Table<MatchStats> MatchStats
		{
			get
			{
				return this.GetTable<MatchStats>();
			}
		}
		
		public System.Data.Linq.Table<OverTimeStats> OverTimeStats
		{
			get
			{
				return this.GetTable<OverTimeStats>();
			}
		}
		
		public System.Data.Linq.Table<PlayerMatchStats> PlayerMatchStats
		{
			get
			{
				return this.GetTable<PlayerMatchStats>();
			}
		}
		
		public System.Data.Linq.Table<PlayerPosition> PlayerPosition
		{
			get
			{
				return this.GetTable<PlayerPosition>();
			}
		}
		
		public System.Data.Linq.Table<PlayerRoundStats> PlayerRoundStats
		{
			get
			{
				return this.GetTable<PlayerRoundStats>();
			}
		}
		
		public System.Data.Linq.Table<PlayerStats> PlayerStats
		{
			get
			{
				return this.GetTable<PlayerStats>();
			}
		}
		
		public System.Data.Linq.Table<RoundItem> RoundItem
		{
			get
			{
				return this.GetTable<RoundItem>();
			}
		}
		
		public System.Data.Linq.Table<RoundStats> RoundStats
		{
			get
			{
				return this.GetTable<RoundStats>();
			}
		}
		
		public System.Data.Linq.Table<Smoke> Smoke
		{
			get
			{
				return this.GetTable<Smoke>();
			}
		}
		
		public System.Data.Linq.Table<WeaponFired> WeaponFired
		{
			get
			{
				return this.GetTable<WeaponFired>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[_FireNadePolygonPoint]")]
	public partial class _FireNadePolygonPoint : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ZoneId;
		
		private int _PointId;
		
		private string _Map;
		
		private double _XIngame;
		
		private double _YIngame;
		
		private int _XPixel;
		
		private int _YPixel;
		
		private EntityRef<_FireNadeZone> @__FireNadeZone;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnZoneIdChanging(int value);
    partial void OnZoneIdChanged();
    partial void OnPointIdChanging(int value);
    partial void OnPointIdChanged();
    partial void OnMapChanging(string value);
    partial void OnMapChanged();
    partial void OnXIngameChanging(double value);
    partial void OnXIngameChanged();
    partial void OnYIngameChanging(double value);
    partial void OnYIngameChanged();
    partial void OnXPixelChanging(int value);
    partial void OnXPixelChanged();
    partial void OnYPixelChanging(int value);
    partial void OnYPixelChanged();
    #endregion
		
		public _FireNadePolygonPoint()
		{
			this.@__FireNadeZone = default(EntityRef<_FireNadeZone>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ZoneId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ZoneId
		{
			get
			{
				return this._ZoneId;
			}
			set
			{
				if ((this._ZoneId != value))
				{
					if (this.@__FireNadeZone.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnZoneIdChanging(value);
					this.SendPropertyChanging();
					this._ZoneId = value;
					this.SendPropertyChanged("ZoneId");
					this.OnZoneIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PointId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int PointId
		{
			get
			{
				return this._PointId;
			}
			set
			{
				if ((this._PointId != value))
				{
					this.OnPointIdChanging(value);
					this.SendPropertyChanging();
					this._PointId = value;
					this.SendPropertyChanged("PointId");
					this.OnPointIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Map", DbType="NVarChar(MAX)")]
		public string Map
		{
			get
			{
				return this._Map;
			}
			set
			{
				if ((this._Map != value))
				{
					this.OnMapChanging(value);
					this.SendPropertyChanging();
					this._Map = value;
					this.SendPropertyChanged("Map");
					this.OnMapChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_XIngame", DbType="Float NOT NULL")]
		public double XIngame
		{
			get
			{
				return this._XIngame;
			}
			set
			{
				if ((this._XIngame != value))
				{
					this.OnXIngameChanging(value);
					this.SendPropertyChanging();
					this._XIngame = value;
					this.SendPropertyChanged("XIngame");
					this.OnXIngameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_YIngame", DbType="Float NOT NULL")]
		public double YIngame
		{
			get
			{
				return this._YIngame;
			}
			set
			{
				if ((this._YIngame != value))
				{
					this.OnYIngameChanging(value);
					this.SendPropertyChanging();
					this._YIngame = value;
					this.SendPropertyChanged("YIngame");
					this.OnYIngameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_XPixel", DbType="Int NOT NULL")]
		public int XPixel
		{
			get
			{
				return this._XPixel;
			}
			set
			{
				if ((this._XPixel != value))
				{
					this.OnXPixelChanging(value);
					this.SendPropertyChanging();
					this._XPixel = value;
					this.SendPropertyChanged("XPixel");
					this.OnXPixelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_YPixel", DbType="Int NOT NULL")]
		public int YPixel
		{
			get
			{
				return this._YPixel;
			}
			set
			{
				if ((this._YPixel != value))
				{
					this.OnYPixelChanging(value);
					this.SendPropertyChanging();
					this._YPixel = value;
					this.SendPropertyChanged("YPixel");
					this.OnYPixelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="_FireNadeZone__FireNadePolygonPoint", Storage="__FireNadeZone", ThisKey="ZoneId", OtherKey="ZoneId", IsForeignKey=true)]
		public _FireNadeZone _FireNadeZone
		{
			get
			{
				return this.@__FireNadeZone.Entity;
			}
			set
			{
				_FireNadeZone previousValue = this.@__FireNadeZone.Entity;
				if (((previousValue != value) 
							|| (this.@__FireNadeZone.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this.@__FireNadeZone.Entity = null;
						previousValue._FireNadePolygonPoint.Remove(this);
					}
					this.@__FireNadeZone.Entity = value;
					if ((value != null))
					{
						value._FireNadePolygonPoint.Add(this);
						this._ZoneId = value.ZoneId;
					}
					else
					{
						this._ZoneId = default(int);
					}
					this.SendPropertyChanged("_FireNadeZone");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.WeaponReload")]
	public partial class WeaponReload : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _MatchId;
		
		private long _WeaponReloadId;
		
		private short _Round;
		
		private int _Time;
		
		private int _Tick;
		
		private long _PlayerId;
		
		private double _PlayerPosX;
		
		private double _PlayerPosY;
		
		private double _PlayerPosZ;
		
		private double _PlayerViewX;
		
		private double _PlayerViewY;
		
		private bool _IsCT;
		
		private short _Weapon;
		
		private short _AmmoBefore;
		
		private short _AmmoAfter;
		
		private short _ReserveAmmo;
		
		private EntityRef<MatchStats> _MatchStats;
		
		private EntityRef<PlayerMatchStats> _PlayerMatchStats;
		
		private EntityRef<PlayerRoundStats> _PlayerRoundStats;
		
		private EntityRef<RoundStats> _RoundStats;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMatchIdChanging(long value);
    partial void OnMatchIdChanged();
    partial void OnWeaponReloadIdChanging(long value);
    partial void OnWeaponReloadIdChanged();
    partial void OnRoundChanging(short value);
    partial void OnRoundChanged();
    partial void OnTimeChanging(int value);
    partial void OnTimeChanged();
    partial void OnTickChanging(int value);
    partial void OnTickChanged();
    partial void OnPlayerIdChanging(long value);
    partial void OnPlayerIdChanged();
    partial void OnPlayerPosXChanging(double value);
    partial void OnPlayerPosXChanged();
    partial void OnPlayerPosYChanging(double value);
    partial void OnPlayerPosYChanged();
    partial void OnPlayerPosZChanging(double value);
    partial void OnPlayerPosZChanged();
    partial void OnPlayerViewXChanging(double value);
    partial void OnPlayerViewXChanged();
    partial void OnPlayerViewYChanging(double value);
    partial void OnPlayerViewYChanged();
    partial void OnIsCTChanging(bool value);
    partial void OnIsCTChanged();
    partial void OnWeaponChanging(short value);
    partial void OnWeaponChanged();
    partial void OnAmmoBeforeChanging(short value);
    partial void OnAmmoBeforeChanged();
    partial void OnAmmoAfterChanging(short value);
    partial void OnAmmoAfterChanged();
    partial void OnReserveAmmoChanging(short value);
    partial void OnReserveAmmoChanged();
    #endregion
		
		public WeaponReload()
		{
			this._MatchStats = default(EntityRef<MatchStats>);
			this._PlayerMatchStats = default(EntityRef<PlayerMatchStats>);
			this._PlayerRoundStats = default(EntityRef<PlayerRoundStats>);
			this._RoundStats = default(EntityRef<RoundStats>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MatchId", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long MatchId
		{
			get
			{
				return this._MatchId;
			}
			set
			{
				if ((this._MatchId != value))
				{
					if ((((this._MatchStats.HasLoadedOrAssignedValue || this._PlayerMatchStats.HasLoadedOrAssignedValue) 
								|| this._PlayerRoundStats.HasLoadedOrAssignedValue) 
								|| this._RoundStats.HasLoadedOrAssignedValue))
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMatchIdChanging(value);
					this.SendPropertyChanging();
					this._MatchId = value;
					this.SendPropertyChanged("MatchId");
					this.OnMatchIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WeaponReloadId", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long WeaponReloadId
		{
			get
			{
				return this._WeaponReloadId;
			}
			set
			{
				if ((this._WeaponReloadId != value))
				{
					this.OnWeaponReloadIdChanging(value);
					this.SendPropertyChanging();
					this._WeaponReloadId = value;
					this.SendPropertyChanged("WeaponReloadId");
					this.OnWeaponReloadIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Round", DbType="SmallInt NOT NULL")]
		public short Round
		{
			get
			{
				return this._Round;
			}
			set
			{
				if ((this._Round != value))
				{
					if ((this._PlayerRoundStats.HasLoadedOrAssignedValue || this._RoundStats.HasLoadedOrAssignedValue))
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRoundChanging(value);
					this.SendPropertyChanging();
					this._Round = value;
					this.SendPropertyChanged("Round");
					this.OnRoundChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Time", DbType="Int NOT NULL")]
		public int Time
		{
			get
			{
				return this._Time;
			}
			set
			{
				if ((this._Time != value))
				{
					this.OnTimeChanging(value);
					this.SendPropertyChanging();
					this._Time = value;
					this.SendPropertyChanged("Time");
					this.OnTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Tick", DbType="Int NOT NULL")]
		public int Tick
		{
			get
			{
				return this._Tick;
			}
			set
			{
				if ((this._Tick != value))
				{
					this.OnTickChanging(value);
					this.SendPropertyChanging();
					this._Tick = value;
					this.SendPropertyChanged("Tick");
					this.OnTickChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlayerId", DbType="BigInt NOT NULL")]
		public long PlayerId
		{
			get
			{
				return this._PlayerId;
			}
			set
			{
				if ((this._PlayerId != value))
				{
					if ((this._PlayerMatchStats.HasLoadedOrAssignedValue || this._PlayerRoundStats.HasLoadedOrAssignedValue))
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPlayerIdChanging(value);
					this.SendPropertyChanging();
					this._PlayerId = value;
					this.SendPropertyChanged("PlayerId");
					this.OnPlayerIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlayerPosX", DbType="Float NOT NULL")]
		public double PlayerPosX
		{
			get
			{
				return this._PlayerPosX;
			}
			set
			{
				if ((this._PlayerPosX != value))
				{
					this.OnPlayerPosXChanging(value);
					this.SendPropertyChanging();
					this._PlayerPosX = value;
					this.SendPropertyChanged("PlayerPosX");
					this.OnPlayerPosXChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlayerPosY", DbType="Float NOT NULL")]
		public double PlayerPosY
		{
			get
			{
				return this._PlayerPosY;
			}
			set
			{
				if ((this._PlayerPosY != value))
				{
					this.OnPlayerPosYChanging(value);
					this.SendPropertyChanging();
					this._PlayerPosY = value;
					this.SendPropertyChanged("PlayerPosY");
					this.OnPlayerPosYChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlayerPosZ", DbType="Float NOT NULL")]
		public double PlayerPosZ
		{
			get
			{
				return this._PlayerPosZ;
			}
			set
			{
				if ((this._PlayerPosZ != value))
				{
					this.OnPlayerPosZChanging(value);
					this.SendPropertyChanging();
					this._PlayerPosZ = value;
					this.SendPropertyChanged("PlayerPosZ");
					this.OnPlayerPosZChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlayerViewX", DbType="Float NOT NULL")]
		public double PlayerViewX
		{
			get
			{
				return this._PlayerViewX;
			}
			set
			{
				if ((this._PlayerViewX != value))
				{
					this.OnPlayerViewXChanging(value);
					this.SendPropertyChanging();
					this._PlayerViewX = value;
					this.SendPropertyChanged("PlayerViewX");
					this.OnPlayerViewXChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlayerViewY", DbType="Float NOT NULL")]
		public double PlayerViewY
		{
			get
			{
				return this._PlayerViewY;
			}
			set
			{
				if ((this._PlayerViewY != value))
				{
					this.OnPlayerViewYChanging(value);
					this.SendPropertyChanging();
					this._PlayerViewY = value;
					this.SendPropertyChanged("PlayerViewY");
					this.OnPlayerViewYChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsCT", DbType="Bit NOT NULL")]
		public bool IsCT
		{
			get
			{
				return this._IsCT;
			}
			set
			{
				if ((this._IsCT != value))
				{
					this.OnIsCTChanging(value);
					this.SendPropertyChanging();
					this._IsCT = value;
					this.SendPropertyChanged("IsCT");
					this.OnIsCTChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Weapon", DbType="SmallInt NOT NULL")]
		public short Weapon
		{
			get
			{
				return this._Weapon;
			}
			set
			{
				if ((this._Weapon != value))
				{
					this.OnWeaponChanging(value);
					this.SendPropertyChanging();
					this._Weapon = value;
					this.SendPropertyChanged("Weapon");
					this.OnWeaponChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AmmoBefore", DbType="SmallInt NOT NULL")]
		public short AmmoBefore
		{
			get
			{
				return this._AmmoBefore;
			}
			set
			{
				if ((this._AmmoBefore != value))
				{
					this.OnAmmoBeforeChanging(value);
					this.SendPropertyChanging();
					this._AmmoBefore = value;
					this.SendPropertyChanged("AmmoBefore");
					this.OnAmmoBeforeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AmmoAfter", DbType="SmallInt NOT NULL")]
		public short AmmoAfter
		{
			get
			{
				return this._AmmoAfter;
			}
			set
			{
				if ((this._AmmoAfter != value))
				{
					this.OnAmmoAfterChanging(value);
					this.SendPropertyChanging();
					this._AmmoAfter = value;
					this.SendPropertyChanged("AmmoAfter");
					this.OnAmmoAfterChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReserveAmmo", DbType="SmallInt NOT NULL")]
		public short ReserveAmmo
		{
			get
			{
				return this._ReserveAmmo;
			}
			set
			{
				if ((this._ReserveAmmo != value))
				{
					this.OnReserveAmmoChanging(value);
					this.SendPropertyChanging();
					this._ReserveAmmo = value;
					this.SendPropertyChanged("ReserveAmmo");
					this.OnReserveAmmoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MatchStats_WeaponReload", Storage="_MatchStats", ThisKey="MatchId", OtherKey="MatchId", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public MatchStats MatchStats
		{
			get
			{
				return this._MatchStats.Entity;
			}
			set
			{
				MatchStats previousValue = this._MatchStats.Entity;
				if (((previousValue != value) 
							|| (this._MatchStats.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MatchStats.Entity = null;
						previousValue.WeaponReload.Remove(this);
					}
					this._MatchStats.Entity = value;
					if ((value != null))
					{
						value.WeaponReload.Add(this);
						this._MatchId = value.MatchId;
					}
					else
					{
						this._MatchId = default(long);
					}
					this.SendPropertyChanged("MatchStats");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PlayerMatchStats_WeaponReload", Storage="_PlayerMatchStats", ThisKey="MatchId,PlayerId", OtherKey="MatchId,SteamId", IsForeignKey=true)]
		public PlayerMatchStats PlayerMatchStats
		{
			get
			{
				return this._PlayerMatchStats.Entity;
			}
			set
			{
				PlayerMatchStats previousValue = this._PlayerMatchStats.Entity;
				if (((previousValue != value) 
							|| (this._PlayerMatchStats.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PlayerMatchStats.Entity = null;
						previousValue.WeaponReload.Remove(this);
					}
					this._PlayerMatchStats.Entity = value;
					if ((value != null))
					{
						value.WeaponReload.Add(this);
						this._MatchId = value.MatchId;
						this._PlayerId = value.SteamId;
					}
					else
					{
						this._MatchId = default(long);
						this._PlayerId = default(long);
					}
					this.SendPropertyChanged("PlayerMatchStats");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PlayerRoundStats_WeaponReload", Storage="_PlayerRoundStats", ThisKey="MatchId,Round,PlayerId", OtherKey="MatchId,Round,PlayerId", IsForeignKey=true)]
		public PlayerRoundStats PlayerRoundStats
		{
			get
			{
				return this._PlayerRoundStats.Entity;
			}
			set
			{
				PlayerRoundStats previousValue = this._PlayerRoundStats.Entity;
				if (((previousValue != value) 
							|| (this._PlayerRoundStats.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PlayerRoundStats.Entity = null;
						previousValue.WeaponReload.Remove(this);
					}
					this._PlayerRoundStats.Entity = value;
					if ((value != null))
					{
						value.WeaponReload.Add(this);
						this._MatchId = value.MatchId;
						this._Round = value.Round;
						this._PlayerId = value.PlayerId;
					}
					else
					{
						this._MatchId = default(long);
						this._Round = default(short);
						this._PlayerId = default(long);
					}
					this.SendPropertyChanged("PlayerRoundStats");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RoundStats_WeaponReload", Storage="_RoundStats", ThisKey="MatchId,Round", OtherKey="MatchId,Round", IsForeignKey=true)]
		public RoundStats RoundStats
		{
			get
			{
				return this._RoundStats.Entity;
			}
			set
			{
				RoundStats previousValue = this._RoundStats.Entity;
				if (((previousValue != value) 
							|| (this._RoundStats.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._RoundStats.Entity = null;
						previousValue.WeaponReload.Remove(this);
					}
					this._RoundStats.Entity = value;
					if ((value != null))
					{
						value.WeaponReload.Add(this);
						this._MatchId = value.MatchId;
						this._Round = value.Round;
					}
					else
					{
						this._MatchId = default(long);
						this._Round = default(short);
					}
					this.SendPropertyChanged("RoundStats");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[_FireNadeZone]")]
	public partial class _FireNadeZone : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ZoneId;
		
		private string _Map;
		
		private string _Name;
		
		private byte _Team;
		
		private System.Nullable<double> _ZMin;
		
		private System.Nullable<double> _ZMax;
		
		private double _CenterXIngame;
		
		private double _CenterYIngame;
		
		private int _CenterXPixel;
		
		private int _CenterYPixel;
		
		private System.Nullable<int> _ParentZoneId;
		
		private EntitySet<_FireNadePolygonPoint> @__FireNadePolygonPoint;
		
		private EntitySet<_FireNadeZone> @__FireNadeZone2;
		
		private EntityRef<_FireNadeZone> @__FireNadeZone1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnZoneIdChanging(int value);
    partial void OnZoneIdChanged();
    partial void OnMapChanging(string value);
    partial void OnMapChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnTeamChanging(byte value);
    partial void OnTeamChanged();
    partial void OnZMinChanging(System.Nullable<double> value);
    partial void OnZMinChanged();
    partial void OnZMaxChanging(System.Nullable<double> value);
    partial void OnZMaxChanged();
    partial void OnCenterXIngameChanging(double value);
    partial void OnCenterXIngameChanged();
    partial void OnCenterYIngameChanging(double value);
    partial void OnCenterYIngameChanged();
    partial void OnCenterXPixelChanging(int value);
    partial void OnCenterXPixelChanged();
    partial void OnCenterYPixelChanging(int value);
    partial void OnCenterYPixelChanged();
    partial void OnParentZoneIdChanging(System.Nullable<int> value);
    partial void OnParentZoneIdChanged();
    #endregion
		
		public _FireNadeZone()
		{
			this.@__FireNadePolygonPoint = new EntitySet<_FireNadePolygonPoint>(new Action<_FireNadePolygonPoint>(this.attach__FireNadePolygonPoint), new Action<_FireNadePolygonPoint>(this.detach__FireNadePolygonPoint));
			this.@__FireNadeZone2 = new EntitySet<_FireNadeZone>(new Action<_FireNadeZone>(this.attach__FireNadeZone2), new Action<_FireNadeZone>(this.detach__FireNadeZone2));
			this.@__FireNadeZone1 = default(EntityRef<_FireNadeZone>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ZoneId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ZoneId
		{
			get
			{
				return this._ZoneId;
			}
			set
			{
				if ((this._ZoneId != value))
				{
					this.OnZoneIdChanging(value);
					this.SendPropertyChanging();
					this._ZoneId = value;
					this.SendPropertyChanged("ZoneId");
					this.OnZoneIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Map", DbType="NVarChar(MAX)")]
		public string Map
		{
			get
			{
				return this._Map;
			}
			set
			{
				if ((this._Map != value))
				{
					this.OnMapChanging(value);
					this.SendPropertyChanging();
					this._Map = value;
					this.SendPropertyChanged("Map");
					this.OnMapChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(MAX)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Team", DbType="TinyInt NOT NULL")]
		public byte Team
		{
			get
			{
				return this._Team;
			}
			set
			{
				if ((this._Team != value))
				{
					this.OnTeamChanging(value);
					this.SendPropertyChanging();
					this._Team = value;
					this.SendPropertyChanged("Team");
					this.OnTeamChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ZMin", DbType="Float")]
		public System.Nullable<double> ZMin
		{
			get
			{
				return this._ZMin;
			}
			set
			{
				if ((this._ZMin != value))
				{
					this.OnZMinChanging(value);
					this.SendPropertyChanging();
					this._ZMin = value;
					this.SendPropertyChanged("ZMin");
					this.OnZMinChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ZMax", DbType="Float")]
		public System.Nullable<double> ZMax
		{
			get
			{
				return this._ZMax;
			}
			set
			{
				if ((this._ZMax != value))
				{
					this.OnZMaxChanging(value);
					this.SendPropertyChanging();
					this._ZMax = value;
					this.SendPropertyChanged("ZMax");
					this.OnZMaxChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CenterXIngame", DbType="Float NOT NULL")]
		public double CenterXIngame
		{
			get
			{
				return this._CenterXIngame;
			}
			set
			{
				if ((this._CenterXIngame != value))
				{
					this.OnCenterXIngameChanging(value);
					this.SendPropertyChanging();
					this._CenterXIngame = value;
					this.SendPropertyChanged("CenterXIngame");
					this.OnCenterXIngameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CenterYIngame", DbType="Float NOT NULL")]
		public double CenterYIngame
		{
			get
			{
				return this._CenterYIngame;
			}
			set
			{
				if ((this._CenterYIngame != value))
				{
					this.OnCenterYIngameChanging(value);
					this.SendPropertyChanging();
					this._CenterYIngame = value;
					this.SendPropertyChanged("CenterYIngame");
					this.OnCenterYIngameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CenterXPixel", DbType="Int NOT NULL")]
		public int CenterXPixel
		{
			get
			{
				return this._CenterXPixel;
			}
			set
			{
				if ((this._CenterXPixel != value))
				{
					this.OnCenterXPixelChanging(value);
					this.SendPropertyChanging();
					this._CenterXPixel = value;
					this.SendPropertyChanged("CenterXPixel");
					this.OnCenterXPixelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CenterYPixel", DbType="Int NOT NULL")]
		public int CenterYPixel
		{
			get
			{
				return this._CenterYPixel;
			}
			set
			{
				if ((this._CenterYPixel != value))
				{
					this.OnCenterYPixelChanging(value);
					this.SendPropertyChanging();
					this._CenterYPixel = value;
					this.SendPropertyChanged("CenterYPixel");
					this.OnCenterYPixelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ParentZoneId", DbType="Int")]
		public System.Nullable<int> ParentZoneId
		{
			get
			{
				return this._ParentZoneId;
			}
			set
			{
				if ((this._ParentZoneId != value))
				{
					if (this.@__FireNadeZone1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnParentZoneIdChanging(value);
					this.SendPropertyChanging();
					this._ParentZoneId = value;
					this.SendPropertyChanged("ParentZoneId");
					this.OnParentZoneIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="_FireNadeZone__FireNadePolygonPoint", Storage="__FireNadePolygonPoint", ThisKey="ZoneId", OtherKey="ZoneId")]
		public EntitySet<_FireNadePolygonPoint> _FireNadePolygonPoint
		{
			get
			{
				return this.@__FireNadePolygonPoint;
			}
			set
			{
				this.@__FireNadePolygonPoint.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="_FireNadeZone__FireNadeZone", Storage="__FireNadeZone2", ThisKey="ZoneId", OtherKey="ParentZoneId")]
		public EntitySet<_FireNadeZone> _FireNadeZone2
		{
			get
			{
				return this.@__FireNadeZone2;
			}
			set
			{
				this.@__FireNadeZone2.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="_FireNadeZone__FireNadeZone", Storage="__FireNadeZone1", ThisKey="ParentZoneId", OtherKey="ZoneId", IsForeignKey=true)]
		public _FireNadeZone _FireNadeZone1
		{
			get
			{
				return this.@__FireNadeZone1.Entity;
			}
			set
			{
				_FireNadeZone previousValue = this.@__FireNadeZone1.Entity;
				if (((previousValue != value) 
							|| (this.@__FireNadeZone1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this.@__FireNadeZone1.Entity = null;
						previousValue._FireNadeZone2.Remove(this);
					}
					this.@__FireNadeZone1.Entity = value;
					if ((value != null))
					{
						value._FireNadeZone2.Add(this);
						this._ParentZoneId = value.ZoneId;
					}
					else
					{
						this._ParentZoneId = default(Nullable<int>);
					}
					this.SendPropertyChanged("_FireNadeZone1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach__FireNadePolygonPoint(_FireNadePolygonPoint entity)
		{
			this.SendPropertyChanging();
			entity._FireNadeZone = this;
		}
		
		private void detach__FireNadePolygonPoint(_FireNadePolygonPoint entity)
		{
			this.SendPropertyChanging();
			entity._FireNadeZone = null;
		}
		
		private void attach__FireNadeZone2(_FireNadeZone entity)
		{
			this.SendPropertyChanging();
			entity._FireNadeZone1 = this;
		}
		
		private void detach__FireNadeZone2(_FireNadeZone entity)
		{
			this.SendPropertyChanging();
			entity._FireNadeZone1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[_FlashPolygonPoint]")]
	public partial class _FlashPolygonPoint : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ZoneId;
		
		private int _PointId;
		
		private string _Map;
		
		private double _XIngame;
		
		private double _YIngame;
		
		private int _XPixel;
		
		private int _YPixel;
		
		private EntityRef<_FlashZone> @__FlashZone;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnZoneIdChanging(int value);
    partial void OnZoneIdChanged();
    partial void OnPointIdChanging(int value);
    partial void OnPointIdChanged();
    partial void OnMapChanging(string value);
    partial void OnMapChanged();
    partial void OnXIngameChanging(double value);
    partial void OnXIngameChanged();
    partial void OnYIngameChanging(double value);
    partial void OnYIngameChanged();
    partial void OnXPixelChanging(int value);
    partial void OnXPixelChanged();
    partial void OnYPixelChanging(int value);
    partial void OnYPixelChanged();
    #endregion
		
		public _FlashPolygonPoint()
		{
			this.@__FlashZone = default(EntityRef<_FlashZone>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ZoneId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ZoneId
		{
			get
			{
				return this._ZoneId;
			}
			set
			{
				if ((this._ZoneId != value))
				{
					if (this.@__FlashZone.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnZoneIdChanging(value);
					this.SendPropertyChanging();
					this._ZoneId = value;
					this.SendPropertyChanged("ZoneId");
					this.OnZoneIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PointId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int PointId
		{
			get
			{
				return this._PointId;
			}
			set
			{
				if ((this._PointId != value))
				{
					this.OnPointIdChanging(value);
					this.SendPropertyChanging();
					this._PointId = value;
					this.SendPropertyChanged("PointId");
					this.OnPointIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Map", DbType="NVarChar(MAX)")]
		public string Map
		{
			get
			{
				return this._Map;
			}
			set
			{
				if ((this._Map != value))
				{
					this.OnMapChanging(value);
					this.SendPropertyChanging();
					this._Map = value;
					this.SendPropertyChanged("Map");
					this.OnMapChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_XIngame", DbType="Float NOT NULL")]
		public double XIngame
		{
			get
			{
				return this._XIngame;
			}
			set
			{
				if ((this._XIngame != value))
				{
					this.OnXIngameChanging(value);
					this.SendPropertyChanging();
					this._XIngame = value;
					this.SendPropertyChanged("XIngame");
					this.OnXIngameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_YIngame", DbType="Float NOT NULL")]
		public double YIngame
		{
			get
			{
				return this._YIngame;
			}
			set
			{
				if ((this._YIngame != value))
				{
					this.OnYIngameChanging(value);
					this.SendPropertyChanging();
					this._YIngame = value;
					this.SendPropertyChanged("YIngame");
					this.OnYIngameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_XPixel", DbType="Int NOT NULL")]
		public int XPixel
		{
			get
			{
				return this._XPixel;
			}
			set
			{
				if ((this._XPixel != value))
				{
					this.OnXPixelChanging(value);
					this.SendPropertyChanging();
					this._XPixel = value;
					this.SendPropertyChanged("XPixel");
					this.OnXPixelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_YPixel", DbType="Int NOT NULL")]
		public int YPixel
		{
			get
			{
				return this._YPixel;
			}
			set
			{
				if ((this._YPixel != value))
				{
					this.OnYPixelChanging(value);
					this.SendPropertyChanging();
					this._YPixel = value;
					this.SendPropertyChanged("YPixel");
					this.OnYPixelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="_FlashZone__FlashPolygonPoint", Storage="__FlashZone", ThisKey="ZoneId", OtherKey="ZoneId", IsForeignKey=true)]
		public _FlashZone _FlashZone
		{
			get
			{
				return this.@__FlashZone.Entity;
			}
			set
			{
				_FlashZone previousValue = this.@__FlashZone.Entity;
				if (((previousValue != value) 
							|| (this.@__FlashZone.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this.@__FlashZone.Entity = null;
						previousValue._FlashPolygonPoint.Remove(this);
					}
					this.@__FlashZone.Entity = value;
					if ((value != null))
					{
						value._FlashPolygonPoint.Add(this);
						this._ZoneId = value.ZoneId;
					}
					else
					{
						this._ZoneId = default(int);
					}
					this.SendPropertyChanged("_FlashZone");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[_FlashZone]")]
	public partial class _FlashZone : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ZoneId;
		
		private string _Map;
		
		private string _Name;
		
		private byte _Team;
		
		private System.Nullable<double> _ZMin;
		
		private System.Nullable<double> _ZMax;
		
		private double _CenterXIngame;
		
		private double _CenterYIngame;
		
		private int _CenterXPixel;
		
		private int _CenterYPixel;
		
		private System.Nullable<int> _ParentZoneId;
		
		private EntitySet<_FlashPolygonPoint> @__FlashPolygonPoint;
		
		private EntitySet<_FlashZone> @__FlashZone2;
		
		private EntityRef<_FlashZone> @__FlashZone1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnZoneIdChanging(int value);
    partial void OnZoneIdChanged();
    partial void OnMapChanging(string value);
    partial void OnMapChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnTeamChanging(byte value);
    partial void OnTeamChanged();
    partial void OnZMinChanging(System.Nullable<double> value);
    partial void OnZMinChanged();
    partial void OnZMaxChanging(System.Nullable<double> value);
    partial void OnZMaxChanged();
    partial void OnCenterXIngameChanging(double value);
    partial void OnCenterXIngameChanged();
    partial void OnCenterYIngameChanging(double value);
    partial void OnCenterYIngameChanged();
    partial void OnCenterXPixelChanging(int value);
    partial void OnCenterXPixelChanged();
    partial void OnCenterYPixelChanging(int value);
    partial void OnCenterYPixelChanged();
    partial void OnParentZoneIdChanging(System.Nullable<int> value);
    partial void OnParentZoneIdChanged();
    #endregion
		
		public _FlashZone()
		{
			this.@__FlashPolygonPoint = new EntitySet<_FlashPolygonPoint>(new Action<_FlashPolygonPoint>(this.attach__FlashPolygonPoint), new Action<_FlashPolygonPoint>(this.detach__FlashPolygonPoint));
			this.@__FlashZone2 = new EntitySet<_FlashZone>(new Action<_FlashZone>(this.attach__FlashZone2), new Action<_FlashZone>(this.detach__FlashZone2));
			this.@__FlashZone1 = default(EntityRef<_FlashZone>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ZoneId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ZoneId
		{
			get
			{
				return this._ZoneId;
			}
			set
			{
				if ((this._ZoneId != value))
				{
					this.OnZoneIdChanging(value);
					this.SendPropertyChanging();
					this._ZoneId = value;
					this.SendPropertyChanged("ZoneId");
					this.OnZoneIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Map", DbType="NVarChar(MAX)")]
		public string Map
		{
			get
			{
				return this._Map;
			}
			set
			{
				if ((this._Map != value))
				{
					this.OnMapChanging(value);
					this.SendPropertyChanging();
					this._Map = value;
					this.SendPropertyChanged("Map");
					this.OnMapChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(MAX)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Team", DbType="TinyInt NOT NULL")]
		public byte Team
		{
			get
			{
				return this._Team;
			}
			set
			{
				if ((this._Team != value))
				{
					this.OnTeamChanging(value);
					this.SendPropertyChanging();
					this._Team = value;
					this.SendPropertyChanged("Team");
					this.OnTeamChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ZMin", DbType="Float")]
		public System.Nullable<double> ZMin
		{
			get
			{
				return this._ZMin;
			}
			set
			{
				if ((this._ZMin != value))
				{
					this.OnZMinChanging(value);
					this.SendPropertyChanging();
					this._ZMin = value;
					this.SendPropertyChanged("ZMin");
					this.OnZMinChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ZMax", DbType="Float")]
		public System.Nullable<double> ZMax
		{
			get
			{
				return this._ZMax;
			}
			set
			{
				if ((this._ZMax != value))
				{
					this.OnZMaxChanging(value);
					this.SendPropertyChanging();
					this._ZMax = value;
					this.SendPropertyChanged("ZMax");
					this.OnZMaxChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CenterXIngame", DbType="Float NOT NULL")]
		public double CenterXIngame
		{
			get
			{
				return this._CenterXIngame;
			}
			set
			{
				if ((this._CenterXIngame != value))
				{
					this.OnCenterXIngameChanging(value);
					this.SendPropertyChanging();
					this._CenterXIngame = value;
					this.SendPropertyChanged("CenterXIngame");
					this.OnCenterXIngameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CenterYIngame", DbType="Float NOT NULL")]
		public double CenterYIngame
		{
			get
			{
				return this._CenterYIngame;
			}
			set
			{
				if ((this._CenterYIngame != value))
				{
					this.OnCenterYIngameChanging(value);
					this.SendPropertyChanging();
					this._CenterYIngame = value;
					this.SendPropertyChanged("CenterYIngame");
					this.OnCenterYIngameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CenterXPixel", DbType="Int NOT NULL")]
		public int CenterXPixel
		{
			get
			{
				return this._CenterXPixel;
			}
			set
			{
				if ((this._CenterXPixel != value))
				{
					this.OnCenterXPixelChanging(value);
					this.SendPropertyChanging();
					this._CenterXPixel = value;
					this.SendPropertyChanged("CenterXPixel");
					this.OnCenterXPixelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CenterYPixel", DbType="Int NOT NULL")]
		public int CenterYPixel
		{
			get
			{
				return this._CenterYPixel;
			}
			set
			{
				if ((this._CenterYPixel != value))
				{
					this.OnCenterYPixelChanging(value);
					this.SendPropertyChanging();
					this._CenterYPixel = value;
					this.SendPropertyChanged("CenterYPixel");
					this.OnCenterYPixelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ParentZoneId", DbType="Int")]
		public System.Nullable<int> ParentZoneId
		{
			get
			{
				return this._ParentZoneId;
			}
			set
			{
				if ((this._ParentZoneId != value))
				{
					if (this.@__FlashZone1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnParentZoneIdChanging(value);
					this.SendPropertyChanging();
					this._ParentZoneId = value;
					this.SendPropertyChanged("ParentZoneId");
					this.OnParentZoneIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="_FlashZone__FlashPolygonPoint", Storage="__FlashPolygonPoint", ThisKey="ZoneId", OtherKey="ZoneId")]
		public EntitySet<_FlashPolygonPoint> _FlashPolygonPoint
		{
			get
			{
				return this.@__FlashPolygonPoint;
			}
			set
			{
				this.@__FlashPolygonPoint.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="_FlashZone__FlashZone", Storage="__FlashZone2", ThisKey="ZoneId", OtherKey="ParentZoneId")]
		public EntitySet<_FlashZone> _FlashZone2
		{
			get
			{
				return this.@__FlashZone2;
			}
			set
			{
				this.@__FlashZone2.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="_FlashZone__FlashZone", Storage="__FlashZone1", ThisKey="ParentZoneId", OtherKey="ZoneId", IsForeignKey=true)]
		public _FlashZone _FlashZone1
		{
			get
			{
				return this.@__FlashZone1.Entity;
			}
			set
			{
				_FlashZone previousValue = this.@__FlashZone1.Entity;
				if (((previousValue != value) 
							|| (this.@__FlashZone1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this.@__FlashZone1.Entity = null;
						previousValue._FlashZone2.Remove(this);
					}
					this.@__FlashZone1.Entity = value;
					if ((value != null))
					{
						value._FlashZone2.Add(this);
						this._ParentZoneId = value.ZoneId;
					}
					else
					{
						this._ParentZoneId = default(Nullable<int>);
					}
					this.SendPropertyChanged("_FlashZone1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach__FlashPolygonPoint(_FlashPolygonPoint entity)
		{
			this.SendPropertyChanging();
			entity._FlashZone = this;
		}
		
		private void detach__FlashPolygonPoint(_FlashPolygonPoint entity)
		{
			this.SendPropertyChanging();
			entity._FlashZone = null;
		}
		
		private void attach__FlashZone2(_FlashZone entity)
		{
			this.SendPropertyChanging();
			entity._FlashZone1 = this;
		}
		
		private void detach__FlashZone2(_FlashZone entity)
		{
			this.SendPropertyChanging();
			entity._FlashZone1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[_HEPolygonPoint]")]
	public partial class _HEPolygonPoint : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ZoneId;
		
		private int _PointId;
		
		private string _Map;
		
		private double _XIngame;
		
		private double _YIngame;
		
		private int _XPixel;
		
		private int _YPixel;
		
		private EntityRef<_HEZone> @__HEZone;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnZoneIdChanging(int value);
    partial void OnZoneIdChanged();
    partial void OnPointIdChanging(int value);
    partial void OnPointIdChanged();
    partial void OnMapChanging(string value);
    partial void OnMapChanged();
    partial void OnXIngameChanging(double value);
    partial void OnXIngameChanged();
    partial void OnYIngameChanging(double value);
    partial void OnYIngameChanged();
    partial void OnXPixelChanging(int value);
    partial void OnXPixelChanged();
    partial void OnYPixelChanging(int value);
    partial void OnYPixelChanged();
    #endregion
		
		public _HEPolygonPoint()
		{
			this.@__HEZone = default(EntityRef<_HEZone>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ZoneId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ZoneId
		{
			get
			{
				return this._ZoneId;
			}
			set
			{
				if ((this._ZoneId != value))
				{
					if (this.@__HEZone.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnZoneIdChanging(value);
					this.SendPropertyChanging();
					this._ZoneId = value;
					this.SendPropertyChanged("ZoneId");
					this.OnZoneIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PointId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int PointId
		{
			get
			{
				return this._PointId;
			}
			set
			{
				if ((this._PointId != value))
				{
					this.OnPointIdChanging(value);
					this.SendPropertyChanging();
					this._PointId = value;
					this.SendPropertyChanged("PointId");
					this.OnPointIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Map", DbType="NVarChar(MAX)")]
		public string Map
		{
			get
			{
				return this._Map;
			}
			set
			{
				if ((this._Map != value))
				{
					this.OnMapChanging(value);
					this.SendPropertyChanging();
					this._Map = value;
					this.SendPropertyChanged("Map");
					this.OnMapChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_XIngame", DbType="Float NOT NULL")]
		public double XIngame
		{
			get
			{
				return this._XIngame;
			}
			set
			{
				if ((this._XIngame != value))
				{
					this.OnXIngameChanging(value);
					this.SendPropertyChanging();
					this._XIngame = value;
					this.SendPropertyChanged("XIngame");
					this.OnXIngameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_YIngame", DbType="Float NOT NULL")]
		public double YIngame
		{
			get
			{
				return this._YIngame;
			}
			set
			{
				if ((this._YIngame != value))
				{
					this.OnYIngameChanging(value);
					this.SendPropertyChanging();
					this._YIngame = value;
					this.SendPropertyChanged("YIngame");
					this.OnYIngameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_XPixel", DbType="Int NOT NULL")]
		public int XPixel
		{
			get
			{
				return this._XPixel;
			}
			set
			{
				if ((this._XPixel != value))
				{
					this.OnXPixelChanging(value);
					this.SendPropertyChanging();
					this._XPixel = value;
					this.SendPropertyChanged("XPixel");
					this.OnXPixelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_YPixel", DbType="Int NOT NULL")]
		public int YPixel
		{
			get
			{
				return this._YPixel;
			}
			set
			{
				if ((this._YPixel != value))
				{
					this.OnYPixelChanging(value);
					this.SendPropertyChanging();
					this._YPixel = value;
					this.SendPropertyChanged("YPixel");
					this.OnYPixelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="_HEZone__HEPolygonPoint", Storage="__HEZone", ThisKey="ZoneId", OtherKey="ZoneId", IsForeignKey=true)]
		public _HEZone _HEZone
		{
			get
			{
				return this.@__HEZone.Entity;
			}
			set
			{
				_HEZone previousValue = this.@__HEZone.Entity;
				if (((previousValue != value) 
							|| (this.@__HEZone.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this.@__HEZone.Entity = null;
						previousValue._HEPolygonPoint.Remove(this);
					}
					this.@__HEZone.Entity = value;
					if ((value != null))
					{
						value._HEPolygonPoint.Add(this);
						this._ZoneId = value.ZoneId;
					}
					else
					{
						this._ZoneId = default(int);
					}
					this.SendPropertyChanged("_HEZone");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[_HEZone]")]
	public partial class _HEZone : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ZoneId;
		
		private string _Map;
		
		private string _Name;
		
		private byte _Team;
		
		private System.Nullable<double> _ZMin;
		
		private System.Nullable<double> _ZMax;
		
		private double _CenterXIngame;
		
		private double _CenterYIngame;
		
		private int _CenterXPixel;
		
		private int _CenterYPixel;
		
		private System.Nullable<int> _ParentZoneId;
		
		private EntitySet<_HEPolygonPoint> @__HEPolygonPoint;
		
		private EntitySet<_HEZone> @__HEZone2;
		
		private EntityRef<_HEZone> @__HEZone1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnZoneIdChanging(int value);
    partial void OnZoneIdChanged();
    partial void OnMapChanging(string value);
    partial void OnMapChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnTeamChanging(byte value);
    partial void OnTeamChanged();
    partial void OnZMinChanging(System.Nullable<double> value);
    partial void OnZMinChanged();
    partial void OnZMaxChanging(System.Nullable<double> value);
    partial void OnZMaxChanged();
    partial void OnCenterXIngameChanging(double value);
    partial void OnCenterXIngameChanged();
    partial void OnCenterYIngameChanging(double value);
    partial void OnCenterYIngameChanged();
    partial void OnCenterXPixelChanging(int value);
    partial void OnCenterXPixelChanged();
    partial void OnCenterYPixelChanging(int value);
    partial void OnCenterYPixelChanged();
    partial void OnParentZoneIdChanging(System.Nullable<int> value);
    partial void OnParentZoneIdChanged();
    #endregion
		
		public _HEZone()
		{
			this.@__HEPolygonPoint = new EntitySet<_HEPolygonPoint>(new Action<_HEPolygonPoint>(this.attach__HEPolygonPoint), new Action<_HEPolygonPoint>(this.detach__HEPolygonPoint));
			this.@__HEZone2 = new EntitySet<_HEZone>(new Action<_HEZone>(this.attach__HEZone2), new Action<_HEZone>(this.detach__HEZone2));
			this.@__HEZone1 = default(EntityRef<_HEZone>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ZoneId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ZoneId
		{
			get
			{
				return this._ZoneId;
			}
			set
			{
				if ((this._ZoneId != value))
				{
					this.OnZoneIdChanging(value);
					this.SendPropertyChanging();
					this._ZoneId = value;
					this.SendPropertyChanged("ZoneId");
					this.OnZoneIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Map", DbType="NVarChar(MAX)")]
		public string Map
		{
			get
			{
				return this._Map;
			}
			set
			{
				if ((this._Map != value))
				{
					this.OnMapChanging(value);
					this.SendPropertyChanging();
					this._Map = value;
					this.SendPropertyChanged("Map");
					this.OnMapChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(MAX)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Team", DbType="TinyInt NOT NULL")]
		public byte Team
		{
			get
			{
				return this._Team;
			}
			set
			{
				if ((this._Team != value))
				{
					this.OnTeamChanging(value);
					this.SendPropertyChanging();
					this._Team = value;
					this.SendPropertyChanged("Team");
					this.OnTeamChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ZMin", DbType="Float")]
		public System.Nullable<double> ZMin
		{
			get
			{
				return this._ZMin;
			}
			set
			{
				if ((this._ZMin != value))
				{
					this.OnZMinChanging(value);
					this.SendPropertyChanging();
					this._ZMin = value;
					this.SendPropertyChanged("ZMin");
					this.OnZMinChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ZMax", DbType="Float")]
		public System.Nullable<double> ZMax
		{
			get
			{
				return this._ZMax;
			}
			set
			{
				if ((this._ZMax != value))
				{
					this.OnZMaxChanging(value);
					this.SendPropertyChanging();
					this._ZMax = value;
					this.SendPropertyChanged("ZMax");
					this.OnZMaxChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CenterXIngame", DbType="Float NOT NULL")]
		public double CenterXIngame
		{
			get
			{
				return this._CenterXIngame;
			}
			set
			{
				if ((this._CenterXIngame != value))
				{
					this.OnCenterXIngameChanging(value);
					this.SendPropertyChanging();
					this._CenterXIngame = value;
					this.SendPropertyChanged("CenterXIngame");
					this.OnCenterXIngameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CenterYIngame", DbType="Float NOT NULL")]
		public double CenterYIngame
		{
			get
			{
				return this._CenterYIngame;
			}
			set
			{
				if ((this._CenterYIngame != value))
				{
					this.OnCenterYIngameChanging(value);
					this.SendPropertyChanging();
					this._CenterYIngame = value;
					this.SendPropertyChanged("CenterYIngame");
					this.OnCenterYIngameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CenterXPixel", DbType="Int NOT NULL")]
		public int CenterXPixel
		{
			get
			{
				return this._CenterXPixel;
			}
			set
			{
				if ((this._CenterXPixel != value))
				{
					this.OnCenterXPixelChanging(value);
					this.SendPropertyChanging();
					this._CenterXPixel = value;
					this.SendPropertyChanged("CenterXPixel");
					this.OnCenterXPixelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CenterYPixel", DbType="Int NOT NULL")]
		public int CenterYPixel
		{
			get
			{
				return this._CenterYPixel;
			}
			set
			{
				if ((this._CenterYPixel != value))
				{
					this.OnCenterYPixelChanging(value);
					this.SendPropertyChanging();
					this._CenterYPixel = value;
					this.SendPropertyChanged("CenterYPixel");
					this.OnCenterYPixelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ParentZoneId", DbType="Int")]
		public System.Nullable<int> ParentZoneId
		{
			get
			{
				return this._ParentZoneId;
			}
			set
			{
				if ((this._ParentZoneId != value))
				{
					if (this.@__HEZone1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnParentZoneIdChanging(value);
					this.SendPropertyChanging();
					this._ParentZoneId = value;
					this.SendPropertyChanged("ParentZoneId");
					this.OnParentZoneIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="_HEZone__HEPolygonPoint", Storage="__HEPolygonPoint", ThisKey="ZoneId", OtherKey="ZoneId")]
		public EntitySet<_HEPolygonPoint> _HEPolygonPoint
		{
			get
			{
				return this.@__HEPolygonPoint;
			}
			set
			{
				this.@__HEPolygonPoint.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="_HEZone__HEZone", Storage="__HEZone2", ThisKey="ZoneId", OtherKey="ParentZoneId")]
		public EntitySet<_HEZone> _HEZone2
		{
			get
			{
				return this.@__HEZone2;
			}
			set
			{
				this.@__HEZone2.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="_HEZone__HEZone", Storage="__HEZone1", ThisKey="ParentZoneId", OtherKey="ZoneId", IsForeignKey=true)]
		public _HEZone _HEZone1
		{
			get
			{
				return this.@__HEZone1.Entity;
			}
			set
			{
				_HEZone previousValue = this.@__HEZone1.Entity;
				if (((previousValue != value) 
							|| (this.@__HEZone1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this.@__HEZone1.Entity = null;
						previousValue._HEZone2.Remove(this);
					}
					this.@__HEZone1.Entity = value;
					if ((value != null))
					{
						value._HEZone2.Add(this);
						this._ParentZoneId = value.ZoneId;
					}
					else
					{
						this._ParentZoneId = default(Nullable<int>);
					}
					this.SendPropertyChanged("_HEZone1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach__HEPolygonPoint(_HEPolygonPoint entity)
		{
			this.SendPropertyChanging();
			entity._HEZone = this;
		}
		
		private void detach__HEPolygonPoint(_HEPolygonPoint entity)
		{
			this.SendPropertyChanging();
			entity._HEZone = null;
		}
		
		private void attach__HEZone2(_HEZone entity)
		{
			this.SendPropertyChanging();
			entity._HEZone1 = this;
		}
		
		private void detach__HEZone2(_HEZone entity)
		{
			this.SendPropertyChanging();
			entity._HEZone1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[_MapSettings]")]
	public partial class _MapSettings : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Map;
		
		private double _ConversionOffsetX;
		
		private double _ConversionOffsetY;
		
		private double _ConversionScaleX;
		
		private double _ConversionScaleY;
		
		private double _CropXMin;
		
		private double _CropYMin;
		
		private double _CropXMax;
		
		private double _CropYMax;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnMapChanging(string value);
    partial void OnMapChanged();
    partial void OnConversionOffsetXChanging(double value);
    partial void OnConversionOffsetXChanged();
    partial void OnConversionOffsetYChanging(double value);
    partial void OnConversionOffsetYChanged();
    partial void OnConversionScaleXChanging(double value);
    partial void OnConversionScaleXChanged();
    partial void OnConversionScaleYChanging(double value);
    partial void OnConversionScaleYChanged();
    partial void OnCropXMinChanging(double value);
    partial void OnCropXMinChanged();
    partial void OnCropYMinChanging(double value);
    partial void OnCropYMinChanged();
    partial void OnCropXMaxChanging(double value);
    partial void OnCropXMaxChanged();
    partial void OnCropYMaxChanging(double value);
    partial void OnCropYMaxChanged();
    #endregion
		
		public _MapSettings()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Map", DbType="NVarChar(MAX)")]
		public string Map
		{
			get
			{
				return this._Map;
			}
			set
			{
				if ((this._Map != value))
				{
					this.OnMapChanging(value);
					this.SendPropertyChanging();
					this._Map = value;
					this.SendPropertyChanged("Map");
					this.OnMapChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ConversionOffsetX", DbType="Float NOT NULL")]
		public double ConversionOffsetX
		{
			get
			{
				return this._ConversionOffsetX;
			}
			set
			{
				if ((this._ConversionOffsetX != value))
				{
					this.OnConversionOffsetXChanging(value);
					this.SendPropertyChanging();
					this._ConversionOffsetX = value;
					this.SendPropertyChanged("ConversionOffsetX");
					this.OnConversionOffsetXChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ConversionOffsetY", DbType="Float NOT NULL")]
		public double ConversionOffsetY
		{
			get
			{
				return this._ConversionOffsetY;
			}
			set
			{
				if ((this._ConversionOffsetY != value))
				{
					this.OnConversionOffsetYChanging(value);
					this.SendPropertyChanging();
					this._ConversionOffsetY = value;
					this.SendPropertyChanged("ConversionOffsetY");
					this.OnConversionOffsetYChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ConversionScaleX", DbType="Float NOT NULL")]
		public double ConversionScaleX
		{
			get
			{
				return this._ConversionScaleX;
			}
			set
			{
				if ((this._ConversionScaleX != value))
				{
					this.OnConversionScaleXChanging(value);
					this.SendPropertyChanging();
					this._ConversionScaleX = value;
					this.SendPropertyChanged("ConversionScaleX");
					this.OnConversionScaleXChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ConversionScaleY", DbType="Float NOT NULL")]
		public double ConversionScaleY
		{
			get
			{
				return this._ConversionScaleY;
			}
			set
			{
				if ((this._ConversionScaleY != value))
				{
					this.OnConversionScaleYChanging(value);
					this.SendPropertyChanging();
					this._ConversionScaleY = value;
					this.SendPropertyChanged("ConversionScaleY");
					this.OnConversionScaleYChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CropXMin", DbType="Float NOT NULL")]
		public double CropXMin
		{
			get
			{
				return this._CropXMin;
			}
			set
			{
				if ((this._CropXMin != value))
				{
					this.OnCropXMinChanging(value);
					this.SendPropertyChanging();
					this._CropXMin = value;
					this.SendPropertyChanged("CropXMin");
					this.OnCropXMinChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CropYMin", DbType="Float NOT NULL")]
		public double CropYMin
		{
			get
			{
				return this._CropYMin;
			}
			set
			{
				if ((this._CropYMin != value))
				{
					this.OnCropYMinChanging(value);
					this.SendPropertyChanging();
					this._CropYMin = value;
					this.SendPropertyChanged("CropYMin");
					this.OnCropYMinChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CropXMax", DbType="Float NOT NULL")]
		public double CropXMax
		{
			get
			{
				return this._CropXMax;
			}
			set
			{
				if ((this._CropXMax != value))
				{
					this.OnCropXMaxChanging(value);
					this.SendPropertyChanging();
					this._CropXMax = value;
					this.SendPropertyChanged("CropXMax");
					this.OnCropXMaxChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CropYMax", DbType="Float NOT NULL")]
		public double CropYMax
		{
			get
			{
				return this._CropYMax;
			}
			set
			{
				if ((this._CropYMax != value))
				{
					this.OnCropYMaxChanging(value);
					this.SendPropertyChanging();
					this._CropYMax = value;
					this.SendPropertyChanged("CropYMax");
					this.OnCropYMaxChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[_PlayerMatchSmokeStats]")]
	public partial class _PlayerMatchSmokeStats : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _MatchId;
		
		private long _PlayerId;
		
		private int @__Category;
		
		private byte @__Attempts;
		
		private byte @__Misses;
		
		private byte @__Insides;
		
		private byte @__Gapfrees;
		
		private EntityRef<MatchStats> _MatchStats;
		
		private EntityRef<PlayerMatchStats> _PlayerMatchStats;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMatchIdChanging(long value);
    partial void OnMatchIdChanged();
    partial void OnPlayerIdChanging(long value);
    partial void OnPlayerIdChanged();
    partial void On_CategoryChanging(int value);
    partial void On_CategoryChanged();
    partial void On_AttemptsChanging(byte value);
    partial void On_AttemptsChanged();
    partial void On_MissesChanging(byte value);
    partial void On_MissesChanged();
    partial void On_InsidesChanging(byte value);
    partial void On_InsidesChanged();
    partial void On_GapfreesChanging(byte value);
    partial void On_GapfreesChanged();
    #endregion
		
		public _PlayerMatchSmokeStats()
		{
			this._MatchStats = default(EntityRef<MatchStats>);
			this._PlayerMatchStats = default(EntityRef<PlayerMatchStats>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MatchId", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long MatchId
		{
			get
			{
				return this._MatchId;
			}
			set
			{
				if ((this._MatchId != value))
				{
					if ((this._MatchStats.HasLoadedOrAssignedValue || this._PlayerMatchStats.HasLoadedOrAssignedValue))
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMatchIdChanging(value);
					this.SendPropertyChanging();
					this._MatchId = value;
					this.SendPropertyChanged("MatchId");
					this.OnMatchIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlayerId", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long PlayerId
		{
			get
			{
				return this._PlayerId;
			}
			set
			{
				if ((this._PlayerId != value))
				{
					if (this._PlayerMatchStats.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPlayerIdChanging(value);
					this.SendPropertyChanging();
					this._PlayerId = value;
					this.SendPropertyChanged("PlayerId");
					this.OnPlayerIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[_Category]", Storage="__Category", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int _Category
		{
			get
			{
				return this.@__Category;
			}
			set
			{
				if ((this.@__Category != value))
				{
					this.On_CategoryChanging(value);
					this.SendPropertyChanging();
					this.@__Category = value;
					this.SendPropertyChanged("_Category");
					this.On_CategoryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[_Attempts]", Storage="__Attempts", DbType="TinyInt NOT NULL")]
		public byte _Attempts
		{
			get
			{
				return this.@__Attempts;
			}
			set
			{
				if ((this.@__Attempts != value))
				{
					this.On_AttemptsChanging(value);
					this.SendPropertyChanging();
					this.@__Attempts = value;
					this.SendPropertyChanged("_Attempts");
					this.On_AttemptsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[_Misses]", Storage="__Misses", DbType="TinyInt NOT NULL")]
		public byte _Misses
		{
			get
			{
				return this.@__Misses;
			}
			set
			{
				if ((this.@__Misses != value))
				{
					this.On_MissesChanging(value);
					this.SendPropertyChanging();
					this.@__Misses = value;
					this.SendPropertyChanged("_Misses");
					this.On_MissesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[_Insides]", Storage="__Insides", DbType="TinyInt NOT NULL")]
		public byte _Insides
		{
			get
			{
				return this.@__Insides;
			}
			set
			{
				if ((this.@__Insides != value))
				{
					this.On_InsidesChanging(value);
					this.SendPropertyChanging();
					this.@__Insides = value;
					this.SendPropertyChanged("_Insides");
					this.On_InsidesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[_Gapfrees]", Storage="__Gapfrees", DbType="TinyInt NOT NULL")]
		public byte _Gapfrees
		{
			get
			{
				return this.@__Gapfrees;
			}
			set
			{
				if ((this.@__Gapfrees != value))
				{
					this.On_GapfreesChanging(value);
					this.SendPropertyChanging();
					this.@__Gapfrees = value;
					this.SendPropertyChanged("_Gapfrees");
					this.On_GapfreesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MatchStats__PlayerMatchSmokeStats", Storage="_MatchStats", ThisKey="MatchId", OtherKey="MatchId", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public MatchStats MatchStats
		{
			get
			{
				return this._MatchStats.Entity;
			}
			set
			{
				MatchStats previousValue = this._MatchStats.Entity;
				if (((previousValue != value) 
							|| (this._MatchStats.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MatchStats.Entity = null;
						previousValue._PlayerMatchSmokeStats.Remove(this);
					}
					this._MatchStats.Entity = value;
					if ((value != null))
					{
						value._PlayerMatchSmokeStats.Add(this);
						this._MatchId = value.MatchId;
					}
					else
					{
						this._MatchId = default(long);
					}
					this.SendPropertyChanged("MatchStats");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PlayerMatchStats__PlayerMatchSmokeStats", Storage="_PlayerMatchStats", ThisKey="MatchId,PlayerId", OtherKey="MatchId,SteamId", IsForeignKey=true)]
		public PlayerMatchStats PlayerMatchStats
		{
			get
			{
				return this._PlayerMatchStats.Entity;
			}
			set
			{
				PlayerMatchStats previousValue = this._PlayerMatchStats.Entity;
				if (((previousValue != value) 
							|| (this._PlayerMatchStats.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PlayerMatchStats.Entity = null;
						previousValue._PlayerMatchSmokeStats.Remove(this);
					}
					this._PlayerMatchStats.Entity = value;
					if ((value != null))
					{
						value._PlayerMatchSmokeStats.Add(this);
						this._MatchId = value.MatchId;
						this._PlayerId = value.SteamId;
					}
					else
					{
						this._MatchId = default(long);
						this._PlayerId = default(long);
					}
					this.SendPropertyChanged("PlayerMatchStats");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[_PositionOpposingZones]")]
	public partial class _PositionOpposingZones : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TZoneId;
		
		private int _CtZoneId;
		
		private string _Map;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTZoneIdChanging(int value);
    partial void OnTZoneIdChanged();
    partial void OnCtZoneIdChanging(int value);
    partial void OnCtZoneIdChanged();
    partial void OnMapChanging(string value);
    partial void OnMapChanged();
    #endregion
		
		public _PositionOpposingZones()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TZoneId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int TZoneId
		{
			get
			{
				return this._TZoneId;
			}
			set
			{
				if ((this._TZoneId != value))
				{
					this.OnTZoneIdChanging(value);
					this.SendPropertyChanging();
					this._TZoneId = value;
					this.SendPropertyChanged("TZoneId");
					this.OnTZoneIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CtZoneId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int CtZoneId
		{
			get
			{
				return this._CtZoneId;
			}
			set
			{
				if ((this._CtZoneId != value))
				{
					this.OnCtZoneIdChanging(value);
					this.SendPropertyChanging();
					this._CtZoneId = value;
					this.SendPropertyChanged("CtZoneId");
					this.OnCtZoneIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Map", DbType="NVarChar(MAX)")]
		public string Map
		{
			get
			{
				return this._Map;
			}
			set
			{
				if ((this._Map != value))
				{
					this.OnMapChanging(value);
					this.SendPropertyChanging();
					this._Map = value;
					this.SendPropertyChanged("Map");
					this.OnMapChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[_PositionPolygonPoint]")]
	public partial class _PositionPolygonPoint : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ZoneId;
		
		private int _PointId;
		
		private string _Map;
		
		private double _XIngame;
		
		private double _YIngame;
		
		private int _XPixel;
		
		private int _YPixel;
		
		private EntityRef<_PositionZone> @__PositionZone;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnZoneIdChanging(int value);
    partial void OnZoneIdChanged();
    partial void OnPointIdChanging(int value);
    partial void OnPointIdChanged();
    partial void OnMapChanging(string value);
    partial void OnMapChanged();
    partial void OnXIngameChanging(double value);
    partial void OnXIngameChanged();
    partial void OnYIngameChanging(double value);
    partial void OnYIngameChanged();
    partial void OnXPixelChanging(int value);
    partial void OnXPixelChanged();
    partial void OnYPixelChanging(int value);
    partial void OnYPixelChanged();
    #endregion
		
		public _PositionPolygonPoint()
		{
			this.@__PositionZone = default(EntityRef<_PositionZone>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ZoneId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ZoneId
		{
			get
			{
				return this._ZoneId;
			}
			set
			{
				if ((this._ZoneId != value))
				{
					if (this.@__PositionZone.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnZoneIdChanging(value);
					this.SendPropertyChanging();
					this._ZoneId = value;
					this.SendPropertyChanged("ZoneId");
					this.OnZoneIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PointId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int PointId
		{
			get
			{
				return this._PointId;
			}
			set
			{
				if ((this._PointId != value))
				{
					this.OnPointIdChanging(value);
					this.SendPropertyChanging();
					this._PointId = value;
					this.SendPropertyChanged("PointId");
					this.OnPointIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Map", DbType="NVarChar(MAX)")]
		public string Map
		{
			get
			{
				return this._Map;
			}
			set
			{
				if ((this._Map != value))
				{
					this.OnMapChanging(value);
					this.SendPropertyChanging();
					this._Map = value;
					this.SendPropertyChanged("Map");
					this.OnMapChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_XIngame", DbType="Float NOT NULL")]
		public double XIngame
		{
			get
			{
				return this._XIngame;
			}
			set
			{
				if ((this._XIngame != value))
				{
					this.OnXIngameChanging(value);
					this.SendPropertyChanging();
					this._XIngame = value;
					this.SendPropertyChanged("XIngame");
					this.OnXIngameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_YIngame", DbType="Float NOT NULL")]
		public double YIngame
		{
			get
			{
				return this._YIngame;
			}
			set
			{
				if ((this._YIngame != value))
				{
					this.OnYIngameChanging(value);
					this.SendPropertyChanging();
					this._YIngame = value;
					this.SendPropertyChanged("YIngame");
					this.OnYIngameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_XPixel", DbType="Int NOT NULL")]
		public int XPixel
		{
			get
			{
				return this._XPixel;
			}
			set
			{
				if ((this._XPixel != value))
				{
					this.OnXPixelChanging(value);
					this.SendPropertyChanging();
					this._XPixel = value;
					this.SendPropertyChanged("XPixel");
					this.OnXPixelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_YPixel", DbType="Int NOT NULL")]
		public int YPixel
		{
			get
			{
				return this._YPixel;
			}
			set
			{
				if ((this._YPixel != value))
				{
					this.OnYPixelChanging(value);
					this.SendPropertyChanging();
					this._YPixel = value;
					this.SendPropertyChanged("YPixel");
					this.OnYPixelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="_PositionZone__PositionPolygonPoint", Storage="__PositionZone", ThisKey="ZoneId", OtherKey="ZoneId", IsForeignKey=true)]
		public _PositionZone _PositionZone
		{
			get
			{
				return this.@__PositionZone.Entity;
			}
			set
			{
				_PositionZone previousValue = this.@__PositionZone.Entity;
				if (((previousValue != value) 
							|| (this.@__PositionZone.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this.@__PositionZone.Entity = null;
						previousValue._PositionPolygonPoint.Remove(this);
					}
					this.@__PositionZone.Entity = value;
					if ((value != null))
					{
						value._PositionPolygonPoint.Add(this);
						this._ZoneId = value.ZoneId;
					}
					else
					{
						this._ZoneId = default(int);
					}
					this.SendPropertyChanged("_PositionZone");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[_PositionZone]")]
	public partial class _PositionZone : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ZoneId;
		
		private string _Map;
		
		private string _Name;
		
		private short _Team;
		
		private string _VideoUrl;
		
		private System.Nullable<double> _ZMin;
		
		private System.Nullable<double> _ZMax;
		
		private double _CenterXIngame;
		
		private double _CenterYIngame;
		
		private int _CenterXPixel;
		
		private int _CenterYPixel;
		
		private System.Nullable<int> _ParentZoneId;
		
		private EntitySet<_PositionPolygonPoint> @__PositionPolygonPoint;
		
		private EntitySet<_PositionZone> @__PositionZone2;
		
		private EntityRef<_PositionZone> @__PositionZone1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnZoneIdChanging(int value);
    partial void OnZoneIdChanged();
    partial void OnMapChanging(string value);
    partial void OnMapChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnTeamChanging(short value);
    partial void OnTeamChanged();
    partial void OnVideoUrlChanging(string value);
    partial void OnVideoUrlChanged();
    partial void OnZMinChanging(System.Nullable<double> value);
    partial void OnZMinChanged();
    partial void OnZMaxChanging(System.Nullable<double> value);
    partial void OnZMaxChanged();
    partial void OnCenterXIngameChanging(double value);
    partial void OnCenterXIngameChanged();
    partial void OnCenterYIngameChanging(double value);
    partial void OnCenterYIngameChanged();
    partial void OnCenterXPixelChanging(int value);
    partial void OnCenterXPixelChanged();
    partial void OnCenterYPixelChanging(int value);
    partial void OnCenterYPixelChanged();
    partial void OnParentZoneIdChanging(System.Nullable<int> value);
    partial void OnParentZoneIdChanged();
    #endregion
		
		public _PositionZone()
		{
			this.@__PositionPolygonPoint = new EntitySet<_PositionPolygonPoint>(new Action<_PositionPolygonPoint>(this.attach__PositionPolygonPoint), new Action<_PositionPolygonPoint>(this.detach__PositionPolygonPoint));
			this.@__PositionZone2 = new EntitySet<_PositionZone>(new Action<_PositionZone>(this.attach__PositionZone2), new Action<_PositionZone>(this.detach__PositionZone2));
			this.@__PositionZone1 = default(EntityRef<_PositionZone>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ZoneId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ZoneId
		{
			get
			{
				return this._ZoneId;
			}
			set
			{
				if ((this._ZoneId != value))
				{
					this.OnZoneIdChanging(value);
					this.SendPropertyChanging();
					this._ZoneId = value;
					this.SendPropertyChanged("ZoneId");
					this.OnZoneIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Map", DbType="NVarChar(MAX)")]
		public string Map
		{
			get
			{
				return this._Map;
			}
			set
			{
				if ((this._Map != value))
				{
					this.OnMapChanging(value);
					this.SendPropertyChanging();
					this._Map = value;
					this.SendPropertyChanged("Map");
					this.OnMapChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(MAX)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Team", DbType="SmallInt NOT NULL")]
		public short Team
		{
			get
			{
				return this._Team;
			}
			set
			{
				if ((this._Team != value))
				{
					this.OnTeamChanging(value);
					this.SendPropertyChanging();
					this._Team = value;
					this.SendPropertyChanged("Team");
					this.OnTeamChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VideoUrl", DbType="NVarChar(MAX)")]
		public string VideoUrl
		{
			get
			{
				return this._VideoUrl;
			}
			set
			{
				if ((this._VideoUrl != value))
				{
					this.OnVideoUrlChanging(value);
					this.SendPropertyChanging();
					this._VideoUrl = value;
					this.SendPropertyChanged("VideoUrl");
					this.OnVideoUrlChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ZMin", DbType="Float")]
		public System.Nullable<double> ZMin
		{
			get
			{
				return this._ZMin;
			}
			set
			{
				if ((this._ZMin != value))
				{
					this.OnZMinChanging(value);
					this.SendPropertyChanging();
					this._ZMin = value;
					this.SendPropertyChanged("ZMin");
					this.OnZMinChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ZMax", DbType="Float")]
		public System.Nullable<double> ZMax
		{
			get
			{
				return this._ZMax;
			}
			set
			{
				if ((this._ZMax != value))
				{
					this.OnZMaxChanging(value);
					this.SendPropertyChanging();
					this._ZMax = value;
					this.SendPropertyChanged("ZMax");
					this.OnZMaxChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CenterXIngame", DbType="Float NOT NULL")]
		public double CenterXIngame
		{
			get
			{
				return this._CenterXIngame;
			}
			set
			{
				if ((this._CenterXIngame != value))
				{
					this.OnCenterXIngameChanging(value);
					this.SendPropertyChanging();
					this._CenterXIngame = value;
					this.SendPropertyChanged("CenterXIngame");
					this.OnCenterXIngameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CenterYIngame", DbType="Float NOT NULL")]
		public double CenterYIngame
		{
			get
			{
				return this._CenterYIngame;
			}
			set
			{
				if ((this._CenterYIngame != value))
				{
					this.OnCenterYIngameChanging(value);
					this.SendPropertyChanging();
					this._CenterYIngame = value;
					this.SendPropertyChanged("CenterYIngame");
					this.OnCenterYIngameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CenterXPixel", DbType="Int NOT NULL")]
		public int CenterXPixel
		{
			get
			{
				return this._CenterXPixel;
			}
			set
			{
				if ((this._CenterXPixel != value))
				{
					this.OnCenterXPixelChanging(value);
					this.SendPropertyChanging();
					this._CenterXPixel = value;
					this.SendPropertyChanged("CenterXPixel");
					this.OnCenterXPixelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CenterYPixel", DbType="Int NOT NULL")]
		public int CenterYPixel
		{
			get
			{
				return this._CenterYPixel;
			}
			set
			{
				if ((this._CenterYPixel != value))
				{
					this.OnCenterYPixelChanging(value);
					this.SendPropertyChanging();
					this._CenterYPixel = value;
					this.SendPropertyChanged("CenterYPixel");
					this.OnCenterYPixelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ParentZoneId", DbType="Int")]
		public System.Nullable<int> ParentZoneId
		{
			get
			{
				return this._ParentZoneId;
			}
			set
			{
				if ((this._ParentZoneId != value))
				{
					if (this.@__PositionZone1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnParentZoneIdChanging(value);
					this.SendPropertyChanging();
					this._ParentZoneId = value;
					this.SendPropertyChanged("ParentZoneId");
					this.OnParentZoneIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="_PositionZone__PositionPolygonPoint", Storage="__PositionPolygonPoint", ThisKey="ZoneId", OtherKey="ZoneId")]
		public EntitySet<_PositionPolygonPoint> _PositionPolygonPoint
		{
			get
			{
				return this.@__PositionPolygonPoint;
			}
			set
			{
				this.@__PositionPolygonPoint.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="_PositionZone__PositionZone", Storage="__PositionZone2", ThisKey="ZoneId", OtherKey="ParentZoneId")]
		public EntitySet<_PositionZone> _PositionZone2
		{
			get
			{
				return this.@__PositionZone2;
			}
			set
			{
				this.@__PositionZone2.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="_PositionZone__PositionZone", Storage="__PositionZone1", ThisKey="ParentZoneId", OtherKey="ZoneId", IsForeignKey=true)]
		public _PositionZone _PositionZone1
		{
			get
			{
				return this.@__PositionZone1.Entity;
			}
			set
			{
				_PositionZone previousValue = this.@__PositionZone1.Entity;
				if (((previousValue != value) 
							|| (this.@__PositionZone1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this.@__PositionZone1.Entity = null;
						previousValue._PositionZone2.Remove(this);
					}
					this.@__PositionZone1.Entity = value;
					if ((value != null))
					{
						value._PositionZone2.Add(this);
						this._ParentZoneId = value.ZoneId;
					}
					else
					{
						this._ParentZoneId = default(Nullable<int>);
					}
					this.SendPropertyChanged("_PositionZone1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach__PositionPolygonPoint(_PositionPolygonPoint entity)
		{
			this.SendPropertyChanging();
			entity._PositionZone = this;
		}
		
		private void detach__PositionPolygonPoint(_PositionPolygonPoint entity)
		{
			this.SendPropertyChanging();
			entity._PositionZone = null;
		}
		
		private void attach__PositionZone2(_PositionZone entity)
		{
			this.SendPropertyChanging();
			entity._PositionZone1 = this;
		}
		
		private void detach__PositionZone2(_PositionZone entity)
		{
			this.SendPropertyChanging();
			entity._PositionZone1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[_Refrag]")]
	public partial class _Refrag : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _MatchId;
		
		private long _KillId;
		
		private long _RefraggedKillId;
		
		private EntityRef<Kills> _Kills;
		
		private EntityRef<Kills> _Kills1;
		
		private EntityRef<MatchStats> _MatchStats;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMatchIdChanging(long value);
    partial void OnMatchIdChanged();
    partial void OnKillIdChanging(long value);
    partial void OnKillIdChanged();
    partial void OnRefraggedKillIdChanging(long value);
    partial void OnRefraggedKillIdChanged();
    #endregion
		
		public _Refrag()
		{
			this._Kills = default(EntityRef<Kills>);
			this._Kills1 = default(EntityRef<Kills>);
			this._MatchStats = default(EntityRef<MatchStats>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MatchId", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long MatchId
		{
			get
			{
				return this._MatchId;
			}
			set
			{
				if ((this._MatchId != value))
				{
					if (((this._Kills.HasLoadedOrAssignedValue || this._Kills1.HasLoadedOrAssignedValue) 
								|| this._MatchStats.HasLoadedOrAssignedValue))
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMatchIdChanging(value);
					this.SendPropertyChanging();
					this._MatchId = value;
					this.SendPropertyChanged("MatchId");
					this.OnMatchIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_KillId", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long KillId
		{
			get
			{
				return this._KillId;
			}
			set
			{
				if ((this._KillId != value))
				{
					if (this._Kills.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnKillIdChanging(value);
					this.SendPropertyChanging();
					this._KillId = value;
					this.SendPropertyChanged("KillId");
					this.OnKillIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RefraggedKillId", DbType="BigInt NOT NULL")]
		public long RefraggedKillId
		{
			get
			{
				return this._RefraggedKillId;
			}
			set
			{
				if ((this._RefraggedKillId != value))
				{
					if (this._Kills1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRefraggedKillIdChanging(value);
					this.SendPropertyChanging();
					this._RefraggedKillId = value;
					this.SendPropertyChanged("RefraggedKillId");
					this.OnRefraggedKillIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Kills__Refrag", Storage="_Kills", ThisKey="MatchId,KillId", OtherKey="MatchId,KillId", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Kills Kills
		{
			get
			{
				return this._Kills.Entity;
			}
			set
			{
				Kills previousValue = this._Kills.Entity;
				if (((previousValue != value) 
							|| (this._Kills.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Kills.Entity = null;
						previousValue._Refrag = null;
					}
					this._Kills.Entity = value;
					if ((value != null))
					{
						value._Refrag = this;
						this._MatchId = value.MatchId;
						this._KillId = value.KillId;
					}
					else
					{
						this._MatchId = default(long);
						this._KillId = default(long);
					}
					this.SendPropertyChanged("Kills");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Kills__Refrag1", Storage="_Kills1", ThisKey="MatchId,RefraggedKillId", OtherKey="MatchId,KillId", IsForeignKey=true)]
		public Kills Kills1
		{
			get
			{
				return this._Kills1.Entity;
			}
			set
			{
				Kills previousValue = this._Kills1.Entity;
				if (((previousValue != value) 
							|| (this._Kills1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Kills1.Entity = null;
						previousValue._Refrag1.Remove(this);
					}
					this._Kills1.Entity = value;
					if ((value != null))
					{
						value._Refrag1.Add(this);
						this._MatchId = value.MatchId;
						this._RefraggedKillId = value.KillId;
					}
					else
					{
						this._MatchId = default(long);
						this._RefraggedKillId = default(long);
					}
					this.SendPropertyChanged("Kills1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MatchStats__Refrag", Storage="_MatchStats", ThisKey="MatchId", OtherKey="MatchId", IsForeignKey=true)]
		public MatchStats MatchStats
		{
			get
			{
				return this._MatchStats.Entity;
			}
			set
			{
				MatchStats previousValue = this._MatchStats.Entity;
				if (((previousValue != value) 
							|| (this._MatchStats.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MatchStats.Entity = null;
						previousValue._Refrag.Remove(this);
					}
					this._MatchStats.Entity = value;
					if ((value != null))
					{
						value._Refrag.Add(this);
						this._MatchId = value.MatchId;
					}
					else
					{
						this._MatchId = default(long);
					}
					this.SendPropertyChanged("MatchStats");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[_SinglePath]")]
	public partial class _SinglePath : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _PathId;
		
		private string _Map;
		
		private string _Name;
		
		private System.Nullable<long> _SuperOrdinateId;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPathIdChanging(long value);
    partial void OnPathIdChanged();
    partial void OnMapChanging(string value);
    partial void OnMapChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnSuperOrdinateIdChanging(System.Nullable<long> value);
    partial void OnSuperOrdinateIdChanged();
    #endregion
		
		public _SinglePath()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PathId", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long PathId
		{
			get
			{
				return this._PathId;
			}
			set
			{
				if ((this._PathId != value))
				{
					this.OnPathIdChanging(value);
					this.SendPropertyChanging();
					this._PathId = value;
					this.SendPropertyChanged("PathId");
					this.OnPathIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Map", DbType="NVarChar(MAX)")]
		public string Map
		{
			get
			{
				return this._Map;
			}
			set
			{
				if ((this._Map != value))
				{
					this.OnMapChanging(value);
					this.SendPropertyChanging();
					this._Map = value;
					this.SendPropertyChanged("Map");
					this.OnMapChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(MAX)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SuperOrdinateId", DbType="BigInt")]
		public System.Nullable<long> SuperOrdinateId
		{
			get
			{
				return this._SuperOrdinateId;
			}
			set
			{
				if ((this._SuperOrdinateId != value))
				{
					this.OnSuperOrdinateIdChanging(value);
					this.SendPropertyChanging();
					this._SuperOrdinateId = value;
					this.SendPropertyChanged("SuperOrdinateId");
					this.OnSuperOrdinateIdChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[_SmokeCategory]")]
	public partial class _SmokeCategory : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CategoryId;
		
		private string _Map;
		
		private string _Name;
		
		private int _TargetId;
		
		private byte _ThrowType;
		
		private string _Setpos;
		
		private int _PlayerPosXPixel;
		
		private int _PlayerPosYPixel;
		
		private int _PlayerPosX;
		
		private int _PlayerPosY;
		
		private int _PlayerPosZ;
		
		private int _PlayerViewX;
		
		private int _PlayerViewY;
		
		private int _GrenadePosX;
		
		private int _GrenadePosY;
		
		private int _GrenadePosZ;
		
		private int _PlayerPosXMin;
		
		private int _PlayerPosYMin;
		
		private int _PlayerPosZMin;
		
		private int _PlayerViewXMin;
		
		private int _PlayerViewYMin;
		
		private int _PlayerPosXMax;
		
		private int _PlayerPosYMax;
		
		private int _PlayerPosZMax;
		
		private int _PlayerViewXMax;
		
		private int _PlayerViewYMax;
		
		private bool _ViewXContainsPole;
		
		private EntityRef<_SmokeTarget> @__SmokeTarget;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCategoryIdChanging(int value);
    partial void OnCategoryIdChanged();
    partial void OnMapChanging(string value);
    partial void OnMapChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnTargetIdChanging(int value);
    partial void OnTargetIdChanged();
    partial void OnThrowTypeChanging(byte value);
    partial void OnThrowTypeChanged();
    partial void OnSetposChanging(string value);
    partial void OnSetposChanged();
    partial void OnPlayerPosXPixelChanging(int value);
    partial void OnPlayerPosXPixelChanged();
    partial void OnPlayerPosYPixelChanging(int value);
    partial void OnPlayerPosYPixelChanged();
    partial void OnPlayerPosXChanging(int value);
    partial void OnPlayerPosXChanged();
    partial void OnPlayerPosYChanging(int value);
    partial void OnPlayerPosYChanged();
    partial void OnPlayerPosZChanging(int value);
    partial void OnPlayerPosZChanged();
    partial void OnPlayerViewXChanging(int value);
    partial void OnPlayerViewXChanged();
    partial void OnPlayerViewYChanging(int value);
    partial void OnPlayerViewYChanged();
    partial void OnGrenadePosXChanging(int value);
    partial void OnGrenadePosXChanged();
    partial void OnGrenadePosYChanging(int value);
    partial void OnGrenadePosYChanged();
    partial void OnGrenadePosZChanging(int value);
    partial void OnGrenadePosZChanged();
    partial void OnPlayerPosXMinChanging(int value);
    partial void OnPlayerPosXMinChanged();
    partial void OnPlayerPosYMinChanging(int value);
    partial void OnPlayerPosYMinChanged();
    partial void OnPlayerPosZMinChanging(int value);
    partial void OnPlayerPosZMinChanged();
    partial void OnPlayerViewXMinChanging(int value);
    partial void OnPlayerViewXMinChanged();
    partial void OnPlayerViewYMinChanging(int value);
    partial void OnPlayerViewYMinChanged();
    partial void OnPlayerPosXMaxChanging(int value);
    partial void OnPlayerPosXMaxChanged();
    partial void OnPlayerPosYMaxChanging(int value);
    partial void OnPlayerPosYMaxChanged();
    partial void OnPlayerPosZMaxChanging(int value);
    partial void OnPlayerPosZMaxChanged();
    partial void OnPlayerViewXMaxChanging(int value);
    partial void OnPlayerViewXMaxChanged();
    partial void OnPlayerViewYMaxChanging(int value);
    partial void OnPlayerViewYMaxChanged();
    partial void OnViewXContainsPoleChanging(bool value);
    partial void OnViewXContainsPoleChanged();
    #endregion
		
		public _SmokeCategory()
		{
			this.@__SmokeTarget = default(EntityRef<_SmokeTarget>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CategoryId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int CategoryId
		{
			get
			{
				return this._CategoryId;
			}
			set
			{
				if ((this._CategoryId != value))
				{
					this.OnCategoryIdChanging(value);
					this.SendPropertyChanging();
					this._CategoryId = value;
					this.SendPropertyChanged("CategoryId");
					this.OnCategoryIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Map", DbType="NVarChar(MAX)")]
		public string Map
		{
			get
			{
				return this._Map;
			}
			set
			{
				if ((this._Map != value))
				{
					this.OnMapChanging(value);
					this.SendPropertyChanging();
					this._Map = value;
					this.SendPropertyChanged("Map");
					this.OnMapChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(MAX)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TargetId", DbType="Int NOT NULL")]
		public int TargetId
		{
			get
			{
				return this._TargetId;
			}
			set
			{
				if ((this._TargetId != value))
				{
					if (this.@__SmokeTarget.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTargetIdChanging(value);
					this.SendPropertyChanging();
					this._TargetId = value;
					this.SendPropertyChanged("TargetId");
					this.OnTargetIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ThrowType", DbType="TinyInt NOT NULL")]
		public byte ThrowType
		{
			get
			{
				return this._ThrowType;
			}
			set
			{
				if ((this._ThrowType != value))
				{
					this.OnThrowTypeChanging(value);
					this.SendPropertyChanging();
					this._ThrowType = value;
					this.SendPropertyChanged("ThrowType");
					this.OnThrowTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Setpos", DbType="NVarChar(MAX)")]
		public string Setpos
		{
			get
			{
				return this._Setpos;
			}
			set
			{
				if ((this._Setpos != value))
				{
					this.OnSetposChanging(value);
					this.SendPropertyChanging();
					this._Setpos = value;
					this.SendPropertyChanged("Setpos");
					this.OnSetposChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlayerPosXPixel", DbType="Int NOT NULL")]
		public int PlayerPosXPixel
		{
			get
			{
				return this._PlayerPosXPixel;
			}
			set
			{
				if ((this._PlayerPosXPixel != value))
				{
					this.OnPlayerPosXPixelChanging(value);
					this.SendPropertyChanging();
					this._PlayerPosXPixel = value;
					this.SendPropertyChanged("PlayerPosXPixel");
					this.OnPlayerPosXPixelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlayerPosYPixel", DbType="Int NOT NULL")]
		public int PlayerPosYPixel
		{
			get
			{
				return this._PlayerPosYPixel;
			}
			set
			{
				if ((this._PlayerPosYPixel != value))
				{
					this.OnPlayerPosYPixelChanging(value);
					this.SendPropertyChanging();
					this._PlayerPosYPixel = value;
					this.SendPropertyChanged("PlayerPosYPixel");
					this.OnPlayerPosYPixelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlayerPosX", DbType="Int NOT NULL")]
		public int PlayerPosX
		{
			get
			{
				return this._PlayerPosX;
			}
			set
			{
				if ((this._PlayerPosX != value))
				{
					this.OnPlayerPosXChanging(value);
					this.SendPropertyChanging();
					this._PlayerPosX = value;
					this.SendPropertyChanged("PlayerPosX");
					this.OnPlayerPosXChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlayerPosY", DbType="Int NOT NULL")]
		public int PlayerPosY
		{
			get
			{
				return this._PlayerPosY;
			}
			set
			{
				if ((this._PlayerPosY != value))
				{
					this.OnPlayerPosYChanging(value);
					this.SendPropertyChanging();
					this._PlayerPosY = value;
					this.SendPropertyChanged("PlayerPosY");
					this.OnPlayerPosYChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlayerPosZ", DbType="Int NOT NULL")]
		public int PlayerPosZ
		{
			get
			{
				return this._PlayerPosZ;
			}
			set
			{
				if ((this._PlayerPosZ != value))
				{
					this.OnPlayerPosZChanging(value);
					this.SendPropertyChanging();
					this._PlayerPosZ = value;
					this.SendPropertyChanged("PlayerPosZ");
					this.OnPlayerPosZChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlayerViewX", DbType="Int NOT NULL")]
		public int PlayerViewX
		{
			get
			{
				return this._PlayerViewX;
			}
			set
			{
				if ((this._PlayerViewX != value))
				{
					this.OnPlayerViewXChanging(value);
					this.SendPropertyChanging();
					this._PlayerViewX = value;
					this.SendPropertyChanged("PlayerViewX");
					this.OnPlayerViewXChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlayerViewY", DbType="Int NOT NULL")]
		public int PlayerViewY
		{
			get
			{
				return this._PlayerViewY;
			}
			set
			{
				if ((this._PlayerViewY != value))
				{
					this.OnPlayerViewYChanging(value);
					this.SendPropertyChanging();
					this._PlayerViewY = value;
					this.SendPropertyChanged("PlayerViewY");
					this.OnPlayerViewYChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GrenadePosX", DbType="Int NOT NULL")]
		public int GrenadePosX
		{
			get
			{
				return this._GrenadePosX;
			}
			set
			{
				if ((this._GrenadePosX != value))
				{
					this.OnGrenadePosXChanging(value);
					this.SendPropertyChanging();
					this._GrenadePosX = value;
					this.SendPropertyChanged("GrenadePosX");
					this.OnGrenadePosXChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GrenadePosY", DbType="Int NOT NULL")]
		public int GrenadePosY
		{
			get
			{
				return this._GrenadePosY;
			}
			set
			{
				if ((this._GrenadePosY != value))
				{
					this.OnGrenadePosYChanging(value);
					this.SendPropertyChanging();
					this._GrenadePosY = value;
					this.SendPropertyChanged("GrenadePosY");
					this.OnGrenadePosYChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GrenadePosZ", DbType="Int NOT NULL")]
		public int GrenadePosZ
		{
			get
			{
				return this._GrenadePosZ;
			}
			set
			{
				if ((this._GrenadePosZ != value))
				{
					this.OnGrenadePosZChanging(value);
					this.SendPropertyChanging();
					this._GrenadePosZ = value;
					this.SendPropertyChanged("GrenadePosZ");
					this.OnGrenadePosZChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlayerPosXMin", DbType="Int NOT NULL")]
		public int PlayerPosXMin
		{
			get
			{
				return this._PlayerPosXMin;
			}
			set
			{
				if ((this._PlayerPosXMin != value))
				{
					this.OnPlayerPosXMinChanging(value);
					this.SendPropertyChanging();
					this._PlayerPosXMin = value;
					this.SendPropertyChanged("PlayerPosXMin");
					this.OnPlayerPosXMinChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlayerPosYMin", DbType="Int NOT NULL")]
		public int PlayerPosYMin
		{
			get
			{
				return this._PlayerPosYMin;
			}
			set
			{
				if ((this._PlayerPosYMin != value))
				{
					this.OnPlayerPosYMinChanging(value);
					this.SendPropertyChanging();
					this._PlayerPosYMin = value;
					this.SendPropertyChanged("PlayerPosYMin");
					this.OnPlayerPosYMinChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlayerPosZMin", DbType="Int NOT NULL")]
		public int PlayerPosZMin
		{
			get
			{
				return this._PlayerPosZMin;
			}
			set
			{
				if ((this._PlayerPosZMin != value))
				{
					this.OnPlayerPosZMinChanging(value);
					this.SendPropertyChanging();
					this._PlayerPosZMin = value;
					this.SendPropertyChanged("PlayerPosZMin");
					this.OnPlayerPosZMinChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlayerViewXMin", DbType="Int NOT NULL")]
		public int PlayerViewXMin
		{
			get
			{
				return this._PlayerViewXMin;
			}
			set
			{
				if ((this._PlayerViewXMin != value))
				{
					this.OnPlayerViewXMinChanging(value);
					this.SendPropertyChanging();
					this._PlayerViewXMin = value;
					this.SendPropertyChanged("PlayerViewXMin");
					this.OnPlayerViewXMinChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlayerViewYMin", DbType="Int NOT NULL")]
		public int PlayerViewYMin
		{
			get
			{
				return this._PlayerViewYMin;
			}
			set
			{
				if ((this._PlayerViewYMin != value))
				{
					this.OnPlayerViewYMinChanging(value);
					this.SendPropertyChanging();
					this._PlayerViewYMin = value;
					this.SendPropertyChanged("PlayerViewYMin");
					this.OnPlayerViewYMinChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlayerPosXMax", DbType="Int NOT NULL")]
		public int PlayerPosXMax
		{
			get
			{
				return this._PlayerPosXMax;
			}
			set
			{
				if ((this._PlayerPosXMax != value))
				{
					this.OnPlayerPosXMaxChanging(value);
					this.SendPropertyChanging();
					this._PlayerPosXMax = value;
					this.SendPropertyChanged("PlayerPosXMax");
					this.OnPlayerPosXMaxChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlayerPosYMax", DbType="Int NOT NULL")]
		public int PlayerPosYMax
		{
			get
			{
				return this._PlayerPosYMax;
			}
			set
			{
				if ((this._PlayerPosYMax != value))
				{
					this.OnPlayerPosYMaxChanging(value);
					this.SendPropertyChanging();
					this._PlayerPosYMax = value;
					this.SendPropertyChanged("PlayerPosYMax");
					this.OnPlayerPosYMaxChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlayerPosZMax", DbType="Int NOT NULL")]
		public int PlayerPosZMax
		{
			get
			{
				return this._PlayerPosZMax;
			}
			set
			{
				if ((this._PlayerPosZMax != value))
				{
					this.OnPlayerPosZMaxChanging(value);
					this.SendPropertyChanging();
					this._PlayerPosZMax = value;
					this.SendPropertyChanged("PlayerPosZMax");
					this.OnPlayerPosZMaxChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlayerViewXMax", DbType="Int NOT NULL")]
		public int PlayerViewXMax
		{
			get
			{
				return this._PlayerViewXMax;
			}
			set
			{
				if ((this._PlayerViewXMax != value))
				{
					this.OnPlayerViewXMaxChanging(value);
					this.SendPropertyChanging();
					this._PlayerViewXMax = value;
					this.SendPropertyChanged("PlayerViewXMax");
					this.OnPlayerViewXMaxChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlayerViewYMax", DbType="Int NOT NULL")]
		public int PlayerViewYMax
		{
			get
			{
				return this._PlayerViewYMax;
			}
			set
			{
				if ((this._PlayerViewYMax != value))
				{
					this.OnPlayerViewYMaxChanging(value);
					this.SendPropertyChanging();
					this._PlayerViewYMax = value;
					this.SendPropertyChanged("PlayerViewYMax");
					this.OnPlayerViewYMaxChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ViewXContainsPole", DbType="Bit NOT NULL")]
		public bool ViewXContainsPole
		{
			get
			{
				return this._ViewXContainsPole;
			}
			set
			{
				if ((this._ViewXContainsPole != value))
				{
					this.OnViewXContainsPoleChanging(value);
					this.SendPropertyChanging();
					this._ViewXContainsPole = value;
					this.SendPropertyChanged("ViewXContainsPole");
					this.OnViewXContainsPoleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="_SmokeTarget__SmokeCategory", Storage="__SmokeTarget", ThisKey="TargetId", OtherKey="TargetId", IsForeignKey=true)]
		public _SmokeTarget _SmokeTarget
		{
			get
			{
				return this.@__SmokeTarget.Entity;
			}
			set
			{
				_SmokeTarget previousValue = this.@__SmokeTarget.Entity;
				if (((previousValue != value) 
							|| (this.@__SmokeTarget.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this.@__SmokeTarget.Entity = null;
						previousValue._SmokeCategory.Remove(this);
					}
					this.@__SmokeTarget.Entity = value;
					if ((value != null))
					{
						value._SmokeCategory.Add(this);
						this._TargetId = value.TargetId;
					}
					else
					{
						this._TargetId = default(int);
					}
					this.SendPropertyChanged("_SmokeTarget");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[_SmokeTarget]")]
	public partial class _SmokeTarget : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TargetId;
		
		private string _Map;
		
		private string _Name;
		
		private int _GrenadePosXPixel;
		
		private int _GrenadePosYPixel;
		
		private int _GrenadePosX;
		
		private int _GrenadePosY;
		
		private int _GrenadePosZ;
		
		private int _GrenadePosXMin;
		
		private int _GrenadePosYMin;
		
		private int _GrenadePosZMin;
		
		private int _GrenadePosXMax;
		
		private int _GrenadePosYMax;
		
		private int _GrenadePosZMax;
		
		private EntitySet<_SmokeCategory> @__SmokeCategory;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTargetIdChanging(int value);
    partial void OnTargetIdChanged();
    partial void OnMapChanging(string value);
    partial void OnMapChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnGrenadePosXPixelChanging(int value);
    partial void OnGrenadePosXPixelChanged();
    partial void OnGrenadePosYPixelChanging(int value);
    partial void OnGrenadePosYPixelChanged();
    partial void OnGrenadePosXChanging(int value);
    partial void OnGrenadePosXChanged();
    partial void OnGrenadePosYChanging(int value);
    partial void OnGrenadePosYChanged();
    partial void OnGrenadePosZChanging(int value);
    partial void OnGrenadePosZChanged();
    partial void OnGrenadePosXMinChanging(int value);
    partial void OnGrenadePosXMinChanged();
    partial void OnGrenadePosYMinChanging(int value);
    partial void OnGrenadePosYMinChanged();
    partial void OnGrenadePosZMinChanging(int value);
    partial void OnGrenadePosZMinChanged();
    partial void OnGrenadePosXMaxChanging(int value);
    partial void OnGrenadePosXMaxChanged();
    partial void OnGrenadePosYMaxChanging(int value);
    partial void OnGrenadePosYMaxChanged();
    partial void OnGrenadePosZMaxChanging(int value);
    partial void OnGrenadePosZMaxChanged();
    #endregion
		
		public _SmokeTarget()
		{
			this.@__SmokeCategory = new EntitySet<_SmokeCategory>(new Action<_SmokeCategory>(this.attach__SmokeCategory), new Action<_SmokeCategory>(this.detach__SmokeCategory));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TargetId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int TargetId
		{
			get
			{
				return this._TargetId;
			}
			set
			{
				if ((this._TargetId != value))
				{
					this.OnTargetIdChanging(value);
					this.SendPropertyChanging();
					this._TargetId = value;
					this.SendPropertyChanged("TargetId");
					this.OnTargetIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Map", DbType="NVarChar(MAX)")]
		public string Map
		{
			get
			{
				return this._Map;
			}
			set
			{
				if ((this._Map != value))
				{
					this.OnMapChanging(value);
					this.SendPropertyChanging();
					this._Map = value;
					this.SendPropertyChanged("Map");
					this.OnMapChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(MAX)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GrenadePosXPixel", DbType="Int NOT NULL")]
		public int GrenadePosXPixel
		{
			get
			{
				return this._GrenadePosXPixel;
			}
			set
			{
				if ((this._GrenadePosXPixel != value))
				{
					this.OnGrenadePosXPixelChanging(value);
					this.SendPropertyChanging();
					this._GrenadePosXPixel = value;
					this.SendPropertyChanged("GrenadePosXPixel");
					this.OnGrenadePosXPixelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GrenadePosYPixel", DbType="Int NOT NULL")]
		public int GrenadePosYPixel
		{
			get
			{
				return this._GrenadePosYPixel;
			}
			set
			{
				if ((this._GrenadePosYPixel != value))
				{
					this.OnGrenadePosYPixelChanging(value);
					this.SendPropertyChanging();
					this._GrenadePosYPixel = value;
					this.SendPropertyChanged("GrenadePosYPixel");
					this.OnGrenadePosYPixelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GrenadePosX", DbType="Int NOT NULL")]
		public int GrenadePosX
		{
			get
			{
				return this._GrenadePosX;
			}
			set
			{
				if ((this._GrenadePosX != value))
				{
					this.OnGrenadePosXChanging(value);
					this.SendPropertyChanging();
					this._GrenadePosX = value;
					this.SendPropertyChanged("GrenadePosX");
					this.OnGrenadePosXChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GrenadePosY", DbType="Int NOT NULL")]
		public int GrenadePosY
		{
			get
			{
				return this._GrenadePosY;
			}
			set
			{
				if ((this._GrenadePosY != value))
				{
					this.OnGrenadePosYChanging(value);
					this.SendPropertyChanging();
					this._GrenadePosY = value;
					this.SendPropertyChanged("GrenadePosY");
					this.OnGrenadePosYChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GrenadePosZ", DbType="Int NOT NULL")]
		public int GrenadePosZ
		{
			get
			{
				return this._GrenadePosZ;
			}
			set
			{
				if ((this._GrenadePosZ != value))
				{
					this.OnGrenadePosZChanging(value);
					this.SendPropertyChanging();
					this._GrenadePosZ = value;
					this.SendPropertyChanged("GrenadePosZ");
					this.OnGrenadePosZChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GrenadePosXMin", DbType="Int NOT NULL")]
		public int GrenadePosXMin
		{
			get
			{
				return this._GrenadePosXMin;
			}
			set
			{
				if ((this._GrenadePosXMin != value))
				{
					this.OnGrenadePosXMinChanging(value);
					this.SendPropertyChanging();
					this._GrenadePosXMin = value;
					this.SendPropertyChanged("GrenadePosXMin");
					this.OnGrenadePosXMinChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GrenadePosYMin", DbType="Int NOT NULL")]
		public int GrenadePosYMin
		{
			get
			{
				return this._GrenadePosYMin;
			}
			set
			{
				if ((this._GrenadePosYMin != value))
				{
					this.OnGrenadePosYMinChanging(value);
					this.SendPropertyChanging();
					this._GrenadePosYMin = value;
					this.SendPropertyChanged("GrenadePosYMin");
					this.OnGrenadePosYMinChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GrenadePosZMin", DbType="Int NOT NULL")]
		public int GrenadePosZMin
		{
			get
			{
				return this._GrenadePosZMin;
			}
			set
			{
				if ((this._GrenadePosZMin != value))
				{
					this.OnGrenadePosZMinChanging(value);
					this.SendPropertyChanging();
					this._GrenadePosZMin = value;
					this.SendPropertyChanged("GrenadePosZMin");
					this.OnGrenadePosZMinChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GrenadePosXMax", DbType="Int NOT NULL")]
		public int GrenadePosXMax
		{
			get
			{
				return this._GrenadePosXMax;
			}
			set
			{
				if ((this._GrenadePosXMax != value))
				{
					this.OnGrenadePosXMaxChanging(value);
					this.SendPropertyChanging();
					this._GrenadePosXMax = value;
					this.SendPropertyChanged("GrenadePosXMax");
					this.OnGrenadePosXMaxChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GrenadePosYMax", DbType="Int NOT NULL")]
		public int GrenadePosYMax
		{
			get
			{
				return this._GrenadePosYMax;
			}
			set
			{
				if ((this._GrenadePosYMax != value))
				{
					this.OnGrenadePosYMaxChanging(value);
					this.SendPropertyChanging();
					this._GrenadePosYMax = value;
					this.SendPropertyChanged("GrenadePosYMax");
					this.OnGrenadePosYMaxChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GrenadePosZMax", DbType="Int NOT NULL")]
		public int GrenadePosZMax
		{
			get
			{
				return this._GrenadePosZMax;
			}
			set
			{
				if ((this._GrenadePosZMax != value))
				{
					this.OnGrenadePosZMaxChanging(value);
					this.SendPropertyChanging();
					this._GrenadePosZMax = value;
					this.SendPropertyChanged("GrenadePosZMax");
					this.OnGrenadePosZMaxChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="_SmokeTarget__SmokeCategory", Storage="__SmokeCategory", ThisKey="TargetId", OtherKey="TargetId")]
		public EntitySet<_SmokeCategory> _SmokeCategory
		{
			get
			{
				return this.@__SmokeCategory;
			}
			set
			{
				this.@__SmokeCategory.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach__SmokeCategory(_SmokeCategory entity)
		{
			this.SendPropertyChanging();
			entity._SmokeTarget = this;
		}
		
		private void detach__SmokeCategory(_SmokeCategory entity)
		{
			this.SendPropertyChanging();
			entity._SmokeTarget = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[_StutterStep]")]
	public partial class _StutterStep : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _MatchId;
		
		private long _StutterStepId;
		
		private long _PlayerId;
		
		private short _Round;
		
		private long _WeaponFiredId;
		
		private int _StutterStartTime;
		
		private int _Under34Time;
		
		private short _Lag;
		
		private EntityRef<MatchStats> _MatchStats;
		
		private EntityRef<PlayerMatchStats> _PlayerMatchStats;
		
		private EntityRef<RoundStats> _RoundStats;
		
		private EntityRef<WeaponFired> _WeaponFired;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMatchIdChanging(long value);
    partial void OnMatchIdChanged();
    partial void OnStutterStepIdChanging(long value);
    partial void OnStutterStepIdChanged();
    partial void OnPlayerIdChanging(long value);
    partial void OnPlayerIdChanged();
    partial void OnRoundChanging(short value);
    partial void OnRoundChanged();
    partial void OnWeaponFiredIdChanging(long value);
    partial void OnWeaponFiredIdChanged();
    partial void OnStutterStartTimeChanging(int value);
    partial void OnStutterStartTimeChanged();
    partial void OnUnder34TimeChanging(int value);
    partial void OnUnder34TimeChanged();
    partial void OnLagChanging(short value);
    partial void OnLagChanged();
    #endregion
		
		public _StutterStep()
		{
			this._MatchStats = default(EntityRef<MatchStats>);
			this._PlayerMatchStats = default(EntityRef<PlayerMatchStats>);
			this._RoundStats = default(EntityRef<RoundStats>);
			this._WeaponFired = default(EntityRef<WeaponFired>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MatchId", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long MatchId
		{
			get
			{
				return this._MatchId;
			}
			set
			{
				if ((this._MatchId != value))
				{
					if ((((this._MatchStats.HasLoadedOrAssignedValue || this._PlayerMatchStats.HasLoadedOrAssignedValue) 
								|| this._RoundStats.HasLoadedOrAssignedValue) 
								|| this._WeaponFired.HasLoadedOrAssignedValue))
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMatchIdChanging(value);
					this.SendPropertyChanging();
					this._MatchId = value;
					this.SendPropertyChanged("MatchId");
					this.OnMatchIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StutterStepId", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long StutterStepId
		{
			get
			{
				return this._StutterStepId;
			}
			set
			{
				if ((this._StutterStepId != value))
				{
					this.OnStutterStepIdChanging(value);
					this.SendPropertyChanging();
					this._StutterStepId = value;
					this.SendPropertyChanged("StutterStepId");
					this.OnStutterStepIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlayerId", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long PlayerId
		{
			get
			{
				return this._PlayerId;
			}
			set
			{
				if ((this._PlayerId != value))
				{
					if (this._PlayerMatchStats.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPlayerIdChanging(value);
					this.SendPropertyChanging();
					this._PlayerId = value;
					this.SendPropertyChanged("PlayerId");
					this.OnPlayerIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Round", DbType="SmallInt NOT NULL")]
		public short Round
		{
			get
			{
				return this._Round;
			}
			set
			{
				if ((this._Round != value))
				{
					if (this._RoundStats.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRoundChanging(value);
					this.SendPropertyChanging();
					this._Round = value;
					this.SendPropertyChanged("Round");
					this.OnRoundChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WeaponFiredId", DbType="BigInt NOT NULL")]
		public long WeaponFiredId
		{
			get
			{
				return this._WeaponFiredId;
			}
			set
			{
				if ((this._WeaponFiredId != value))
				{
					if (this._WeaponFired.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnWeaponFiredIdChanging(value);
					this.SendPropertyChanging();
					this._WeaponFiredId = value;
					this.SendPropertyChanged("WeaponFiredId");
					this.OnWeaponFiredIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StutterStartTime", DbType="Int NOT NULL")]
		public int StutterStartTime
		{
			get
			{
				return this._StutterStartTime;
			}
			set
			{
				if ((this._StutterStartTime != value))
				{
					this.OnStutterStartTimeChanging(value);
					this.SendPropertyChanging();
					this._StutterStartTime = value;
					this.SendPropertyChanged("StutterStartTime");
					this.OnStutterStartTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Under34Time", DbType="Int NOT NULL")]
		public int Under34Time
		{
			get
			{
				return this._Under34Time;
			}
			set
			{
				if ((this._Under34Time != value))
				{
					this.OnUnder34TimeChanging(value);
					this.SendPropertyChanging();
					this._Under34Time = value;
					this.SendPropertyChanged("Under34Time");
					this.OnUnder34TimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Lag", DbType="SmallInt NOT NULL")]
		public short Lag
		{
			get
			{
				return this._Lag;
			}
			set
			{
				if ((this._Lag != value))
				{
					this.OnLagChanging(value);
					this.SendPropertyChanging();
					this._Lag = value;
					this.SendPropertyChanged("Lag");
					this.OnLagChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MatchStats__StutterStep", Storage="_MatchStats", ThisKey="MatchId", OtherKey="MatchId", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public MatchStats MatchStats
		{
			get
			{
				return this._MatchStats.Entity;
			}
			set
			{
				MatchStats previousValue = this._MatchStats.Entity;
				if (((previousValue != value) 
							|| (this._MatchStats.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MatchStats.Entity = null;
						previousValue._StutterStep.Remove(this);
					}
					this._MatchStats.Entity = value;
					if ((value != null))
					{
						value._StutterStep.Add(this);
						this._MatchId = value.MatchId;
					}
					else
					{
						this._MatchId = default(long);
					}
					this.SendPropertyChanged("MatchStats");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PlayerMatchStats__StutterStep", Storage="_PlayerMatchStats", ThisKey="MatchId,PlayerId", OtherKey="MatchId,SteamId", IsForeignKey=true)]
		public PlayerMatchStats PlayerMatchStats
		{
			get
			{
				return this._PlayerMatchStats.Entity;
			}
			set
			{
				PlayerMatchStats previousValue = this._PlayerMatchStats.Entity;
				if (((previousValue != value) 
							|| (this._PlayerMatchStats.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PlayerMatchStats.Entity = null;
						previousValue._StutterStep.Remove(this);
					}
					this._PlayerMatchStats.Entity = value;
					if ((value != null))
					{
						value._StutterStep.Add(this);
						this._MatchId = value.MatchId;
						this._PlayerId = value.SteamId;
					}
					else
					{
						this._MatchId = default(long);
						this._PlayerId = default(long);
					}
					this.SendPropertyChanged("PlayerMatchStats");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RoundStats__StutterStep", Storage="_RoundStats", ThisKey="MatchId,Round", OtherKey="MatchId,Round", IsForeignKey=true)]
		public RoundStats RoundStats
		{
			get
			{
				return this._RoundStats.Entity;
			}
			set
			{
				RoundStats previousValue = this._RoundStats.Entity;
				if (((previousValue != value) 
							|| (this._RoundStats.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._RoundStats.Entity = null;
						previousValue._StutterStep.Remove(this);
					}
					this._RoundStats.Entity = value;
					if ((value != null))
					{
						value._StutterStep.Add(this);
						this._MatchId = value.MatchId;
						this._Round = value.Round;
					}
					else
					{
						this._MatchId = default(long);
						this._Round = default(short);
					}
					this.SendPropertyChanged("RoundStats");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="WeaponFired__StutterStep", Storage="_WeaponFired", ThisKey="MatchId,WeaponFiredId", OtherKey="MatchId,WeaponFiredId", IsForeignKey=true)]
		public WeaponFired WeaponFired
		{
			get
			{
				return this._WeaponFired.Entity;
			}
			set
			{
				WeaponFired previousValue = this._WeaponFired.Entity;
				if (((previousValue != value) 
							|| (this._WeaponFired.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._WeaponFired.Entity = null;
						previousValue._StutterStep.Remove(this);
					}
					this._WeaponFired.Entity = value;
					if ((value != null))
					{
						value._StutterStep.Add(this);
						this._MatchId = value.MatchId;
						this._WeaponFiredId = value.WeaponFiredId;
					}
					else
					{
						this._MatchId = default(long);
						this._WeaponFiredId = default(long);
					}
					this.SendPropertyChanged("WeaponFired");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[_TeamStrategy]")]
	public partial class _TeamStrategy : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _StrategyId;
		
		private string _Map;
		
		private string _Name;
		
		private System.Nullable<long> _SuperOrdinateId;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnStrategyIdChanging(long value);
    partial void OnStrategyIdChanged();
    partial void OnMapChanging(string value);
    partial void OnMapChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnSuperOrdinateIdChanging(System.Nullable<long> value);
    partial void OnSuperOrdinateIdChanged();
    #endregion
		
		public _TeamStrategy()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StrategyId", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long StrategyId
		{
			get
			{
				return this._StrategyId;
			}
			set
			{
				if ((this._StrategyId != value))
				{
					this.OnStrategyIdChanging(value);
					this.SendPropertyChanging();
					this._StrategyId = value;
					this.SendPropertyChanged("StrategyId");
					this.OnStrategyIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Map", DbType="NVarChar(MAX)")]
		public string Map
		{
			get
			{
				return this._Map;
			}
			set
			{
				if ((this._Map != value))
				{
					this.OnMapChanging(value);
					this.SendPropertyChanging();
					this._Map = value;
					this.SendPropertyChanged("Map");
					this.OnMapChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(MAX)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SuperOrdinateId", DbType="BigInt")]
		public System.Nullable<long> SuperOrdinateId
		{
			get
			{
				return this._SuperOrdinateId;
			}
			set
			{
				if ((this._SuperOrdinateId != value))
				{
					this.OnSuperOrdinateIdChanging(value);
					this.SendPropertyChanging();
					this._SuperOrdinateId = value;
					this.SendPropertyChanged("SuperOrdinateId");
					this.OnSuperOrdinateIdChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.BombDefused")]
	public partial class BombDefused : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _MatchId;
		
		private short _Round;
		
		private int _Time;
		
		private int _Tick;
		
		private long _PlayerId;
		
		private int _BombTimeLeft;
		
		private EntityRef<MatchStats> _MatchStats;
		
		private EntityRef<PlayerMatchStats> _PlayerMatchStats;
		
		private EntityRef<PlayerRoundStats> _PlayerRoundStats;
		
		private EntityRef<RoundStats> _RoundStats;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMatchIdChanging(long value);
    partial void OnMatchIdChanged();
    partial void OnRoundChanging(short value);
    partial void OnRoundChanged();
    partial void OnTimeChanging(int value);
    partial void OnTimeChanged();
    partial void OnTickChanging(int value);
    partial void OnTickChanged();
    partial void OnPlayerIdChanging(long value);
    partial void OnPlayerIdChanged();
    partial void OnBombTimeLeftChanging(int value);
    partial void OnBombTimeLeftChanged();
    #endregion
		
		public BombDefused()
		{
			this._MatchStats = default(EntityRef<MatchStats>);
			this._PlayerMatchStats = default(EntityRef<PlayerMatchStats>);
			this._PlayerRoundStats = default(EntityRef<PlayerRoundStats>);
			this._RoundStats = default(EntityRef<RoundStats>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MatchId", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long MatchId
		{
			get
			{
				return this._MatchId;
			}
			set
			{
				if ((this._MatchId != value))
				{
					if ((((this._MatchStats.HasLoadedOrAssignedValue || this._PlayerMatchStats.HasLoadedOrAssignedValue) 
								|| this._PlayerRoundStats.HasLoadedOrAssignedValue) 
								|| this._RoundStats.HasLoadedOrAssignedValue))
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMatchIdChanging(value);
					this.SendPropertyChanging();
					this._MatchId = value;
					this.SendPropertyChanged("MatchId");
					this.OnMatchIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Round", DbType="SmallInt NOT NULL", IsPrimaryKey=true)]
		public short Round
		{
			get
			{
				return this._Round;
			}
			set
			{
				if ((this._Round != value))
				{
					if ((this._PlayerRoundStats.HasLoadedOrAssignedValue || this._RoundStats.HasLoadedOrAssignedValue))
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRoundChanging(value);
					this.SendPropertyChanging();
					this._Round = value;
					this.SendPropertyChanged("Round");
					this.OnRoundChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Time", DbType="Int NOT NULL")]
		public int Time
		{
			get
			{
				return this._Time;
			}
			set
			{
				if ((this._Time != value))
				{
					this.OnTimeChanging(value);
					this.SendPropertyChanging();
					this._Time = value;
					this.SendPropertyChanged("Time");
					this.OnTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Tick", DbType="Int NOT NULL")]
		public int Tick
		{
			get
			{
				return this._Tick;
			}
			set
			{
				if ((this._Tick != value))
				{
					this.OnTickChanging(value);
					this.SendPropertyChanging();
					this._Tick = value;
					this.SendPropertyChanged("Tick");
					this.OnTickChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlayerId", DbType="BigInt NOT NULL")]
		public long PlayerId
		{
			get
			{
				return this._PlayerId;
			}
			set
			{
				if ((this._PlayerId != value))
				{
					if ((this._PlayerMatchStats.HasLoadedOrAssignedValue || this._PlayerRoundStats.HasLoadedOrAssignedValue))
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPlayerIdChanging(value);
					this.SendPropertyChanging();
					this._PlayerId = value;
					this.SendPropertyChanged("PlayerId");
					this.OnPlayerIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BombTimeLeft", DbType="Int NOT NULL")]
		public int BombTimeLeft
		{
			get
			{
				return this._BombTimeLeft;
			}
			set
			{
				if ((this._BombTimeLeft != value))
				{
					this.OnBombTimeLeftChanging(value);
					this.SendPropertyChanging();
					this._BombTimeLeft = value;
					this.SendPropertyChanged("BombTimeLeft");
					this.OnBombTimeLeftChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MatchStats_BombDefused", Storage="_MatchStats", ThisKey="MatchId", OtherKey="MatchId", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public MatchStats MatchStats
		{
			get
			{
				return this._MatchStats.Entity;
			}
			set
			{
				MatchStats previousValue = this._MatchStats.Entity;
				if (((previousValue != value) 
							|| (this._MatchStats.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MatchStats.Entity = null;
						previousValue.BombDefused.Remove(this);
					}
					this._MatchStats.Entity = value;
					if ((value != null))
					{
						value.BombDefused.Add(this);
						this._MatchId = value.MatchId;
					}
					else
					{
						this._MatchId = default(long);
					}
					this.SendPropertyChanged("MatchStats");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PlayerMatchStats_BombDefused", Storage="_PlayerMatchStats", ThisKey="MatchId,PlayerId", OtherKey="MatchId,SteamId", IsForeignKey=true)]
		public PlayerMatchStats PlayerMatchStats
		{
			get
			{
				return this._PlayerMatchStats.Entity;
			}
			set
			{
				PlayerMatchStats previousValue = this._PlayerMatchStats.Entity;
				if (((previousValue != value) 
							|| (this._PlayerMatchStats.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PlayerMatchStats.Entity = null;
						previousValue.BombDefused.Remove(this);
					}
					this._PlayerMatchStats.Entity = value;
					if ((value != null))
					{
						value.BombDefused.Add(this);
						this._MatchId = value.MatchId;
						this._PlayerId = value.SteamId;
					}
					else
					{
						this._MatchId = default(long);
						this._PlayerId = default(long);
					}
					this.SendPropertyChanged("PlayerMatchStats");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PlayerRoundStats_BombDefused", Storage="_PlayerRoundStats", ThisKey="MatchId,Round,PlayerId", OtherKey="MatchId,Round,PlayerId", IsForeignKey=true)]
		public PlayerRoundStats PlayerRoundStats
		{
			get
			{
				return this._PlayerRoundStats.Entity;
			}
			set
			{
				PlayerRoundStats previousValue = this._PlayerRoundStats.Entity;
				if (((previousValue != value) 
							|| (this._PlayerRoundStats.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PlayerRoundStats.Entity = null;
						previousValue.BombDefused.Remove(this);
					}
					this._PlayerRoundStats.Entity = value;
					if ((value != null))
					{
						value.BombDefused.Add(this);
						this._MatchId = value.MatchId;
						this._Round = value.Round;
						this._PlayerId = value.PlayerId;
					}
					else
					{
						this._MatchId = default(long);
						this._Round = default(short);
						this._PlayerId = default(long);
					}
					this.SendPropertyChanged("PlayerRoundStats");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RoundStats_BombDefused", Storage="_RoundStats", ThisKey="MatchId,Round", OtherKey="MatchId,Round", IsForeignKey=true)]
		public RoundStats RoundStats
		{
			get
			{
				return this._RoundStats.Entity;
			}
			set
			{
				RoundStats previousValue = this._RoundStats.Entity;
				if (((previousValue != value) 
							|| (this._RoundStats.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._RoundStats.Entity = null;
						previousValue.BombDefused = null;
					}
					this._RoundStats.Entity = value;
					if ((value != null))
					{
						value.BombDefused = this;
						this._MatchId = value.MatchId;
						this._Round = value.Round;
					}
					else
					{
						this._MatchId = default(long);
						this._Round = default(short);
					}
					this.SendPropertyChanged("RoundStats");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.BombExplosion")]
	public partial class BombExplosion : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _MatchId;
		
		private short _Round;
		
		private int _Time;
		
		private int _Tick;
		
		private EntityRef<MatchStats> _MatchStats;
		
		private EntityRef<RoundStats> _RoundStats;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMatchIdChanging(long value);
    partial void OnMatchIdChanged();
    partial void OnRoundChanging(short value);
    partial void OnRoundChanged();
    partial void OnTimeChanging(int value);
    partial void OnTimeChanged();
    partial void OnTickChanging(int value);
    partial void OnTickChanged();
    #endregion
		
		public BombExplosion()
		{
			this._MatchStats = default(EntityRef<MatchStats>);
			this._RoundStats = default(EntityRef<RoundStats>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MatchId", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long MatchId
		{
			get
			{
				return this._MatchId;
			}
			set
			{
				if ((this._MatchId != value))
				{
					if ((this._MatchStats.HasLoadedOrAssignedValue || this._RoundStats.HasLoadedOrAssignedValue))
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMatchIdChanging(value);
					this.SendPropertyChanging();
					this._MatchId = value;
					this.SendPropertyChanged("MatchId");
					this.OnMatchIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Round", DbType="SmallInt NOT NULL", IsPrimaryKey=true)]
		public short Round
		{
			get
			{
				return this._Round;
			}
			set
			{
				if ((this._Round != value))
				{
					if (this._RoundStats.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRoundChanging(value);
					this.SendPropertyChanging();
					this._Round = value;
					this.SendPropertyChanged("Round");
					this.OnRoundChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Time", DbType="Int NOT NULL")]
		public int Time
		{
			get
			{
				return this._Time;
			}
			set
			{
				if ((this._Time != value))
				{
					this.OnTimeChanging(value);
					this.SendPropertyChanging();
					this._Time = value;
					this.SendPropertyChanged("Time");
					this.OnTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Tick", DbType="Int NOT NULL")]
		public int Tick
		{
			get
			{
				return this._Tick;
			}
			set
			{
				if ((this._Tick != value))
				{
					this.OnTickChanging(value);
					this.SendPropertyChanging();
					this._Tick = value;
					this.SendPropertyChanged("Tick");
					this.OnTickChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MatchStats_BombExplosion", Storage="_MatchStats", ThisKey="MatchId", OtherKey="MatchId", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public MatchStats MatchStats
		{
			get
			{
				return this._MatchStats.Entity;
			}
			set
			{
				MatchStats previousValue = this._MatchStats.Entity;
				if (((previousValue != value) 
							|| (this._MatchStats.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MatchStats.Entity = null;
						previousValue.BombExplosion.Remove(this);
					}
					this._MatchStats.Entity = value;
					if ((value != null))
					{
						value.BombExplosion.Add(this);
						this._MatchId = value.MatchId;
					}
					else
					{
						this._MatchId = default(long);
					}
					this.SendPropertyChanged("MatchStats");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RoundStats_BombExplosion", Storage="_RoundStats", ThisKey="MatchId,Round", OtherKey="MatchId,Round", IsForeignKey=true)]
		public RoundStats RoundStats
		{
			get
			{
				return this._RoundStats.Entity;
			}
			set
			{
				RoundStats previousValue = this._RoundStats.Entity;
				if (((previousValue != value) 
							|| (this._RoundStats.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._RoundStats.Entity = null;
						previousValue.BombExplosion = null;
					}
					this._RoundStats.Entity = value;
					if ((value != null))
					{
						value.BombExplosion = this;
						this._MatchId = value.MatchId;
						this._Round = value.Round;
					}
					else
					{
						this._MatchId = default(long);
						this._Round = default(short);
					}
					this.SendPropertyChanged("RoundStats");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.BombPlant")]
	public partial class BombPlant : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _MatchId;
		
		private short _Round;
		
		private int _Time;
		
		private int _Tick;
		
		private long _PlayerId;
		
		private byte _Site;
		
		private double _PosX;
		
		private double _PosY;
		
		private double _PosZ;
		
		private EntityRef<MatchStats> _MatchStats;
		
		private EntityRef<PlayerMatchStats> _PlayerMatchStats;
		
		private EntityRef<PlayerRoundStats> _PlayerRoundStats;
		
		private EntityRef<RoundStats> _RoundStats;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMatchIdChanging(long value);
    partial void OnMatchIdChanged();
    partial void OnRoundChanging(short value);
    partial void OnRoundChanged();
    partial void OnTimeChanging(int value);
    partial void OnTimeChanged();
    partial void OnTickChanging(int value);
    partial void OnTickChanged();
    partial void OnPlayerIdChanging(long value);
    partial void OnPlayerIdChanged();
    partial void OnSiteChanging(byte value);
    partial void OnSiteChanged();
    partial void OnPosXChanging(double value);
    partial void OnPosXChanged();
    partial void OnPosYChanging(double value);
    partial void OnPosYChanged();
    partial void OnPosZChanging(double value);
    partial void OnPosZChanged();
    #endregion
		
		public BombPlant()
		{
			this._MatchStats = default(EntityRef<MatchStats>);
			this._PlayerMatchStats = default(EntityRef<PlayerMatchStats>);
			this._PlayerRoundStats = default(EntityRef<PlayerRoundStats>);
			this._RoundStats = default(EntityRef<RoundStats>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MatchId", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long MatchId
		{
			get
			{
				return this._MatchId;
			}
			set
			{
				if ((this._MatchId != value))
				{
					if ((((this._MatchStats.HasLoadedOrAssignedValue || this._PlayerMatchStats.HasLoadedOrAssignedValue) 
								|| this._PlayerRoundStats.HasLoadedOrAssignedValue) 
								|| this._RoundStats.HasLoadedOrAssignedValue))
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMatchIdChanging(value);
					this.SendPropertyChanging();
					this._MatchId = value;
					this.SendPropertyChanged("MatchId");
					this.OnMatchIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Round", DbType="SmallInt NOT NULL", IsPrimaryKey=true)]
		public short Round
		{
			get
			{
				return this._Round;
			}
			set
			{
				if ((this._Round != value))
				{
					if ((this._PlayerRoundStats.HasLoadedOrAssignedValue || this._RoundStats.HasLoadedOrAssignedValue))
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRoundChanging(value);
					this.SendPropertyChanging();
					this._Round = value;
					this.SendPropertyChanged("Round");
					this.OnRoundChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Time", DbType="Int NOT NULL")]
		public int Time
		{
			get
			{
				return this._Time;
			}
			set
			{
				if ((this._Time != value))
				{
					this.OnTimeChanging(value);
					this.SendPropertyChanging();
					this._Time = value;
					this.SendPropertyChanged("Time");
					this.OnTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Tick", DbType="Int NOT NULL")]
		public int Tick
		{
			get
			{
				return this._Tick;
			}
			set
			{
				if ((this._Tick != value))
				{
					this.OnTickChanging(value);
					this.SendPropertyChanging();
					this._Tick = value;
					this.SendPropertyChanged("Tick");
					this.OnTickChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlayerId", DbType="BigInt NOT NULL")]
		public long PlayerId
		{
			get
			{
				return this._PlayerId;
			}
			set
			{
				if ((this._PlayerId != value))
				{
					if ((this._PlayerMatchStats.HasLoadedOrAssignedValue || this._PlayerRoundStats.HasLoadedOrAssignedValue))
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPlayerIdChanging(value);
					this.SendPropertyChanging();
					this._PlayerId = value;
					this.SendPropertyChanged("PlayerId");
					this.OnPlayerIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Site", DbType="TinyInt NOT NULL")]
		public byte Site
		{
			get
			{
				return this._Site;
			}
			set
			{
				if ((this._Site != value))
				{
					this.OnSiteChanging(value);
					this.SendPropertyChanging();
					this._Site = value;
					this.SendPropertyChanged("Site");
					this.OnSiteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PosX", DbType="Float NOT NULL")]
		public double PosX
		{
			get
			{
				return this._PosX;
			}
			set
			{
				if ((this._PosX != value))
				{
					this.OnPosXChanging(value);
					this.SendPropertyChanging();
					this._PosX = value;
					this.SendPropertyChanged("PosX");
					this.OnPosXChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PosY", DbType="Float NOT NULL")]
		public double PosY
		{
			get
			{
				return this._PosY;
			}
			set
			{
				if ((this._PosY != value))
				{
					this.OnPosYChanging(value);
					this.SendPropertyChanging();
					this._PosY = value;
					this.SendPropertyChanged("PosY");
					this.OnPosYChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PosZ", DbType="Float NOT NULL")]
		public double PosZ
		{
			get
			{
				return this._PosZ;
			}
			set
			{
				if ((this._PosZ != value))
				{
					this.OnPosZChanging(value);
					this.SendPropertyChanging();
					this._PosZ = value;
					this.SendPropertyChanged("PosZ");
					this.OnPosZChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MatchStats_BombPlant", Storage="_MatchStats", ThisKey="MatchId", OtherKey="MatchId", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public MatchStats MatchStats
		{
			get
			{
				return this._MatchStats.Entity;
			}
			set
			{
				MatchStats previousValue = this._MatchStats.Entity;
				if (((previousValue != value) 
							|| (this._MatchStats.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MatchStats.Entity = null;
						previousValue.BombPlant.Remove(this);
					}
					this._MatchStats.Entity = value;
					if ((value != null))
					{
						value.BombPlant.Add(this);
						this._MatchId = value.MatchId;
					}
					else
					{
						this._MatchId = default(long);
					}
					this.SendPropertyChanged("MatchStats");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PlayerMatchStats_BombPlant", Storage="_PlayerMatchStats", ThisKey="MatchId,PlayerId", OtherKey="MatchId,SteamId", IsForeignKey=true)]
		public PlayerMatchStats PlayerMatchStats
		{
			get
			{
				return this._PlayerMatchStats.Entity;
			}
			set
			{
				PlayerMatchStats previousValue = this._PlayerMatchStats.Entity;
				if (((previousValue != value) 
							|| (this._PlayerMatchStats.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PlayerMatchStats.Entity = null;
						previousValue.BombPlant.Remove(this);
					}
					this._PlayerMatchStats.Entity = value;
					if ((value != null))
					{
						value.BombPlant.Add(this);
						this._MatchId = value.MatchId;
						this._PlayerId = value.SteamId;
					}
					else
					{
						this._MatchId = default(long);
						this._PlayerId = default(long);
					}
					this.SendPropertyChanged("PlayerMatchStats");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PlayerRoundStats_BombPlant", Storage="_PlayerRoundStats", ThisKey="MatchId,Round,PlayerId", OtherKey="MatchId,Round,PlayerId", IsForeignKey=true)]
		public PlayerRoundStats PlayerRoundStats
		{
			get
			{
				return this._PlayerRoundStats.Entity;
			}
			set
			{
				PlayerRoundStats previousValue = this._PlayerRoundStats.Entity;
				if (((previousValue != value) 
							|| (this._PlayerRoundStats.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PlayerRoundStats.Entity = null;
						previousValue.BombPlant.Remove(this);
					}
					this._PlayerRoundStats.Entity = value;
					if ((value != null))
					{
						value.BombPlant.Add(this);
						this._MatchId = value.MatchId;
						this._Round = value.Round;
						this._PlayerId = value.PlayerId;
					}
					else
					{
						this._MatchId = default(long);
						this._Round = default(short);
						this._PlayerId = default(long);
					}
					this.SendPropertyChanged("PlayerRoundStats");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RoundStats_BombPlant", Storage="_RoundStats", ThisKey="MatchId,Round", OtherKey="MatchId,Round", IsForeignKey=true)]
		public RoundStats RoundStats
		{
			get
			{
				return this._RoundStats.Entity;
			}
			set
			{
				RoundStats previousValue = this._RoundStats.Entity;
				if (((previousValue != value) 
							|| (this._RoundStats.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._RoundStats.Entity = null;
						previousValue.BombPlant = null;
					}
					this._RoundStats.Entity = value;
					if ((value != null))
					{
						value.BombPlant = this;
						this._MatchId = value.MatchId;
						this._Round = value.Round;
					}
					else
					{
						this._MatchId = default(long);
						this._Round = default(short);
					}
					this.SendPropertyChanged("RoundStats");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.BotTakeOver")]
	public partial class BotTakeOver : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _MatchId;
		
		private long _BotTakeOverId;
		
		private long _PlayerId;
		
		private long _BotId;
		
		private short _Round;
		
		private int _Time;
		
		private EntityRef<MatchStats> _MatchStats;
		
		private EntityRef<PlayerMatchStats> _PlayerMatchStats;
		
		private EntityRef<PlayerRoundStats> _PlayerRoundStats;
		
		private EntityRef<RoundStats> _RoundStats;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMatchIdChanging(long value);
    partial void OnMatchIdChanged();
    partial void OnBotTakeOverIdChanging(long value);
    partial void OnBotTakeOverIdChanged();
    partial void OnPlayerIdChanging(long value);
    partial void OnPlayerIdChanged();
    partial void OnBotIdChanging(long value);
    partial void OnBotIdChanged();
    partial void OnRoundChanging(short value);
    partial void OnRoundChanged();
    partial void OnTimeChanging(int value);
    partial void OnTimeChanged();
    #endregion
		
		public BotTakeOver()
		{
			this._MatchStats = default(EntityRef<MatchStats>);
			this._PlayerMatchStats = default(EntityRef<PlayerMatchStats>);
			this._PlayerRoundStats = default(EntityRef<PlayerRoundStats>);
			this._RoundStats = default(EntityRef<RoundStats>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MatchId", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long MatchId
		{
			get
			{
				return this._MatchId;
			}
			set
			{
				if ((this._MatchId != value))
				{
					if ((((this._MatchStats.HasLoadedOrAssignedValue || this._PlayerMatchStats.HasLoadedOrAssignedValue) 
								|| this._PlayerRoundStats.HasLoadedOrAssignedValue) 
								|| this._RoundStats.HasLoadedOrAssignedValue))
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMatchIdChanging(value);
					this.SendPropertyChanging();
					this._MatchId = value;
					this.SendPropertyChanged("MatchId");
					this.OnMatchIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BotTakeOverId", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long BotTakeOverId
		{
			get
			{
				return this._BotTakeOverId;
			}
			set
			{
				if ((this._BotTakeOverId != value))
				{
					this.OnBotTakeOverIdChanging(value);
					this.SendPropertyChanging();
					this._BotTakeOverId = value;
					this.SendPropertyChanged("BotTakeOverId");
					this.OnBotTakeOverIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlayerId", DbType="BigInt NOT NULL")]
		public long PlayerId
		{
			get
			{
				return this._PlayerId;
			}
			set
			{
				if ((this._PlayerId != value))
				{
					if ((this._PlayerMatchStats.HasLoadedOrAssignedValue || this._PlayerRoundStats.HasLoadedOrAssignedValue))
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPlayerIdChanging(value);
					this.SendPropertyChanging();
					this._PlayerId = value;
					this.SendPropertyChanged("PlayerId");
					this.OnPlayerIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BotId", DbType="BigInt NOT NULL")]
		public long BotId
		{
			get
			{
				return this._BotId;
			}
			set
			{
				if ((this._BotId != value))
				{
					this.OnBotIdChanging(value);
					this.SendPropertyChanging();
					this._BotId = value;
					this.SendPropertyChanged("BotId");
					this.OnBotIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Round", DbType="SmallInt NOT NULL")]
		public short Round
		{
			get
			{
				return this._Round;
			}
			set
			{
				if ((this._Round != value))
				{
					if ((this._PlayerRoundStats.HasLoadedOrAssignedValue || this._RoundStats.HasLoadedOrAssignedValue))
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRoundChanging(value);
					this.SendPropertyChanging();
					this._Round = value;
					this.SendPropertyChanged("Round");
					this.OnRoundChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Time", DbType="Int NOT NULL")]
		public int Time
		{
			get
			{
				return this._Time;
			}
			set
			{
				if ((this._Time != value))
				{
					this.OnTimeChanging(value);
					this.SendPropertyChanging();
					this._Time = value;
					this.SendPropertyChanged("Time");
					this.OnTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MatchStats_BotTakeOver", Storage="_MatchStats", ThisKey="MatchId", OtherKey="MatchId", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public MatchStats MatchStats
		{
			get
			{
				return this._MatchStats.Entity;
			}
			set
			{
				MatchStats previousValue = this._MatchStats.Entity;
				if (((previousValue != value) 
							|| (this._MatchStats.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MatchStats.Entity = null;
						previousValue.BotTakeOver.Remove(this);
					}
					this._MatchStats.Entity = value;
					if ((value != null))
					{
						value.BotTakeOver.Add(this);
						this._MatchId = value.MatchId;
					}
					else
					{
						this._MatchId = default(long);
					}
					this.SendPropertyChanged("MatchStats");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PlayerMatchStats_BotTakeOver", Storage="_PlayerMatchStats", ThisKey="MatchId,PlayerId", OtherKey="MatchId,SteamId", IsForeignKey=true)]
		public PlayerMatchStats PlayerMatchStats
		{
			get
			{
				return this._PlayerMatchStats.Entity;
			}
			set
			{
				PlayerMatchStats previousValue = this._PlayerMatchStats.Entity;
				if (((previousValue != value) 
							|| (this._PlayerMatchStats.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PlayerMatchStats.Entity = null;
						previousValue.BotTakeOver.Remove(this);
					}
					this._PlayerMatchStats.Entity = value;
					if ((value != null))
					{
						value.BotTakeOver.Add(this);
						this._MatchId = value.MatchId;
						this._PlayerId = value.SteamId;
					}
					else
					{
						this._MatchId = default(long);
						this._PlayerId = default(long);
					}
					this.SendPropertyChanged("PlayerMatchStats");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PlayerRoundStats_BotTakeOver", Storage="_PlayerRoundStats", ThisKey="MatchId,Round,PlayerId", OtherKey="MatchId,Round,PlayerId", IsForeignKey=true)]
		public PlayerRoundStats PlayerRoundStats
		{
			get
			{
				return this._PlayerRoundStats.Entity;
			}
			set
			{
				PlayerRoundStats previousValue = this._PlayerRoundStats.Entity;
				if (((previousValue != value) 
							|| (this._PlayerRoundStats.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PlayerRoundStats.Entity = null;
						previousValue.BotTakeOver.Remove(this);
					}
					this._PlayerRoundStats.Entity = value;
					if ((value != null))
					{
						value.BotTakeOver.Add(this);
						this._MatchId = value.MatchId;
						this._Round = value.Round;
						this._PlayerId = value.PlayerId;
					}
					else
					{
						this._MatchId = default(long);
						this._Round = default(short);
						this._PlayerId = default(long);
					}
					this.SendPropertyChanged("PlayerRoundStats");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RoundStats_BotTakeOver", Storage="_RoundStats", ThisKey="MatchId,Round", OtherKey="MatchId,Round", IsForeignKey=true)]
		public RoundStats RoundStats
		{
			get
			{
				return this._RoundStats.Entity;
			}
			set
			{
				RoundStats previousValue = this._RoundStats.Entity;
				if (((previousValue != value) 
							|| (this._RoundStats.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._RoundStats.Entity = null;
						previousValue.BotTakeOver.Remove(this);
					}
					this._RoundStats.Entity = value;
					if ((value != null))
					{
						value.BotTakeOver.Add(this);
						this._MatchId = value.MatchId;
						this._Round = value.Round;
					}
					else
					{
						this._MatchId = default(long);
						this._Round = default(short);
					}
					this.SendPropertyChanged("RoundStats");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ConnectDisconnect")]
	public partial class ConnectDisconnect : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _MatchId;
		
		private long _ConnectDisconnectId;
		
		private short _Round;
		
		private long _PlayerId;
		
		private int _Time;
		
		private bool _Connect;
		
		private EntityRef<MatchStats> _MatchStats;
		
		private EntityRef<PlayerMatchStats> _PlayerMatchStats;
		
		private EntityRef<RoundStats> _RoundStats;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMatchIdChanging(long value);
    partial void OnMatchIdChanged();
    partial void OnConnectDisconnectIdChanging(long value);
    partial void OnConnectDisconnectIdChanged();
    partial void OnRoundChanging(short value);
    partial void OnRoundChanged();
    partial void OnPlayerIdChanging(long value);
    partial void OnPlayerIdChanged();
    partial void OnTimeChanging(int value);
    partial void OnTimeChanged();
    partial void OnConnectChanging(bool value);
    partial void OnConnectChanged();
    #endregion
		
		public ConnectDisconnect()
		{
			this._MatchStats = default(EntityRef<MatchStats>);
			this._PlayerMatchStats = default(EntityRef<PlayerMatchStats>);
			this._RoundStats = default(EntityRef<RoundStats>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MatchId", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long MatchId
		{
			get
			{
				return this._MatchId;
			}
			set
			{
				if ((this._MatchId != value))
				{
					if (((this._MatchStats.HasLoadedOrAssignedValue || this._PlayerMatchStats.HasLoadedOrAssignedValue) 
								|| this._RoundStats.HasLoadedOrAssignedValue))
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMatchIdChanging(value);
					this.SendPropertyChanging();
					this._MatchId = value;
					this.SendPropertyChanged("MatchId");
					this.OnMatchIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ConnectDisconnectId", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long ConnectDisconnectId
		{
			get
			{
				return this._ConnectDisconnectId;
			}
			set
			{
				if ((this._ConnectDisconnectId != value))
				{
					this.OnConnectDisconnectIdChanging(value);
					this.SendPropertyChanging();
					this._ConnectDisconnectId = value;
					this.SendPropertyChanged("ConnectDisconnectId");
					this.OnConnectDisconnectIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Round", DbType="SmallInt NOT NULL")]
		public short Round
		{
			get
			{
				return this._Round;
			}
			set
			{
				if ((this._Round != value))
				{
					if (this._RoundStats.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRoundChanging(value);
					this.SendPropertyChanging();
					this._Round = value;
					this.SendPropertyChanged("Round");
					this.OnRoundChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlayerId", DbType="BigInt NOT NULL")]
		public long PlayerId
		{
			get
			{
				return this._PlayerId;
			}
			set
			{
				if ((this._PlayerId != value))
				{
					if (this._PlayerMatchStats.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPlayerIdChanging(value);
					this.SendPropertyChanging();
					this._PlayerId = value;
					this.SendPropertyChanged("PlayerId");
					this.OnPlayerIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Time", DbType="Int NOT NULL")]
		public int Time
		{
			get
			{
				return this._Time;
			}
			set
			{
				if ((this._Time != value))
				{
					this.OnTimeChanging(value);
					this.SendPropertyChanging();
					this._Time = value;
					this.SendPropertyChanged("Time");
					this.OnTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Connect", DbType="Bit NOT NULL")]
		public bool Connect
		{
			get
			{
				return this._Connect;
			}
			set
			{
				if ((this._Connect != value))
				{
					this.OnConnectChanging(value);
					this.SendPropertyChanging();
					this._Connect = value;
					this.SendPropertyChanged("Connect");
					this.OnConnectChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MatchStats_ConnectDisconnect", Storage="_MatchStats", ThisKey="MatchId", OtherKey="MatchId", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public MatchStats MatchStats
		{
			get
			{
				return this._MatchStats.Entity;
			}
			set
			{
				MatchStats previousValue = this._MatchStats.Entity;
				if (((previousValue != value) 
							|| (this._MatchStats.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MatchStats.Entity = null;
						previousValue.ConnectDisconnect.Remove(this);
					}
					this._MatchStats.Entity = value;
					if ((value != null))
					{
						value.ConnectDisconnect.Add(this);
						this._MatchId = value.MatchId;
					}
					else
					{
						this._MatchId = default(long);
					}
					this.SendPropertyChanged("MatchStats");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PlayerMatchStats_ConnectDisconnect", Storage="_PlayerMatchStats", ThisKey="MatchId,PlayerId", OtherKey="MatchId,SteamId", IsForeignKey=true)]
		public PlayerMatchStats PlayerMatchStats
		{
			get
			{
				return this._PlayerMatchStats.Entity;
			}
			set
			{
				PlayerMatchStats previousValue = this._PlayerMatchStats.Entity;
				if (((previousValue != value) 
							|| (this._PlayerMatchStats.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PlayerMatchStats.Entity = null;
						previousValue.ConnectDisconnect.Remove(this);
					}
					this._PlayerMatchStats.Entity = value;
					if ((value != null))
					{
						value.ConnectDisconnect.Add(this);
						this._MatchId = value.MatchId;
						this._PlayerId = value.SteamId;
					}
					else
					{
						this._MatchId = default(long);
						this._PlayerId = default(long);
					}
					this.SendPropertyChanged("PlayerMatchStats");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RoundStats_ConnectDisconnect", Storage="_RoundStats", ThisKey="MatchId,Round", OtherKey="MatchId,Round", IsForeignKey=true)]
		public RoundStats RoundStats
		{
			get
			{
				return this._RoundStats.Entity;
			}
			set
			{
				RoundStats previousValue = this._RoundStats.Entity;
				if (((previousValue != value) 
							|| (this._RoundStats.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._RoundStats.Entity = null;
						previousValue.ConnectDisconnect.Remove(this);
					}
					this._RoundStats.Entity = value;
					if ((value != null))
					{
						value.ConnectDisconnect.Add(this);
						this._MatchId = value.MatchId;
						this._Round = value.Round;
					}
					else
					{
						this._MatchId = default(long);
						this._Round = default(short);
					}
					this.SendPropertyChanged("RoundStats");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Damage")]
	public partial class Damage : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _MatchId;
		
		private long _DamageId;
		
		private short _Round;
		
		private int _Time;
		
		private int _Tick;
		
		private long _PlayerId;
		
		private double _PlayerPosX;
		
		private double _PlayerPosY;
		
		private double _PlayerPosZ;
		
		private bool _IsCT;
		
		private long _VictimId;
		
		private double _VictimPosX;
		
		private double _VictimPosY;
		
		private double _VictimPosZ;
		
		private int _AmountHealth;
		
		private int _AmountHealthPotential;
		
		private int _AmountArmor;
		
		private byte _HitGroup;
		
		private short _Weapon;
		
		private bool _Fatal;
		
		private bool _TeamAttack;
		
		private System.Nullable<long> _WeaponFiredId;
		
		private System.Nullable<long> _HEGrenadeId;
		
		private System.Nullable<long> _FireNadeId;
		
		private System.Nullable<long> _DecoyId;
		
		private System.Nullable<int> _PlayerZoneByTeam;
		
		private System.Nullable<int> _VictimZoneByTeam;
		
		private EntitySet<Kills> _Kills;
		
		private EntityRef<Decoy> _Decoy;
		
		private EntityRef<FireNade> _FireNade;
		
		private EntityRef<HE> _HE;
		
		private EntityRef<MatchStats> _MatchStats;
		
		private EntityRef<PlayerMatchStats> _PlayerMatchStats;
		
		private EntityRef<PlayerMatchStats> _PlayerMatchStats1;
		
		private EntityRef<PlayerRoundStats> _PlayerRoundStats;
		
		private EntityRef<PlayerRoundStats> _PlayerRoundStats1;
		
		private EntityRef<RoundStats> _RoundStats;
		
		private EntityRef<WeaponFired> _WeaponFired;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMatchIdChanging(long value);
    partial void OnMatchIdChanged();
    partial void OnDamageIdChanging(long value);
    partial void OnDamageIdChanged();
    partial void OnRoundChanging(short value);
    partial void OnRoundChanged();
    partial void OnTimeChanging(int value);
    partial void OnTimeChanged();
    partial void OnTickChanging(int value);
    partial void OnTickChanged();
    partial void OnPlayerIdChanging(long value);
    partial void OnPlayerIdChanged();
    partial void OnPlayerPosXChanging(double value);
    partial void OnPlayerPosXChanged();
    partial void OnPlayerPosYChanging(double value);
    partial void OnPlayerPosYChanged();
    partial void OnPlayerPosZChanging(double value);
    partial void OnPlayerPosZChanged();
    partial void OnIsCTChanging(bool value);
    partial void OnIsCTChanged();
    partial void OnVictimIdChanging(long value);
    partial void OnVictimIdChanged();
    partial void OnVictimPosXChanging(double value);
    partial void OnVictimPosXChanged();
    partial void OnVictimPosYChanging(double value);
    partial void OnVictimPosYChanged();
    partial void OnVictimPosZChanging(double value);
    partial void OnVictimPosZChanged();
    partial void OnAmountHealthChanging(int value);
    partial void OnAmountHealthChanged();
    partial void OnAmountHealthPotentialChanging(int value);
    partial void OnAmountHealthPotentialChanged();
    partial void OnAmountArmorChanging(int value);
    partial void OnAmountArmorChanged();
    partial void OnHitGroupChanging(byte value);
    partial void OnHitGroupChanged();
    partial void OnWeaponChanging(short value);
    partial void OnWeaponChanged();
    partial void OnFatalChanging(bool value);
    partial void OnFatalChanged();
    partial void OnTeamAttackChanging(bool value);
    partial void OnTeamAttackChanged();
    partial void OnWeaponFiredIdChanging(System.Nullable<long> value);
    partial void OnWeaponFiredIdChanged();
    partial void OnHEGrenadeIdChanging(System.Nullable<long> value);
    partial void OnHEGrenadeIdChanged();
    partial void OnFireNadeIdChanging(System.Nullable<long> value);
    partial void OnFireNadeIdChanged();
    partial void OnDecoyIdChanging(System.Nullable<long> value);
    partial void OnDecoyIdChanged();
    partial void OnPlayerZoneByTeamChanging(System.Nullable<int> value);
    partial void OnPlayerZoneByTeamChanged();
    partial void OnVictimZoneByTeamChanging(System.Nullable<int> value);
    partial void OnVictimZoneByTeamChanged();
    #endregion
		
		public Damage()
		{
			this._Kills = new EntitySet<Kills>(new Action<Kills>(this.attach_Kills), new Action<Kills>(this.detach_Kills));
			this._Decoy = default(EntityRef<Decoy>);
			this._FireNade = default(EntityRef<FireNade>);
			this._HE = default(EntityRef<HE>);
			this._MatchStats = default(EntityRef<MatchStats>);
			this._PlayerMatchStats = default(EntityRef<PlayerMatchStats>);
			this._PlayerMatchStats1 = default(EntityRef<PlayerMatchStats>);
			this._PlayerRoundStats = default(EntityRef<PlayerRoundStats>);
			this._PlayerRoundStats1 = default(EntityRef<PlayerRoundStats>);
			this._RoundStats = default(EntityRef<RoundStats>);
			this._WeaponFired = default(EntityRef<WeaponFired>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MatchId", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long MatchId
		{
			get
			{
				return this._MatchId;
			}
			set
			{
				if ((this._MatchId != value))
				{
					if ((((((((((this._Decoy.HasLoadedOrAssignedValue || this._FireNade.HasLoadedOrAssignedValue) 
								|| this._HE.HasLoadedOrAssignedValue) 
								|| this._MatchStats.HasLoadedOrAssignedValue) 
								|| this._PlayerMatchStats.HasLoadedOrAssignedValue) 
								|| this._PlayerMatchStats1.HasLoadedOrAssignedValue) 
								|| this._PlayerRoundStats.HasLoadedOrAssignedValue) 
								|| this._PlayerRoundStats1.HasLoadedOrAssignedValue) 
								|| this._RoundStats.HasLoadedOrAssignedValue) 
								|| this._WeaponFired.HasLoadedOrAssignedValue))
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMatchIdChanging(value);
					this.SendPropertyChanging();
					this._MatchId = value;
					this.SendPropertyChanged("MatchId");
					this.OnMatchIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DamageId", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long DamageId
		{
			get
			{
				return this._DamageId;
			}
			set
			{
				if ((this._DamageId != value))
				{
					this.OnDamageIdChanging(value);
					this.SendPropertyChanging();
					this._DamageId = value;
					this.SendPropertyChanged("DamageId");
					this.OnDamageIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Round", DbType="SmallInt NOT NULL")]
		public short Round
		{
			get
			{
				return this._Round;
			}
			set
			{
				if ((this._Round != value))
				{
					if (((this._PlayerRoundStats.HasLoadedOrAssignedValue || this._PlayerRoundStats1.HasLoadedOrAssignedValue) 
								|| this._RoundStats.HasLoadedOrAssignedValue))
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRoundChanging(value);
					this.SendPropertyChanging();
					this._Round = value;
					this.SendPropertyChanged("Round");
					this.OnRoundChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Time", DbType="Int NOT NULL")]
		public int Time
		{
			get
			{
				return this._Time;
			}
			set
			{
				if ((this._Time != value))
				{
					this.OnTimeChanging(value);
					this.SendPropertyChanging();
					this._Time = value;
					this.SendPropertyChanged("Time");
					this.OnTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Tick", DbType="Int NOT NULL")]
		public int Tick
		{
			get
			{
				return this._Tick;
			}
			set
			{
				if ((this._Tick != value))
				{
					this.OnTickChanging(value);
					this.SendPropertyChanging();
					this._Tick = value;
					this.SendPropertyChanged("Tick");
					this.OnTickChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlayerId", DbType="BigInt NOT NULL")]
		public long PlayerId
		{
			get
			{
				return this._PlayerId;
			}
			set
			{
				if ((this._PlayerId != value))
				{
					if ((this._PlayerMatchStats.HasLoadedOrAssignedValue || this._PlayerRoundStats.HasLoadedOrAssignedValue))
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPlayerIdChanging(value);
					this.SendPropertyChanging();
					this._PlayerId = value;
					this.SendPropertyChanged("PlayerId");
					this.OnPlayerIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlayerPosX", DbType="Float NOT NULL")]
		public double PlayerPosX
		{
			get
			{
				return this._PlayerPosX;
			}
			set
			{
				if ((this._PlayerPosX != value))
				{
					this.OnPlayerPosXChanging(value);
					this.SendPropertyChanging();
					this._PlayerPosX = value;
					this.SendPropertyChanged("PlayerPosX");
					this.OnPlayerPosXChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlayerPosY", DbType="Float NOT NULL")]
		public double PlayerPosY
		{
			get
			{
				return this._PlayerPosY;
			}
			set
			{
				if ((this._PlayerPosY != value))
				{
					this.OnPlayerPosYChanging(value);
					this.SendPropertyChanging();
					this._PlayerPosY = value;
					this.SendPropertyChanged("PlayerPosY");
					this.OnPlayerPosYChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlayerPosZ", DbType="Float NOT NULL")]
		public double PlayerPosZ
		{
			get
			{
				return this._PlayerPosZ;
			}
			set
			{
				if ((this._PlayerPosZ != value))
				{
					this.OnPlayerPosZChanging(value);
					this.SendPropertyChanging();
					this._PlayerPosZ = value;
					this.SendPropertyChanged("PlayerPosZ");
					this.OnPlayerPosZChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsCT", DbType="Bit NOT NULL")]
		public bool IsCT
		{
			get
			{
				return this._IsCT;
			}
			set
			{
				if ((this._IsCT != value))
				{
					this.OnIsCTChanging(value);
					this.SendPropertyChanging();
					this._IsCT = value;
					this.SendPropertyChanged("IsCT");
					this.OnIsCTChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VictimId", DbType="BigInt NOT NULL")]
		public long VictimId
		{
			get
			{
				return this._VictimId;
			}
			set
			{
				if ((this._VictimId != value))
				{
					if ((this._PlayerMatchStats1.HasLoadedOrAssignedValue || this._PlayerRoundStats1.HasLoadedOrAssignedValue))
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnVictimIdChanging(value);
					this.SendPropertyChanging();
					this._VictimId = value;
					this.SendPropertyChanged("VictimId");
					this.OnVictimIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VictimPosX", DbType="Float NOT NULL")]
		public double VictimPosX
		{
			get
			{
				return this._VictimPosX;
			}
			set
			{
				if ((this._VictimPosX != value))
				{
					this.OnVictimPosXChanging(value);
					this.SendPropertyChanging();
					this._VictimPosX = value;
					this.SendPropertyChanged("VictimPosX");
					this.OnVictimPosXChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VictimPosY", DbType="Float NOT NULL")]
		public double VictimPosY
		{
			get
			{
				return this._VictimPosY;
			}
			set
			{
				if ((this._VictimPosY != value))
				{
					this.OnVictimPosYChanging(value);
					this.SendPropertyChanging();
					this._VictimPosY = value;
					this.SendPropertyChanged("VictimPosY");
					this.OnVictimPosYChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VictimPosZ", DbType="Float NOT NULL")]
		public double VictimPosZ
		{
			get
			{
				return this._VictimPosZ;
			}
			set
			{
				if ((this._VictimPosZ != value))
				{
					this.OnVictimPosZChanging(value);
					this.SendPropertyChanging();
					this._VictimPosZ = value;
					this.SendPropertyChanged("VictimPosZ");
					this.OnVictimPosZChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AmountHealth", DbType="Int NOT NULL")]
		public int AmountHealth
		{
			get
			{
				return this._AmountHealth;
			}
			set
			{
				if ((this._AmountHealth != value))
				{
					this.OnAmountHealthChanging(value);
					this.SendPropertyChanging();
					this._AmountHealth = value;
					this.SendPropertyChanged("AmountHealth");
					this.OnAmountHealthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AmountHealthPotential", DbType="Int NOT NULL")]
		public int AmountHealthPotential
		{
			get
			{
				return this._AmountHealthPotential;
			}
			set
			{
				if ((this._AmountHealthPotential != value))
				{
					this.OnAmountHealthPotentialChanging(value);
					this.SendPropertyChanging();
					this._AmountHealthPotential = value;
					this.SendPropertyChanged("AmountHealthPotential");
					this.OnAmountHealthPotentialChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AmountArmor", DbType="Int NOT NULL")]
		public int AmountArmor
		{
			get
			{
				return this._AmountArmor;
			}
			set
			{
				if ((this._AmountArmor != value))
				{
					this.OnAmountArmorChanging(value);
					this.SendPropertyChanging();
					this._AmountArmor = value;
					this.SendPropertyChanged("AmountArmor");
					this.OnAmountArmorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HitGroup", DbType="TinyInt NOT NULL")]
		public byte HitGroup
		{
			get
			{
				return this._HitGroup;
			}
			set
			{
				if ((this._HitGroup != value))
				{
					this.OnHitGroupChanging(value);
					this.SendPropertyChanging();
					this._HitGroup = value;
					this.SendPropertyChanged("HitGroup");
					this.OnHitGroupChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Weapon", DbType="SmallInt NOT NULL")]
		public short Weapon
		{
			get
			{
				return this._Weapon;
			}
			set
			{
				if ((this._Weapon != value))
				{
					this.OnWeaponChanging(value);
					this.SendPropertyChanging();
					this._Weapon = value;
					this.SendPropertyChanged("Weapon");
					this.OnWeaponChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Fatal", DbType="Bit NOT NULL")]
		public bool Fatal
		{
			get
			{
				return this._Fatal;
			}
			set
			{
				if ((this._Fatal != value))
				{
					this.OnFatalChanging(value);
					this.SendPropertyChanging();
					this._Fatal = value;
					this.SendPropertyChanged("Fatal");
					this.OnFatalChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TeamAttack", DbType="Bit NOT NULL")]
		public bool TeamAttack
		{
			get
			{
				return this._TeamAttack;
			}
			set
			{
				if ((this._TeamAttack != value))
				{
					this.OnTeamAttackChanging(value);
					this.SendPropertyChanging();
					this._TeamAttack = value;
					this.SendPropertyChanged("TeamAttack");
					this.OnTeamAttackChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WeaponFiredId", DbType="BigInt")]
		public System.Nullable<long> WeaponFiredId
		{
			get
			{
				return this._WeaponFiredId;
			}
			set
			{
				if ((this._WeaponFiredId != value))
				{
					if (this._WeaponFired.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnWeaponFiredIdChanging(value);
					this.SendPropertyChanging();
					this._WeaponFiredId = value;
					this.SendPropertyChanged("WeaponFiredId");
					this.OnWeaponFiredIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HEGrenadeId", DbType="BigInt")]
		public System.Nullable<long> HEGrenadeId
		{
			get
			{
				return this._HEGrenadeId;
			}
			set
			{
				if ((this._HEGrenadeId != value))
				{
					if (this._HE.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnHEGrenadeIdChanging(value);
					this.SendPropertyChanging();
					this._HEGrenadeId = value;
					this.SendPropertyChanged("HEGrenadeId");
					this.OnHEGrenadeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FireNadeId", DbType="BigInt")]
		public System.Nullable<long> FireNadeId
		{
			get
			{
				return this._FireNadeId;
			}
			set
			{
				if ((this._FireNadeId != value))
				{
					if (this._FireNade.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFireNadeIdChanging(value);
					this.SendPropertyChanging();
					this._FireNadeId = value;
					this.SendPropertyChanged("FireNadeId");
					this.OnFireNadeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DecoyId", DbType="BigInt")]
		public System.Nullable<long> DecoyId
		{
			get
			{
				return this._DecoyId;
			}
			set
			{
				if ((this._DecoyId != value))
				{
					if (this._Decoy.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDecoyIdChanging(value);
					this.SendPropertyChanging();
					this._DecoyId = value;
					this.SendPropertyChanged("DecoyId");
					this.OnDecoyIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlayerZoneByTeam", DbType="Int")]
		public System.Nullable<int> PlayerZoneByTeam
		{
			get
			{
				return this._PlayerZoneByTeam;
			}
			set
			{
				if ((this._PlayerZoneByTeam != value))
				{
					this.OnPlayerZoneByTeamChanging(value);
					this.SendPropertyChanging();
					this._PlayerZoneByTeam = value;
					this.SendPropertyChanged("PlayerZoneByTeam");
					this.OnPlayerZoneByTeamChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VictimZoneByTeam", DbType="Int")]
		public System.Nullable<int> VictimZoneByTeam
		{
			get
			{
				return this._VictimZoneByTeam;
			}
			set
			{
				if ((this._VictimZoneByTeam != value))
				{
					this.OnVictimZoneByTeamChanging(value);
					this.SendPropertyChanging();
					this._VictimZoneByTeam = value;
					this.SendPropertyChanged("VictimZoneByTeam");
					this.OnVictimZoneByTeamChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Damage_Kills", Storage="_Kills", ThisKey="MatchId,DamageId", OtherKey="MatchId,DamageId")]
		public EntitySet<Kills> Kills
		{
			get
			{
				return this._Kills;
			}
			set
			{
				this._Kills.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Decoy_Damage", Storage="_Decoy", ThisKey="MatchId,DecoyId", OtherKey="MatchId,GrenadeId", IsForeignKey=true)]
		public Decoy Decoy
		{
			get
			{
				return this._Decoy.Entity;
			}
			set
			{
				Decoy previousValue = this._Decoy.Entity;
				if (((previousValue != value) 
							|| (this._Decoy.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Decoy.Entity = null;
						previousValue.Damage.Remove(this);
					}
					this._Decoy.Entity = value;
					if ((value != null))
					{
						value.Damage.Add(this);
						this._MatchId = value.MatchId;
						this._DecoyId = value.GrenadeId;
					}
					else
					{
						this._MatchId = default(long);
						this._DecoyId = default(Nullable<long>);
					}
					this.SendPropertyChanged("Decoy");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FireNade_Damage", Storage="_FireNade", ThisKey="MatchId,FireNadeId", OtherKey="MatchId,GrenadeId", IsForeignKey=true)]
		public FireNade FireNade
		{
			get
			{
				return this._FireNade.Entity;
			}
			set
			{
				FireNade previousValue = this._FireNade.Entity;
				if (((previousValue != value) 
							|| (this._FireNade.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._FireNade.Entity = null;
						previousValue.Damage.Remove(this);
					}
					this._FireNade.Entity = value;
					if ((value != null))
					{
						value.Damage.Add(this);
						this._MatchId = value.MatchId;
						this._FireNadeId = value.GrenadeId;
					}
					else
					{
						this._MatchId = default(long);
						this._FireNadeId = default(Nullable<long>);
					}
					this.SendPropertyChanged("FireNade");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="HE_Damage", Storage="_HE", ThisKey="MatchId,HEGrenadeId", OtherKey="MatchId,GrenadeId", IsForeignKey=true)]
		public HE HE
		{
			get
			{
				return this._HE.Entity;
			}
			set
			{
				HE previousValue = this._HE.Entity;
				if (((previousValue != value) 
							|| (this._HE.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._HE.Entity = null;
						previousValue.Damage.Remove(this);
					}
					this._HE.Entity = value;
					if ((value != null))
					{
						value.Damage.Add(this);
						this._MatchId = value.MatchId;
						this._HEGrenadeId = value.GrenadeId;
					}
					else
					{
						this._MatchId = default(long);
						this._HEGrenadeId = default(Nullable<long>);
					}
					this.SendPropertyChanged("HE");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MatchStats_Damage", Storage="_MatchStats", ThisKey="MatchId", OtherKey="MatchId", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public MatchStats MatchStats
		{
			get
			{
				return this._MatchStats.Entity;
			}
			set
			{
				MatchStats previousValue = this._MatchStats.Entity;
				if (((previousValue != value) 
							|| (this._MatchStats.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MatchStats.Entity = null;
						previousValue.Damage.Remove(this);
					}
					this._MatchStats.Entity = value;
					if ((value != null))
					{
						value.Damage.Add(this);
						this._MatchId = value.MatchId;
					}
					else
					{
						this._MatchId = default(long);
					}
					this.SendPropertyChanged("MatchStats");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PlayerMatchStats_Damage", Storage="_PlayerMatchStats", ThisKey="MatchId,PlayerId", OtherKey="MatchId,SteamId", IsForeignKey=true)]
		public PlayerMatchStats PlayerMatchStats
		{
			get
			{
				return this._PlayerMatchStats.Entity;
			}
			set
			{
				PlayerMatchStats previousValue = this._PlayerMatchStats.Entity;
				if (((previousValue != value) 
							|| (this._PlayerMatchStats.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PlayerMatchStats.Entity = null;
						previousValue.Damage1.Remove(this);
					}
					this._PlayerMatchStats.Entity = value;
					if ((value != null))
					{
						value.Damage1.Add(this);
						this._MatchId = value.MatchId;
						this._PlayerId = value.SteamId;
					}
					else
					{
						this._MatchId = default(long);
						this._PlayerId = default(long);
					}
					this.SendPropertyChanged("PlayerMatchStats");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PlayerMatchStats_Damage1", Storage="_PlayerMatchStats1", ThisKey="MatchId,VictimId", OtherKey="MatchId,SteamId", IsForeignKey=true)]
		public PlayerMatchStats PlayerMatchStats1
		{
			get
			{
				return this._PlayerMatchStats1.Entity;
			}
			set
			{
				PlayerMatchStats previousValue = this._PlayerMatchStats1.Entity;
				if (((previousValue != value) 
							|| (this._PlayerMatchStats1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PlayerMatchStats1.Entity = null;
						previousValue.Damage2.Remove(this);
					}
					this._PlayerMatchStats1.Entity = value;
					if ((value != null))
					{
						value.Damage2.Add(this);
						this._MatchId = value.MatchId;
						this._VictimId = value.SteamId;
					}
					else
					{
						this._MatchId = default(long);
						this._VictimId = default(long);
					}
					this.SendPropertyChanged("PlayerMatchStats1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PlayerRoundStats_Damage", Storage="_PlayerRoundStats", ThisKey="MatchId,Round,PlayerId", OtherKey="MatchId,Round,PlayerId", IsForeignKey=true)]
		public PlayerRoundStats PlayerRoundStats
		{
			get
			{
				return this._PlayerRoundStats.Entity;
			}
			set
			{
				PlayerRoundStats previousValue = this._PlayerRoundStats.Entity;
				if (((previousValue != value) 
							|| (this._PlayerRoundStats.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PlayerRoundStats.Entity = null;
						previousValue.Damage.Remove(this);
					}
					this._PlayerRoundStats.Entity = value;
					if ((value != null))
					{
						value.Damage.Add(this);
						this._MatchId = value.MatchId;
						this._Round = value.Round;
						this._PlayerId = value.PlayerId;
					}
					else
					{
						this._MatchId = default(long);
						this._Round = default(short);
						this._PlayerId = default(long);
					}
					this.SendPropertyChanged("PlayerRoundStats");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PlayerRoundStats_Damage1", Storage="_PlayerRoundStats1", ThisKey="MatchId,Round,VictimId", OtherKey="MatchId,Round,PlayerId", IsForeignKey=true)]
		public PlayerRoundStats PlayerRoundStats1
		{
			get
			{
				return this._PlayerRoundStats1.Entity;
			}
			set
			{
				PlayerRoundStats previousValue = this._PlayerRoundStats1.Entity;
				if (((previousValue != value) 
							|| (this._PlayerRoundStats1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PlayerRoundStats1.Entity = null;
						previousValue.Damage1.Remove(this);
					}
					this._PlayerRoundStats1.Entity = value;
					if ((value != null))
					{
						value.Damage1.Add(this);
						this._MatchId = value.MatchId;
						this._Round = value.Round;
						this._VictimId = value.PlayerId;
					}
					else
					{
						this._MatchId = default(long);
						this._Round = default(short);
						this._VictimId = default(long);
					}
					this.SendPropertyChanged("PlayerRoundStats1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RoundStats_Damage", Storage="_RoundStats", ThisKey="MatchId,Round", OtherKey="MatchId,Round", IsForeignKey=true)]
		public RoundStats RoundStats
		{
			get
			{
				return this._RoundStats.Entity;
			}
			set
			{
				RoundStats previousValue = this._RoundStats.Entity;
				if (((previousValue != value) 
							|| (this._RoundStats.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._RoundStats.Entity = null;
						previousValue.Damage.Remove(this);
					}
					this._RoundStats.Entity = value;
					if ((value != null))
					{
						value.Damage.Add(this);
						this._MatchId = value.MatchId;
						this._Round = value.Round;
					}
					else
					{
						this._MatchId = default(long);
						this._Round = default(short);
					}
					this.SendPropertyChanged("RoundStats");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="WeaponFired_Damage", Storage="_WeaponFired", ThisKey="MatchId,WeaponFiredId", OtherKey="MatchId,WeaponFiredId", IsForeignKey=true)]
		public WeaponFired WeaponFired
		{
			get
			{
				return this._WeaponFired.Entity;
			}
			set
			{
				WeaponFired previousValue = this._WeaponFired.Entity;
				if (((previousValue != value) 
							|| (this._WeaponFired.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._WeaponFired.Entity = null;
						previousValue.Damage.Remove(this);
					}
					this._WeaponFired.Entity = value;
					if ((value != null))
					{
						value.Damage.Add(this);
						this._MatchId = value.MatchId;
						this._WeaponFiredId = value.WeaponFiredId;
					}
					else
					{
						this._MatchId = default(long);
						this._WeaponFiredId = default(Nullable<long>);
					}
					this.SendPropertyChanged("WeaponFired");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Kills(Kills entity)
		{
			this.SendPropertyChanging();
			entity.Damage = this;
		}
		
		private void detach_Kills(Kills entity)
		{
			this.SendPropertyChanging();
			entity.Damage = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Decoy")]
	public partial class Decoy : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _MatchId;
		
		private long _GrenadeId;
		
		private short _Round;
		
		private int _Time;
		
		private int _Tick;
		
		private long _PlayerId;
		
		private double _PlayerPosX;
		
		private double _PlayerPosY;
		
		private double _PlayerPosZ;
		
		private double _PlayerViewX;
		
		private double _PlayerViewY;
		
		private bool _IsCT;
		
		private double _GrenadePosX;
		
		private double _GrenadePosY;
		
		private double _GrenadePosZ;
		
		private string _Trajectory;
		
		private EntitySet<Damage> _Damage;
		
		private EntityRef<MatchStats> _MatchStats;
		
		private EntityRef<PlayerMatchStats> _PlayerMatchStats;
		
		private EntityRef<PlayerRoundStats> _PlayerRoundStats;
		
		private EntityRef<RoundStats> _RoundStats;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMatchIdChanging(long value);
    partial void OnMatchIdChanged();
    partial void OnGrenadeIdChanging(long value);
    partial void OnGrenadeIdChanged();
    partial void OnRoundChanging(short value);
    partial void OnRoundChanged();
    partial void OnTimeChanging(int value);
    partial void OnTimeChanged();
    partial void OnTickChanging(int value);
    partial void OnTickChanged();
    partial void OnPlayerIdChanging(long value);
    partial void OnPlayerIdChanged();
    partial void OnPlayerPosXChanging(double value);
    partial void OnPlayerPosXChanged();
    partial void OnPlayerPosYChanging(double value);
    partial void OnPlayerPosYChanged();
    partial void OnPlayerPosZChanging(double value);
    partial void OnPlayerPosZChanged();
    partial void OnPlayerViewXChanging(double value);
    partial void OnPlayerViewXChanged();
    partial void OnPlayerViewYChanging(double value);
    partial void OnPlayerViewYChanged();
    partial void OnIsCTChanging(bool value);
    partial void OnIsCTChanged();
    partial void OnGrenadePosXChanging(double value);
    partial void OnGrenadePosXChanged();
    partial void OnGrenadePosYChanging(double value);
    partial void OnGrenadePosYChanged();
    partial void OnGrenadePosZChanging(double value);
    partial void OnGrenadePosZChanged();
    partial void OnTrajectoryChanging(string value);
    partial void OnTrajectoryChanged();
    #endregion
		
		public Decoy()
		{
			this._Damage = new EntitySet<Damage>(new Action<Damage>(this.attach_Damage), new Action<Damage>(this.detach_Damage));
			this._MatchStats = default(EntityRef<MatchStats>);
			this._PlayerMatchStats = default(EntityRef<PlayerMatchStats>);
			this._PlayerRoundStats = default(EntityRef<PlayerRoundStats>);
			this._RoundStats = default(EntityRef<RoundStats>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MatchId", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long MatchId
		{
			get
			{
				return this._MatchId;
			}
			set
			{
				if ((this._MatchId != value))
				{
					if ((((this._MatchStats.HasLoadedOrAssignedValue || this._PlayerMatchStats.HasLoadedOrAssignedValue) 
								|| this._PlayerRoundStats.HasLoadedOrAssignedValue) 
								|| this._RoundStats.HasLoadedOrAssignedValue))
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMatchIdChanging(value);
					this.SendPropertyChanging();
					this._MatchId = value;
					this.SendPropertyChanged("MatchId");
					this.OnMatchIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GrenadeId", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long GrenadeId
		{
			get
			{
				return this._GrenadeId;
			}
			set
			{
				if ((this._GrenadeId != value))
				{
					this.OnGrenadeIdChanging(value);
					this.SendPropertyChanging();
					this._GrenadeId = value;
					this.SendPropertyChanged("GrenadeId");
					this.OnGrenadeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Round", DbType="SmallInt NOT NULL")]
		public short Round
		{
			get
			{
				return this._Round;
			}
			set
			{
				if ((this._Round != value))
				{
					if ((this._PlayerRoundStats.HasLoadedOrAssignedValue || this._RoundStats.HasLoadedOrAssignedValue))
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRoundChanging(value);
					this.SendPropertyChanging();
					this._Round = value;
					this.SendPropertyChanged("Round");
					this.OnRoundChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Time", DbType="Int NOT NULL")]
		public int Time
		{
			get
			{
				return this._Time;
			}
			set
			{
				if ((this._Time != value))
				{
					this.OnTimeChanging(value);
					this.SendPropertyChanging();
					this._Time = value;
					this.SendPropertyChanged("Time");
					this.OnTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Tick", DbType="Int NOT NULL")]
		public int Tick
		{
			get
			{
				return this._Tick;
			}
			set
			{
				if ((this._Tick != value))
				{
					this.OnTickChanging(value);
					this.SendPropertyChanging();
					this._Tick = value;
					this.SendPropertyChanged("Tick");
					this.OnTickChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlayerId", DbType="BigInt NOT NULL")]
		public long PlayerId
		{
			get
			{
				return this._PlayerId;
			}
			set
			{
				if ((this._PlayerId != value))
				{
					if ((this._PlayerMatchStats.HasLoadedOrAssignedValue || this._PlayerRoundStats.HasLoadedOrAssignedValue))
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPlayerIdChanging(value);
					this.SendPropertyChanging();
					this._PlayerId = value;
					this.SendPropertyChanged("PlayerId");
					this.OnPlayerIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlayerPosX", DbType="Float NOT NULL")]
		public double PlayerPosX
		{
			get
			{
				return this._PlayerPosX;
			}
			set
			{
				if ((this._PlayerPosX != value))
				{
					this.OnPlayerPosXChanging(value);
					this.SendPropertyChanging();
					this._PlayerPosX = value;
					this.SendPropertyChanged("PlayerPosX");
					this.OnPlayerPosXChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlayerPosY", DbType="Float NOT NULL")]
		public double PlayerPosY
		{
			get
			{
				return this._PlayerPosY;
			}
			set
			{
				if ((this._PlayerPosY != value))
				{
					this.OnPlayerPosYChanging(value);
					this.SendPropertyChanging();
					this._PlayerPosY = value;
					this.SendPropertyChanged("PlayerPosY");
					this.OnPlayerPosYChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlayerPosZ", DbType="Float NOT NULL")]
		public double PlayerPosZ
		{
			get
			{
				return this._PlayerPosZ;
			}
			set
			{
				if ((this._PlayerPosZ != value))
				{
					this.OnPlayerPosZChanging(value);
					this.SendPropertyChanging();
					this._PlayerPosZ = value;
					this.SendPropertyChanged("PlayerPosZ");
					this.OnPlayerPosZChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlayerViewX", DbType="Float NOT NULL")]
		public double PlayerViewX
		{
			get
			{
				return this._PlayerViewX;
			}
			set
			{
				if ((this._PlayerViewX != value))
				{
					this.OnPlayerViewXChanging(value);
					this.SendPropertyChanging();
					this._PlayerViewX = value;
					this.SendPropertyChanged("PlayerViewX");
					this.OnPlayerViewXChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlayerViewY", DbType="Float NOT NULL")]
		public double PlayerViewY
		{
			get
			{
				return this._PlayerViewY;
			}
			set
			{
				if ((this._PlayerViewY != value))
				{
					this.OnPlayerViewYChanging(value);
					this.SendPropertyChanging();
					this._PlayerViewY = value;
					this.SendPropertyChanged("PlayerViewY");
					this.OnPlayerViewYChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsCT", DbType="Bit NOT NULL")]
		public bool IsCT
		{
			get
			{
				return this._IsCT;
			}
			set
			{
				if ((this._IsCT != value))
				{
					this.OnIsCTChanging(value);
					this.SendPropertyChanging();
					this._IsCT = value;
					this.SendPropertyChanged("IsCT");
					this.OnIsCTChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GrenadePosX", DbType="Float NOT NULL")]
		public double GrenadePosX
		{
			get
			{
				return this._GrenadePosX;
			}
			set
			{
				if ((this._GrenadePosX != value))
				{
					this.OnGrenadePosXChanging(value);
					this.SendPropertyChanging();
					this._GrenadePosX = value;
					this.SendPropertyChanged("GrenadePosX");
					this.OnGrenadePosXChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GrenadePosY", DbType="Float NOT NULL")]
		public double GrenadePosY
		{
			get
			{
				return this._GrenadePosY;
			}
			set
			{
				if ((this._GrenadePosY != value))
				{
					this.OnGrenadePosYChanging(value);
					this.SendPropertyChanging();
					this._GrenadePosY = value;
					this.SendPropertyChanged("GrenadePosY");
					this.OnGrenadePosYChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GrenadePosZ", DbType="Float NOT NULL")]
		public double GrenadePosZ
		{
			get
			{
				return this._GrenadePosZ;
			}
			set
			{
				if ((this._GrenadePosZ != value))
				{
					this.OnGrenadePosZChanging(value);
					this.SendPropertyChanging();
					this._GrenadePosZ = value;
					this.SendPropertyChanged("GrenadePosZ");
					this.OnGrenadePosZChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Trajectory", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Trajectory
		{
			get
			{
				return this._Trajectory;
			}
			set
			{
				if ((this._Trajectory != value))
				{
					this.OnTrajectoryChanging(value);
					this.SendPropertyChanging();
					this._Trajectory = value;
					this.SendPropertyChanged("Trajectory");
					this.OnTrajectoryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Decoy_Damage", Storage="_Damage", ThisKey="MatchId,GrenadeId", OtherKey="MatchId,DecoyId")]
		public EntitySet<Damage> Damage
		{
			get
			{
				return this._Damage;
			}
			set
			{
				this._Damage.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MatchStats_Decoy", Storage="_MatchStats", ThisKey="MatchId", OtherKey="MatchId", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public MatchStats MatchStats
		{
			get
			{
				return this._MatchStats.Entity;
			}
			set
			{
				MatchStats previousValue = this._MatchStats.Entity;
				if (((previousValue != value) 
							|| (this._MatchStats.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MatchStats.Entity = null;
						previousValue.Decoy.Remove(this);
					}
					this._MatchStats.Entity = value;
					if ((value != null))
					{
						value.Decoy.Add(this);
						this._MatchId = value.MatchId;
					}
					else
					{
						this._MatchId = default(long);
					}
					this.SendPropertyChanged("MatchStats");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PlayerMatchStats_Decoy", Storage="_PlayerMatchStats", ThisKey="MatchId,PlayerId", OtherKey="MatchId,SteamId", IsForeignKey=true)]
		public PlayerMatchStats PlayerMatchStats
		{
			get
			{
				return this._PlayerMatchStats.Entity;
			}
			set
			{
				PlayerMatchStats previousValue = this._PlayerMatchStats.Entity;
				if (((previousValue != value) 
							|| (this._PlayerMatchStats.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PlayerMatchStats.Entity = null;
						previousValue.Decoy.Remove(this);
					}
					this._PlayerMatchStats.Entity = value;
					if ((value != null))
					{
						value.Decoy.Add(this);
						this._MatchId = value.MatchId;
						this._PlayerId = value.SteamId;
					}
					else
					{
						this._MatchId = default(long);
						this._PlayerId = default(long);
					}
					this.SendPropertyChanged("PlayerMatchStats");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PlayerRoundStats_Decoy", Storage="_PlayerRoundStats", ThisKey="MatchId,Round,PlayerId", OtherKey="MatchId,Round,PlayerId", IsForeignKey=true)]
		public PlayerRoundStats PlayerRoundStats
		{
			get
			{
				return this._PlayerRoundStats.Entity;
			}
			set
			{
				PlayerRoundStats previousValue = this._PlayerRoundStats.Entity;
				if (((previousValue != value) 
							|| (this._PlayerRoundStats.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PlayerRoundStats.Entity = null;
						previousValue.Decoy.Remove(this);
					}
					this._PlayerRoundStats.Entity = value;
					if ((value != null))
					{
						value.Decoy.Add(this);
						this._MatchId = value.MatchId;
						this._Round = value.Round;
						this._PlayerId = value.PlayerId;
					}
					else
					{
						this._MatchId = default(long);
						this._Round = default(short);
						this._PlayerId = default(long);
					}
					this.SendPropertyChanged("PlayerRoundStats");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RoundStats_Decoy", Storage="_RoundStats", ThisKey="MatchId,Round", OtherKey="MatchId,Round", IsForeignKey=true)]
		public RoundStats RoundStats
		{
			get
			{
				return this._RoundStats.Entity;
			}
			set
			{
				RoundStats previousValue = this._RoundStats.Entity;
				if (((previousValue != value) 
							|| (this._RoundStats.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._RoundStats.Entity = null;
						previousValue.Decoy.Remove(this);
					}
					this._RoundStats.Entity = value;
					if ((value != null))
					{
						value.Decoy.Add(this);
						this._MatchId = value.MatchId;
						this._Round = value.Round;
					}
					else
					{
						this._MatchId = default(long);
						this._Round = default(short);
					}
					this.SendPropertyChanged("RoundStats");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Damage(Damage entity)
		{
			this.SendPropertyChanging();
			entity.Decoy = this;
		}
		
		private void detach_Damage(Damage entity)
		{
			this.SendPropertyChanging();
			entity.Decoy = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DemoStats")]
	public partial class DemoStats : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _DemoId;
		
		private System.Nullable<long> _MatchId;
		
		private string _DemoUrl;
		
		private string _DemoFileName;
		
		private string _DemoFilePath;
		
		private string _DemoFileHashMD5;
		
		private System.DateTime _MatchDate;
		
		private short _Status;
		
		private short _Attempts;
		
		private System.DateTime _DemoAnalyzerVersion;
		
		private System.DateTime _PyAnalyzerVersion;
		
		private string _FaceItMatchId;
		
		private EntitySet<MatchStats> _MatchStats;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDemoIdChanging(long value);
    partial void OnDemoIdChanged();
    partial void OnMatchIdChanging(System.Nullable<long> value);
    partial void OnMatchIdChanged();
    partial void OnDemoUrlChanging(string value);
    partial void OnDemoUrlChanged();
    partial void OnDemoFileNameChanging(string value);
    partial void OnDemoFileNameChanged();
    partial void OnDemoFilePathChanging(string value);
    partial void OnDemoFilePathChanged();
    partial void OnDemoFileHashMD5Changing(string value);
    partial void OnDemoFileHashMD5Changed();
    partial void OnMatchDateChanging(System.DateTime value);
    partial void OnMatchDateChanged();
    partial void OnStatusChanging(short value);
    partial void OnStatusChanged();
    partial void OnAttemptsChanging(short value);
    partial void OnAttemptsChanged();
    partial void OnDemoAnalyzerVersionChanging(System.DateTime value);
    partial void OnDemoAnalyzerVersionChanged();
    partial void OnPyAnalyzerVersionChanging(System.DateTime value);
    partial void OnPyAnalyzerVersionChanged();
    partial void OnFaceItMatchIdChanging(string value);
    partial void OnFaceItMatchIdChanged();
    #endregion
		
		public DemoStats()
		{
			this._MatchStats = new EntitySet<MatchStats>(new Action<MatchStats>(this.attach_MatchStats), new Action<MatchStats>(this.detach_MatchStats));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DemoId", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long DemoId
		{
			get
			{
				return this._DemoId;
			}
			set
			{
				if ((this._DemoId != value))
				{
					this.OnDemoIdChanging(value);
					this.SendPropertyChanging();
					this._DemoId = value;
					this.SendPropertyChanged("DemoId");
					this.OnDemoIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MatchId", DbType="BigInt")]
		public System.Nullable<long> MatchId
		{
			get
			{
				return this._MatchId;
			}
			set
			{
				if ((this._MatchId != value))
				{
					this.OnMatchIdChanging(value);
					this.SendPropertyChanging();
					this._MatchId = value;
					this.SendPropertyChanged("MatchId");
					this.OnMatchIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DemoUrl", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string DemoUrl
		{
			get
			{
				return this._DemoUrl;
			}
			set
			{
				if ((this._DemoUrl != value))
				{
					this.OnDemoUrlChanging(value);
					this.SendPropertyChanging();
					this._DemoUrl = value;
					this.SendPropertyChanged("DemoUrl");
					this.OnDemoUrlChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DemoFileName", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string DemoFileName
		{
			get
			{
				return this._DemoFileName;
			}
			set
			{
				if ((this._DemoFileName != value))
				{
					this.OnDemoFileNameChanging(value);
					this.SendPropertyChanging();
					this._DemoFileName = value;
					this.SendPropertyChanged("DemoFileName");
					this.OnDemoFileNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DemoFilePath", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string DemoFilePath
		{
			get
			{
				return this._DemoFilePath;
			}
			set
			{
				if ((this._DemoFilePath != value))
				{
					this.OnDemoFilePathChanging(value);
					this.SendPropertyChanging();
					this._DemoFilePath = value;
					this.SendPropertyChanged("DemoFilePath");
					this.OnDemoFilePathChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DemoFileHashMD5", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string DemoFileHashMD5
		{
			get
			{
				return this._DemoFileHashMD5;
			}
			set
			{
				if ((this._DemoFileHashMD5 != value))
				{
					this.OnDemoFileHashMD5Changing(value);
					this.SendPropertyChanging();
					this._DemoFileHashMD5 = value;
					this.SendPropertyChanged("DemoFileHashMD5");
					this.OnDemoFileHashMD5Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MatchDate", DbType="DateTime NOT NULL")]
		public System.DateTime MatchDate
		{
			get
			{
				return this._MatchDate;
			}
			set
			{
				if ((this._MatchDate != value))
				{
					this.OnMatchDateChanging(value);
					this.SendPropertyChanging();
					this._MatchDate = value;
					this.SendPropertyChanged("MatchDate");
					this.OnMatchDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="SmallInt NOT NULL")]
		public short Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Attempts", DbType="SmallInt NOT NULL")]
		public short Attempts
		{
			get
			{
				return this._Attempts;
			}
			set
			{
				if ((this._Attempts != value))
				{
					this.OnAttemptsChanging(value);
					this.SendPropertyChanging();
					this._Attempts = value;
					this.SendPropertyChanged("Attempts");
					this.OnAttemptsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DemoAnalyzerVersion", DbType="DateTime NOT NULL")]
		public System.DateTime DemoAnalyzerVersion
		{
			get
			{
				return this._DemoAnalyzerVersion;
			}
			set
			{
				if ((this._DemoAnalyzerVersion != value))
				{
					this.OnDemoAnalyzerVersionChanging(value);
					this.SendPropertyChanging();
					this._DemoAnalyzerVersion = value;
					this.SendPropertyChanged("DemoAnalyzerVersion");
					this.OnDemoAnalyzerVersionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PyAnalyzerVersion", DbType="DateTime NOT NULL")]
		public System.DateTime PyAnalyzerVersion
		{
			get
			{
				return this._PyAnalyzerVersion;
			}
			set
			{
				if ((this._PyAnalyzerVersion != value))
				{
					this.OnPyAnalyzerVersionChanging(value);
					this.SendPropertyChanging();
					this._PyAnalyzerVersion = value;
					this.SendPropertyChanged("PyAnalyzerVersion");
					this.OnPyAnalyzerVersionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FaceItMatchId", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string FaceItMatchId
		{
			get
			{
				return this._FaceItMatchId;
			}
			set
			{
				if ((this._FaceItMatchId != value))
				{
					this.OnFaceItMatchIdChanging(value);
					this.SendPropertyChanging();
					this._FaceItMatchId = value;
					this.SendPropertyChanged("FaceItMatchId");
					this.OnFaceItMatchIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DemoStats_MatchStats", Storage="_MatchStats", ThisKey="DemoId", OtherKey="DemoId")]
		public EntitySet<MatchStats> MatchStats
		{
			get
			{
				return this._MatchStats;
			}
			set
			{
				this._MatchStats.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_MatchStats(MatchStats entity)
		{
			this.SendPropertyChanging();
			entity.DemoStats = this;
		}
		
		private void detach_MatchStats(MatchStats entity)
		{
			this.SendPropertyChanging();
			entity.DemoStats = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Equipment")]
	public partial class Equipment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private System.DateTime _StartDate;
		
		private string _Source;
		
		private short _Type;
		
		private string _DisplayName;
		
		private string _InGameName;
		
		private double _WeaporArmorRatio;
		
		private int _Damage;
		
		private double _RangeModifier;
		
		private double _CycleTime;
		
		private double _Penetration;
		
		private int _KillAward;
		
		private int _MaxPlayerSpeed;
		
		private int _ClipSize;
		
		private int _Price;
		
		private int _Range;
		
		private string _WeaponClass;
		
		private double _FullAuto;
		
		private double _Bullets;
		
		private double _TracerFrequency;
		
		private double _FlinchVelocityModifierLarge;
		
		private double _FlinchVelocityModifierSmall;
		
		private double _Spread;
		
		private double _InaccuracyCrouch;
		
		private double _InaccuracyStand;
		
		private double _InaccuracyFire;
		
		private double _InaccuracyMove;
		
		private double _InaccuracyJump;
		
		private double _InaccuracyJumpIntial;
		
		private double _InaccuracyLand;
		
		private double _InaccuracyLadder;
		
		private double _RecoveryTimeCrouch;
		
		private double _RecoveryTimeCrouchFinal;
		
		private double _RecoveryTimeStand;
		
		private double _RecoveryTimeStandFinal;
		
		private double _RecoilAngleVariance;
		
		private double _RecoilMagnitude;
		
		private double _RecoilMagnitudeVariance;
		
		private double _SpreadAlt;
		
		private double _InaccuracyCrouchAlt;
		
		private double _InaccuracyStandAlt;
		
		private double _InaccuracyFireAlt;
		
		private double _InaccuracyMoveAlt;
		
		private double _InaccuracyJumpAlt;
		
		private double _InaccuracyLandAlt;
		
		private double _InaccuracyLadderAlt;
		
		private double _RecoilAngleVarianceAlt;
		
		private double _RecoilMagnitudeAlt;
		
		private double _RecoilMagnitudeVarianceAlt;
		
		private double _MaxPlayerSpeedAlt;
		
		private double _TracerFrequencyAlt;
		
		private double _ZoomFov;
		
		private double _ZoomFovAlt;
		
		private double _CycleTimeAlt;
		
		private double _CycletimeBurst;
		
		private double _TimeInbetweenBurstShots;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnStartDateChanging(System.DateTime value);
    partial void OnStartDateChanged();
    partial void OnSourceChanging(string value);
    partial void OnSourceChanged();
    partial void OnTypeChanging(short value);
    partial void OnTypeChanged();
    partial void OnDisplayNameChanging(string value);
    partial void OnDisplayNameChanged();
    partial void OnInGameNameChanging(string value);
    partial void OnInGameNameChanged();
    partial void OnWeaporArmorRatioChanging(double value);
    partial void OnWeaporArmorRatioChanged();
    partial void OnDamageChanging(int value);
    partial void OnDamageChanged();
    partial void OnRangeModifierChanging(double value);
    partial void OnRangeModifierChanged();
    partial void OnCycleTimeChanging(double value);
    partial void OnCycleTimeChanged();
    partial void OnPenetrationChanging(double value);
    partial void OnPenetrationChanged();
    partial void OnKillAwardChanging(int value);
    partial void OnKillAwardChanged();
    partial void OnMaxPlayerSpeedChanging(int value);
    partial void OnMaxPlayerSpeedChanged();
    partial void OnClipSizeChanging(int value);
    partial void OnClipSizeChanged();
    partial void OnPriceChanging(int value);
    partial void OnPriceChanged();
    partial void OnRangeChanging(int value);
    partial void OnRangeChanged();
    partial void OnWeaponClassChanging(string value);
    partial void OnWeaponClassChanged();
    partial void OnFullAutoChanging(double value);
    partial void OnFullAutoChanged();
    partial void OnBulletsChanging(double value);
    partial void OnBulletsChanged();
    partial void OnTracerFrequencyChanging(double value);
    partial void OnTracerFrequencyChanged();
    partial void OnFlinchVelocityModifierLargeChanging(double value);
    partial void OnFlinchVelocityModifierLargeChanged();
    partial void OnFlinchVelocityModifierSmallChanging(double value);
    partial void OnFlinchVelocityModifierSmallChanged();
    partial void OnSpreadChanging(double value);
    partial void OnSpreadChanged();
    partial void OnInaccuracyCrouchChanging(double value);
    partial void OnInaccuracyCrouchChanged();
    partial void OnInaccuracyStandChanging(double value);
    partial void OnInaccuracyStandChanged();
    partial void OnInaccuracyFireChanging(double value);
    partial void OnInaccuracyFireChanged();
    partial void OnInaccuracyMoveChanging(double value);
    partial void OnInaccuracyMoveChanged();
    partial void OnInaccuracyJumpChanging(double value);
    partial void OnInaccuracyJumpChanged();
    partial void OnInaccuracyJumpIntialChanging(double value);
    partial void OnInaccuracyJumpIntialChanged();
    partial void OnInaccuracyLandChanging(double value);
    partial void OnInaccuracyLandChanged();
    partial void OnInaccuracyLadderChanging(double value);
    partial void OnInaccuracyLadderChanged();
    partial void OnRecoveryTimeCrouchChanging(double value);
    partial void OnRecoveryTimeCrouchChanged();
    partial void OnRecoveryTimeCrouchFinalChanging(double value);
    partial void OnRecoveryTimeCrouchFinalChanged();
    partial void OnRecoveryTimeStandChanging(double value);
    partial void OnRecoveryTimeStandChanged();
    partial void OnRecoveryTimeStandFinalChanging(double value);
    partial void OnRecoveryTimeStandFinalChanged();
    partial void OnRecoilAngleVarianceChanging(double value);
    partial void OnRecoilAngleVarianceChanged();
    partial void OnRecoilMagnitudeChanging(double value);
    partial void OnRecoilMagnitudeChanged();
    partial void OnRecoilMagnitudeVarianceChanging(double value);
    partial void OnRecoilMagnitudeVarianceChanged();
    partial void OnSpreadAltChanging(double value);
    partial void OnSpreadAltChanged();
    partial void OnInaccuracyCrouchAltChanging(double value);
    partial void OnInaccuracyCrouchAltChanged();
    partial void OnInaccuracyStandAltChanging(double value);
    partial void OnInaccuracyStandAltChanged();
    partial void OnInaccuracyFireAltChanging(double value);
    partial void OnInaccuracyFireAltChanged();
    partial void OnInaccuracyMoveAltChanging(double value);
    partial void OnInaccuracyMoveAltChanged();
    partial void OnInaccuracyJumpAltChanging(double value);
    partial void OnInaccuracyJumpAltChanged();
    partial void OnInaccuracyLandAltChanging(double value);
    partial void OnInaccuracyLandAltChanged();
    partial void OnInaccuracyLadderAltChanging(double value);
    partial void OnInaccuracyLadderAltChanged();
    partial void OnRecoilAngleVarianceAltChanging(double value);
    partial void OnRecoilAngleVarianceAltChanged();
    partial void OnRecoilMagnitudeAltChanging(double value);
    partial void OnRecoilMagnitudeAltChanged();
    partial void OnRecoilMagnitudeVarianceAltChanging(double value);
    partial void OnRecoilMagnitudeVarianceAltChanged();
    partial void OnMaxPlayerSpeedAltChanging(double value);
    partial void OnMaxPlayerSpeedAltChanged();
    partial void OnTracerFrequencyAltChanging(double value);
    partial void OnTracerFrequencyAltChanged();
    partial void OnZoomFovChanging(double value);
    partial void OnZoomFovChanged();
    partial void OnZoomFovAltChanging(double value);
    partial void OnZoomFovAltChanged();
    partial void OnCycleTimeAltChanging(double value);
    partial void OnCycleTimeAltChanged();
    partial void OnCycletimeBurstChanging(double value);
    partial void OnCycletimeBurstChanged();
    partial void OnTimeInbetweenBurstShotsChanging(double value);
    partial void OnTimeInbetweenBurstShotsChanged();
    #endregion
		
		public Equipment()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StartDate", DbType="DateTime NOT NULL")]
		public System.DateTime StartDate
		{
			get
			{
				return this._StartDate;
			}
			set
			{
				if ((this._StartDate != value))
				{
					this.OnStartDateChanging(value);
					this.SendPropertyChanging();
					this._StartDate = value;
					this.SendPropertyChanged("StartDate");
					this.OnStartDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Source", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Source
		{
			get
			{
				return this._Source;
			}
			set
			{
				if ((this._Source != value))
				{
					this.OnSourceChanging(value);
					this.SendPropertyChanging();
					this._Source = value;
					this.SendPropertyChanged("Source");
					this.OnSourceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="SmallInt NOT NULL")]
		public short Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DisplayName", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string DisplayName
		{
			get
			{
				return this._DisplayName;
			}
			set
			{
				if ((this._DisplayName != value))
				{
					this.OnDisplayNameChanging(value);
					this.SendPropertyChanging();
					this._DisplayName = value;
					this.SendPropertyChanged("DisplayName");
					this.OnDisplayNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InGameName", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string InGameName
		{
			get
			{
				return this._InGameName;
			}
			set
			{
				if ((this._InGameName != value))
				{
					this.OnInGameNameChanging(value);
					this.SendPropertyChanging();
					this._InGameName = value;
					this.SendPropertyChanged("InGameName");
					this.OnInGameNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WeaporArmorRatio", DbType="Float NOT NULL")]
		public double WeaporArmorRatio
		{
			get
			{
				return this._WeaporArmorRatio;
			}
			set
			{
				if ((this._WeaporArmorRatio != value))
				{
					this.OnWeaporArmorRatioChanging(value);
					this.SendPropertyChanging();
					this._WeaporArmorRatio = value;
					this.SendPropertyChanged("WeaporArmorRatio");
					this.OnWeaporArmorRatioChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Damage", DbType="Int NOT NULL")]
		public int Damage
		{
			get
			{
				return this._Damage;
			}
			set
			{
				if ((this._Damage != value))
				{
					this.OnDamageChanging(value);
					this.SendPropertyChanging();
					this._Damage = value;
					this.SendPropertyChanged("Damage");
					this.OnDamageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RangeModifier", DbType="Float NOT NULL")]
		public double RangeModifier
		{
			get
			{
				return this._RangeModifier;
			}
			set
			{
				if ((this._RangeModifier != value))
				{
					this.OnRangeModifierChanging(value);
					this.SendPropertyChanging();
					this._RangeModifier = value;
					this.SendPropertyChanged("RangeModifier");
					this.OnRangeModifierChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CycleTime", DbType="Float NOT NULL")]
		public double CycleTime
		{
			get
			{
				return this._CycleTime;
			}
			set
			{
				if ((this._CycleTime != value))
				{
					this.OnCycleTimeChanging(value);
					this.SendPropertyChanging();
					this._CycleTime = value;
					this.SendPropertyChanged("CycleTime");
					this.OnCycleTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Penetration", DbType="Float NOT NULL")]
		public double Penetration
		{
			get
			{
				return this._Penetration;
			}
			set
			{
				if ((this._Penetration != value))
				{
					this.OnPenetrationChanging(value);
					this.SendPropertyChanging();
					this._Penetration = value;
					this.SendPropertyChanged("Penetration");
					this.OnPenetrationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_KillAward", DbType="Int NOT NULL")]
		public int KillAward
		{
			get
			{
				return this._KillAward;
			}
			set
			{
				if ((this._KillAward != value))
				{
					this.OnKillAwardChanging(value);
					this.SendPropertyChanging();
					this._KillAward = value;
					this.SendPropertyChanged("KillAward");
					this.OnKillAwardChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaxPlayerSpeed", DbType="Int NOT NULL")]
		public int MaxPlayerSpeed
		{
			get
			{
				return this._MaxPlayerSpeed;
			}
			set
			{
				if ((this._MaxPlayerSpeed != value))
				{
					this.OnMaxPlayerSpeedChanging(value);
					this.SendPropertyChanging();
					this._MaxPlayerSpeed = value;
					this.SendPropertyChanged("MaxPlayerSpeed");
					this.OnMaxPlayerSpeedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClipSize", DbType="Int NOT NULL")]
		public int ClipSize
		{
			get
			{
				return this._ClipSize;
			}
			set
			{
				if ((this._ClipSize != value))
				{
					this.OnClipSizeChanging(value);
					this.SendPropertyChanging();
					this._ClipSize = value;
					this.SendPropertyChanged("ClipSize");
					this.OnClipSizeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Price", DbType="Int NOT NULL")]
		public int Price
		{
			get
			{
				return this._Price;
			}
			set
			{
				if ((this._Price != value))
				{
					this.OnPriceChanging(value);
					this.SendPropertyChanging();
					this._Price = value;
					this.SendPropertyChanged("Price");
					this.OnPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Range", DbType="Int NOT NULL")]
		public int Range
		{
			get
			{
				return this._Range;
			}
			set
			{
				if ((this._Range != value))
				{
					this.OnRangeChanging(value);
					this.SendPropertyChanging();
					this._Range = value;
					this.SendPropertyChanged("Range");
					this.OnRangeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WeaponClass", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string WeaponClass
		{
			get
			{
				return this._WeaponClass;
			}
			set
			{
				if ((this._WeaponClass != value))
				{
					this.OnWeaponClassChanging(value);
					this.SendPropertyChanging();
					this._WeaponClass = value;
					this.SendPropertyChanged("WeaponClass");
					this.OnWeaponClassChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FullAuto", DbType="Float NOT NULL")]
		public double FullAuto
		{
			get
			{
				return this._FullAuto;
			}
			set
			{
				if ((this._FullAuto != value))
				{
					this.OnFullAutoChanging(value);
					this.SendPropertyChanging();
					this._FullAuto = value;
					this.SendPropertyChanged("FullAuto");
					this.OnFullAutoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Bullets", DbType="Float NOT NULL")]
		public double Bullets
		{
			get
			{
				return this._Bullets;
			}
			set
			{
				if ((this._Bullets != value))
				{
					this.OnBulletsChanging(value);
					this.SendPropertyChanging();
					this._Bullets = value;
					this.SendPropertyChanged("Bullets");
					this.OnBulletsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TracerFrequency", DbType="Float NOT NULL")]
		public double TracerFrequency
		{
			get
			{
				return this._TracerFrequency;
			}
			set
			{
				if ((this._TracerFrequency != value))
				{
					this.OnTracerFrequencyChanging(value);
					this.SendPropertyChanging();
					this._TracerFrequency = value;
					this.SendPropertyChanged("TracerFrequency");
					this.OnTracerFrequencyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FlinchVelocityModifierLarge", DbType="Float NOT NULL")]
		public double FlinchVelocityModifierLarge
		{
			get
			{
				return this._FlinchVelocityModifierLarge;
			}
			set
			{
				if ((this._FlinchVelocityModifierLarge != value))
				{
					this.OnFlinchVelocityModifierLargeChanging(value);
					this.SendPropertyChanging();
					this._FlinchVelocityModifierLarge = value;
					this.SendPropertyChanged("FlinchVelocityModifierLarge");
					this.OnFlinchVelocityModifierLargeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FlinchVelocityModifierSmall", DbType="Float NOT NULL")]
		public double FlinchVelocityModifierSmall
		{
			get
			{
				return this._FlinchVelocityModifierSmall;
			}
			set
			{
				if ((this._FlinchVelocityModifierSmall != value))
				{
					this.OnFlinchVelocityModifierSmallChanging(value);
					this.SendPropertyChanging();
					this._FlinchVelocityModifierSmall = value;
					this.SendPropertyChanged("FlinchVelocityModifierSmall");
					this.OnFlinchVelocityModifierSmallChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Spread", DbType="Float NOT NULL")]
		public double Spread
		{
			get
			{
				return this._Spread;
			}
			set
			{
				if ((this._Spread != value))
				{
					this.OnSpreadChanging(value);
					this.SendPropertyChanging();
					this._Spread = value;
					this.SendPropertyChanged("Spread");
					this.OnSpreadChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InaccuracyCrouch", DbType="Float NOT NULL")]
		public double InaccuracyCrouch
		{
			get
			{
				return this._InaccuracyCrouch;
			}
			set
			{
				if ((this._InaccuracyCrouch != value))
				{
					this.OnInaccuracyCrouchChanging(value);
					this.SendPropertyChanging();
					this._InaccuracyCrouch = value;
					this.SendPropertyChanged("InaccuracyCrouch");
					this.OnInaccuracyCrouchChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InaccuracyStand", DbType="Float NOT NULL")]
		public double InaccuracyStand
		{
			get
			{
				return this._InaccuracyStand;
			}
			set
			{
				if ((this._InaccuracyStand != value))
				{
					this.OnInaccuracyStandChanging(value);
					this.SendPropertyChanging();
					this._InaccuracyStand = value;
					this.SendPropertyChanged("InaccuracyStand");
					this.OnInaccuracyStandChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InaccuracyFire", DbType="Float NOT NULL")]
		public double InaccuracyFire
		{
			get
			{
				return this._InaccuracyFire;
			}
			set
			{
				if ((this._InaccuracyFire != value))
				{
					this.OnInaccuracyFireChanging(value);
					this.SendPropertyChanging();
					this._InaccuracyFire = value;
					this.SendPropertyChanged("InaccuracyFire");
					this.OnInaccuracyFireChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InaccuracyMove", DbType="Float NOT NULL")]
		public double InaccuracyMove
		{
			get
			{
				return this._InaccuracyMove;
			}
			set
			{
				if ((this._InaccuracyMove != value))
				{
					this.OnInaccuracyMoveChanging(value);
					this.SendPropertyChanging();
					this._InaccuracyMove = value;
					this.SendPropertyChanged("InaccuracyMove");
					this.OnInaccuracyMoveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InaccuracyJump", DbType="Float NOT NULL")]
		public double InaccuracyJump
		{
			get
			{
				return this._InaccuracyJump;
			}
			set
			{
				if ((this._InaccuracyJump != value))
				{
					this.OnInaccuracyJumpChanging(value);
					this.SendPropertyChanging();
					this._InaccuracyJump = value;
					this.SendPropertyChanged("InaccuracyJump");
					this.OnInaccuracyJumpChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InaccuracyJumpIntial", DbType="Float NOT NULL")]
		public double InaccuracyJumpIntial
		{
			get
			{
				return this._InaccuracyJumpIntial;
			}
			set
			{
				if ((this._InaccuracyJumpIntial != value))
				{
					this.OnInaccuracyJumpIntialChanging(value);
					this.SendPropertyChanging();
					this._InaccuracyJumpIntial = value;
					this.SendPropertyChanged("InaccuracyJumpIntial");
					this.OnInaccuracyJumpIntialChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InaccuracyLand", DbType="Float NOT NULL")]
		public double InaccuracyLand
		{
			get
			{
				return this._InaccuracyLand;
			}
			set
			{
				if ((this._InaccuracyLand != value))
				{
					this.OnInaccuracyLandChanging(value);
					this.SendPropertyChanging();
					this._InaccuracyLand = value;
					this.SendPropertyChanged("InaccuracyLand");
					this.OnInaccuracyLandChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InaccuracyLadder", DbType="Float NOT NULL")]
		public double InaccuracyLadder
		{
			get
			{
				return this._InaccuracyLadder;
			}
			set
			{
				if ((this._InaccuracyLadder != value))
				{
					this.OnInaccuracyLadderChanging(value);
					this.SendPropertyChanging();
					this._InaccuracyLadder = value;
					this.SendPropertyChanged("InaccuracyLadder");
					this.OnInaccuracyLadderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RecoveryTimeCrouch", DbType="Float NOT NULL")]
		public double RecoveryTimeCrouch
		{
			get
			{
				return this._RecoveryTimeCrouch;
			}
			set
			{
				if ((this._RecoveryTimeCrouch != value))
				{
					this.OnRecoveryTimeCrouchChanging(value);
					this.SendPropertyChanging();
					this._RecoveryTimeCrouch = value;
					this.SendPropertyChanged("RecoveryTimeCrouch");
					this.OnRecoveryTimeCrouchChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RecoveryTimeCrouchFinal", DbType="Float NOT NULL")]
		public double RecoveryTimeCrouchFinal
		{
			get
			{
				return this._RecoveryTimeCrouchFinal;
			}
			set
			{
				if ((this._RecoveryTimeCrouchFinal != value))
				{
					this.OnRecoveryTimeCrouchFinalChanging(value);
					this.SendPropertyChanging();
					this._RecoveryTimeCrouchFinal = value;
					this.SendPropertyChanged("RecoveryTimeCrouchFinal");
					this.OnRecoveryTimeCrouchFinalChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RecoveryTimeStand", DbType="Float NOT NULL")]
		public double RecoveryTimeStand
		{
			get
			{
				return this._RecoveryTimeStand;
			}
			set
			{
				if ((this._RecoveryTimeStand != value))
				{
					this.OnRecoveryTimeStandChanging(value);
					this.SendPropertyChanging();
					this._RecoveryTimeStand = value;
					this.SendPropertyChanged("RecoveryTimeStand");
					this.OnRecoveryTimeStandChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RecoveryTimeStandFinal", DbType="Float NOT NULL")]
		public double RecoveryTimeStandFinal
		{
			get
			{
				return this._RecoveryTimeStandFinal;
			}
			set
			{
				if ((this._RecoveryTimeStandFinal != value))
				{
					this.OnRecoveryTimeStandFinalChanging(value);
					this.SendPropertyChanging();
					this._RecoveryTimeStandFinal = value;
					this.SendPropertyChanged("RecoveryTimeStandFinal");
					this.OnRecoveryTimeStandFinalChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RecoilAngleVariance", DbType="Float NOT NULL")]
		public double RecoilAngleVariance
		{
			get
			{
				return this._RecoilAngleVariance;
			}
			set
			{
				if ((this._RecoilAngleVariance != value))
				{
					this.OnRecoilAngleVarianceChanging(value);
					this.SendPropertyChanging();
					this._RecoilAngleVariance = value;
					this.SendPropertyChanged("RecoilAngleVariance");
					this.OnRecoilAngleVarianceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RecoilMagnitude", DbType="Float NOT NULL")]
		public double RecoilMagnitude
		{
			get
			{
				return this._RecoilMagnitude;
			}
			set
			{
				if ((this._RecoilMagnitude != value))
				{
					this.OnRecoilMagnitudeChanging(value);
					this.SendPropertyChanging();
					this._RecoilMagnitude = value;
					this.SendPropertyChanged("RecoilMagnitude");
					this.OnRecoilMagnitudeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RecoilMagnitudeVariance", DbType="Float NOT NULL")]
		public double RecoilMagnitudeVariance
		{
			get
			{
				return this._RecoilMagnitudeVariance;
			}
			set
			{
				if ((this._RecoilMagnitudeVariance != value))
				{
					this.OnRecoilMagnitudeVarianceChanging(value);
					this.SendPropertyChanging();
					this._RecoilMagnitudeVariance = value;
					this.SendPropertyChanged("RecoilMagnitudeVariance");
					this.OnRecoilMagnitudeVarianceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SpreadAlt", DbType="Float NOT NULL")]
		public double SpreadAlt
		{
			get
			{
				return this._SpreadAlt;
			}
			set
			{
				if ((this._SpreadAlt != value))
				{
					this.OnSpreadAltChanging(value);
					this.SendPropertyChanging();
					this._SpreadAlt = value;
					this.SendPropertyChanged("SpreadAlt");
					this.OnSpreadAltChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InaccuracyCrouchAlt", DbType="Float NOT NULL")]
		public double InaccuracyCrouchAlt
		{
			get
			{
				return this._InaccuracyCrouchAlt;
			}
			set
			{
				if ((this._InaccuracyCrouchAlt != value))
				{
					this.OnInaccuracyCrouchAltChanging(value);
					this.SendPropertyChanging();
					this._InaccuracyCrouchAlt = value;
					this.SendPropertyChanged("InaccuracyCrouchAlt");
					this.OnInaccuracyCrouchAltChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InaccuracyStandAlt", DbType="Float NOT NULL")]
		public double InaccuracyStandAlt
		{
			get
			{
				return this._InaccuracyStandAlt;
			}
			set
			{
				if ((this._InaccuracyStandAlt != value))
				{
					this.OnInaccuracyStandAltChanging(value);
					this.SendPropertyChanging();
					this._InaccuracyStandAlt = value;
					this.SendPropertyChanged("InaccuracyStandAlt");
					this.OnInaccuracyStandAltChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InaccuracyFireAlt", DbType="Float NOT NULL")]
		public double InaccuracyFireAlt
		{
			get
			{
				return this._InaccuracyFireAlt;
			}
			set
			{
				if ((this._InaccuracyFireAlt != value))
				{
					this.OnInaccuracyFireAltChanging(value);
					this.SendPropertyChanging();
					this._InaccuracyFireAlt = value;
					this.SendPropertyChanged("InaccuracyFireAlt");
					this.OnInaccuracyFireAltChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InaccuracyMoveAlt", DbType="Float NOT NULL")]
		public double InaccuracyMoveAlt
		{
			get
			{
				return this._InaccuracyMoveAlt;
			}
			set
			{
				if ((this._InaccuracyMoveAlt != value))
				{
					this.OnInaccuracyMoveAltChanging(value);
					this.SendPropertyChanging();
					this._InaccuracyMoveAlt = value;
					this.SendPropertyChanged("InaccuracyMoveAlt");
					this.OnInaccuracyMoveAltChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InaccuracyJumpAlt", DbType="Float NOT NULL")]
		public double InaccuracyJumpAlt
		{
			get
			{
				return this._InaccuracyJumpAlt;
			}
			set
			{
				if ((this._InaccuracyJumpAlt != value))
				{
					this.OnInaccuracyJumpAltChanging(value);
					this.SendPropertyChanging();
					this._InaccuracyJumpAlt = value;
					this.SendPropertyChanged("InaccuracyJumpAlt");
					this.OnInaccuracyJumpAltChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InaccuracyLandAlt", DbType="Float NOT NULL")]
		public double InaccuracyLandAlt
		{
			get
			{
				return this._InaccuracyLandAlt;
			}
			set
			{
				if ((this._InaccuracyLandAlt != value))
				{
					this.OnInaccuracyLandAltChanging(value);
					this.SendPropertyChanging();
					this._InaccuracyLandAlt = value;
					this.SendPropertyChanged("InaccuracyLandAlt");
					this.OnInaccuracyLandAltChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InaccuracyLadderAlt", DbType="Float NOT NULL")]
		public double InaccuracyLadderAlt
		{
			get
			{
				return this._InaccuracyLadderAlt;
			}
			set
			{
				if ((this._InaccuracyLadderAlt != value))
				{
					this.OnInaccuracyLadderAltChanging(value);
					this.SendPropertyChanging();
					this._InaccuracyLadderAlt = value;
					this.SendPropertyChanged("InaccuracyLadderAlt");
					this.OnInaccuracyLadderAltChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RecoilAngleVarianceAlt", DbType="Float NOT NULL")]
		public double RecoilAngleVarianceAlt
		{
			get
			{
				return this._RecoilAngleVarianceAlt;
			}
			set
			{
				if ((this._RecoilAngleVarianceAlt != value))
				{
					this.OnRecoilAngleVarianceAltChanging(value);
					this.SendPropertyChanging();
					this._RecoilAngleVarianceAlt = value;
					this.SendPropertyChanged("RecoilAngleVarianceAlt");
					this.OnRecoilAngleVarianceAltChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RecoilMagnitudeAlt", DbType="Float NOT NULL")]
		public double RecoilMagnitudeAlt
		{
			get
			{
				return this._RecoilMagnitudeAlt;
			}
			set
			{
				if ((this._RecoilMagnitudeAlt != value))
				{
					this.OnRecoilMagnitudeAltChanging(value);
					this.SendPropertyChanging();
					this._RecoilMagnitudeAlt = value;
					this.SendPropertyChanged("RecoilMagnitudeAlt");
					this.OnRecoilMagnitudeAltChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RecoilMagnitudeVarianceAlt", DbType="Float NOT NULL")]
		public double RecoilMagnitudeVarianceAlt
		{
			get
			{
				return this._RecoilMagnitudeVarianceAlt;
			}
			set
			{
				if ((this._RecoilMagnitudeVarianceAlt != value))
				{
					this.OnRecoilMagnitudeVarianceAltChanging(value);
					this.SendPropertyChanging();
					this._RecoilMagnitudeVarianceAlt = value;
					this.SendPropertyChanged("RecoilMagnitudeVarianceAlt");
					this.OnRecoilMagnitudeVarianceAltChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaxPlayerSpeedAlt", DbType="Float NOT NULL")]
		public double MaxPlayerSpeedAlt
		{
			get
			{
				return this._MaxPlayerSpeedAlt;
			}
			set
			{
				if ((this._MaxPlayerSpeedAlt != value))
				{
					this.OnMaxPlayerSpeedAltChanging(value);
					this.SendPropertyChanging();
					this._MaxPlayerSpeedAlt = value;
					this.SendPropertyChanged("MaxPlayerSpeedAlt");
					this.OnMaxPlayerSpeedAltChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TracerFrequencyAlt", DbType="Float NOT NULL")]
		public double TracerFrequencyAlt
		{
			get
			{
				return this._TracerFrequencyAlt;
			}
			set
			{
				if ((this._TracerFrequencyAlt != value))
				{
					this.OnTracerFrequencyAltChanging(value);
					this.SendPropertyChanging();
					this._TracerFrequencyAlt = value;
					this.SendPropertyChanged("TracerFrequencyAlt");
					this.OnTracerFrequencyAltChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ZoomFov", DbType="Float NOT NULL")]
		public double ZoomFov
		{
			get
			{
				return this._ZoomFov;
			}
			set
			{
				if ((this._ZoomFov != value))
				{
					this.OnZoomFovChanging(value);
					this.SendPropertyChanging();
					this._ZoomFov = value;
					this.SendPropertyChanged("ZoomFov");
					this.OnZoomFovChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ZoomFovAlt", DbType="Float NOT NULL")]
		public double ZoomFovAlt
		{
			get
			{
				return this._ZoomFovAlt;
			}
			set
			{
				if ((this._ZoomFovAlt != value))
				{
					this.OnZoomFovAltChanging(value);
					this.SendPropertyChanging();
					this._ZoomFovAlt = value;
					this.SendPropertyChanged("ZoomFovAlt");
					this.OnZoomFovAltChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CycleTimeAlt", DbType="Float NOT NULL")]
		public double CycleTimeAlt
		{
			get
			{
				return this._CycleTimeAlt;
			}
			set
			{
				if ((this._CycleTimeAlt != value))
				{
					this.OnCycleTimeAltChanging(value);
					this.SendPropertyChanging();
					this._CycleTimeAlt = value;
					this.SendPropertyChanged("CycleTimeAlt");
					this.OnCycleTimeAltChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CycletimeBurst", DbType="Float NOT NULL")]
		public double CycletimeBurst
		{
			get
			{
				return this._CycletimeBurst;
			}
			set
			{
				if ((this._CycletimeBurst != value))
				{
					this.OnCycletimeBurstChanging(value);
					this.SendPropertyChanging();
					this._CycletimeBurst = value;
					this.SendPropertyChanged("CycletimeBurst");
					this.OnCycletimeBurstChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TimeInbetweenBurstShots", DbType="Float NOT NULL")]
		public double TimeInbetweenBurstShots
		{
			get
			{
				return this._TimeInbetweenBurstShots;
			}
			set
			{
				if ((this._TimeInbetweenBurstShots != value))
				{
					this.OnTimeInbetweenBurstShotsChanging(value);
					this.SendPropertyChanging();
					this._TimeInbetweenBurstShots = value;
					this.SendPropertyChanged("TimeInbetweenBurstShots");
					this.OnTimeInbetweenBurstShotsChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.FireNade")]
	public partial class FireNade : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _MatchId;
		
		private long _GrenadeId;
		
		private short _Round;
		
		private int _Time;
		
		private int _Tick;
		
		private long _PlayerId;
		
		private double _PlayerPosX;
		
		private double _PlayerPosY;
		
		private double _PlayerPosZ;
		
		private double _PlayerViewX;
		
		private double _PlayerViewY;
		
		private bool _IsCT;
		
		private double _GrenadePosX;
		
		private double _GrenadePosY;
		
		private double _GrenadePosZ;
		
		private byte _NadeType;
		
		private int _DetonationZoneByTeam;
		
		private string _Trajectory;
		
		private bool _IsMolotov;
		
		private EntitySet<Damage> _Damage;
		
		private EntityRef<MatchStats> _MatchStats;
		
		private EntityRef<PlayerMatchStats> _PlayerMatchStats;
		
		private EntityRef<PlayerRoundStats> _PlayerRoundStats;
		
		private EntityRef<RoundStats> _RoundStats;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMatchIdChanging(long value);
    partial void OnMatchIdChanged();
    partial void OnGrenadeIdChanging(long value);
    partial void OnGrenadeIdChanged();
    partial void OnRoundChanging(short value);
    partial void OnRoundChanged();
    partial void OnTimeChanging(int value);
    partial void OnTimeChanged();
    partial void OnTickChanging(int value);
    partial void OnTickChanged();
    partial void OnPlayerIdChanging(long value);
    partial void OnPlayerIdChanged();
    partial void OnPlayerPosXChanging(double value);
    partial void OnPlayerPosXChanged();
    partial void OnPlayerPosYChanging(double value);
    partial void OnPlayerPosYChanged();
    partial void OnPlayerPosZChanging(double value);
    partial void OnPlayerPosZChanged();
    partial void OnPlayerViewXChanging(double value);
    partial void OnPlayerViewXChanged();
    partial void OnPlayerViewYChanging(double value);
    partial void OnPlayerViewYChanged();
    partial void OnIsCTChanging(bool value);
    partial void OnIsCTChanged();
    partial void OnGrenadePosXChanging(double value);
    partial void OnGrenadePosXChanged();
    partial void OnGrenadePosYChanging(double value);
    partial void OnGrenadePosYChanged();
    partial void OnGrenadePosZChanging(double value);
    partial void OnGrenadePosZChanged();
    partial void OnNadeTypeChanging(byte value);
    partial void OnNadeTypeChanged();
    partial void OnDetonationZoneByTeamChanging(int value);
    partial void OnDetonationZoneByTeamChanged();
    partial void OnTrajectoryChanging(string value);
    partial void OnTrajectoryChanged();
    partial void OnIsMolotovChanging(bool value);
    partial void OnIsMolotovChanged();
    #endregion
		
		public FireNade()
		{
			this._Damage = new EntitySet<Damage>(new Action<Damage>(this.attach_Damage), new Action<Damage>(this.detach_Damage));
			this._MatchStats = default(EntityRef<MatchStats>);
			this._PlayerMatchStats = default(EntityRef<PlayerMatchStats>);
			this._PlayerRoundStats = default(EntityRef<PlayerRoundStats>);
			this._RoundStats = default(EntityRef<RoundStats>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MatchId", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long MatchId
		{
			get
			{
				return this._MatchId;
			}
			set
			{
				if ((this._MatchId != value))
				{
					if ((((this._MatchStats.HasLoadedOrAssignedValue || this._PlayerMatchStats.HasLoadedOrAssignedValue) 
								|| this._PlayerRoundStats.HasLoadedOrAssignedValue) 
								|| this._RoundStats.HasLoadedOrAssignedValue))
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMatchIdChanging(value);
					this.SendPropertyChanging();
					this._MatchId = value;
					this.SendPropertyChanged("MatchId");
					this.OnMatchIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GrenadeId", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long GrenadeId
		{
			get
			{
				return this._GrenadeId;
			}
			set
			{
				if ((this._GrenadeId != value))
				{
					this.OnGrenadeIdChanging(value);
					this.SendPropertyChanging();
					this._GrenadeId = value;
					this.SendPropertyChanged("GrenadeId");
					this.OnGrenadeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Round", DbType="SmallInt NOT NULL")]
		public short Round
		{
			get
			{
				return this._Round;
			}
			set
			{
				if ((this._Round != value))
				{
					if ((this._PlayerRoundStats.HasLoadedOrAssignedValue || this._RoundStats.HasLoadedOrAssignedValue))
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRoundChanging(value);
					this.SendPropertyChanging();
					this._Round = value;
					this.SendPropertyChanged("Round");
					this.OnRoundChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Time", DbType="Int NOT NULL")]
		public int Time
		{
			get
			{
				return this._Time;
			}
			set
			{
				if ((this._Time != value))
				{
					this.OnTimeChanging(value);
					this.SendPropertyChanging();
					this._Time = value;
					this.SendPropertyChanged("Time");
					this.OnTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Tick", DbType="Int NOT NULL")]
		public int Tick
		{
			get
			{
				return this._Tick;
			}
			set
			{
				if ((this._Tick != value))
				{
					this.OnTickChanging(value);
					this.SendPropertyChanging();
					this._Tick = value;
					this.SendPropertyChanged("Tick");
					this.OnTickChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlayerId", DbType="BigInt NOT NULL")]
		public long PlayerId
		{
			get
			{
				return this._PlayerId;
			}
			set
			{
				if ((this._PlayerId != value))
				{
					if ((this._PlayerMatchStats.HasLoadedOrAssignedValue || this._PlayerRoundStats.HasLoadedOrAssignedValue))
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPlayerIdChanging(value);
					this.SendPropertyChanging();
					this._PlayerId = value;
					this.SendPropertyChanged("PlayerId");
					this.OnPlayerIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlayerPosX", DbType="Float NOT NULL")]
		public double PlayerPosX
		{
			get
			{
				return this._PlayerPosX;
			}
			set
			{
				if ((this._PlayerPosX != value))
				{
					this.OnPlayerPosXChanging(value);
					this.SendPropertyChanging();
					this._PlayerPosX = value;
					this.SendPropertyChanged("PlayerPosX");
					this.OnPlayerPosXChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlayerPosY", DbType="Float NOT NULL")]
		public double PlayerPosY
		{
			get
			{
				return this._PlayerPosY;
			}
			set
			{
				if ((this._PlayerPosY != value))
				{
					this.OnPlayerPosYChanging(value);
					this.SendPropertyChanging();
					this._PlayerPosY = value;
					this.SendPropertyChanged("PlayerPosY");
					this.OnPlayerPosYChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlayerPosZ", DbType="Float NOT NULL")]
		public double PlayerPosZ
		{
			get
			{
				return this._PlayerPosZ;
			}
			set
			{
				if ((this._PlayerPosZ != value))
				{
					this.OnPlayerPosZChanging(value);
					this.SendPropertyChanging();
					this._PlayerPosZ = value;
					this.SendPropertyChanged("PlayerPosZ");
					this.OnPlayerPosZChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlayerViewX", DbType="Float NOT NULL")]
		public double PlayerViewX
		{
			get
			{
				return this._PlayerViewX;
			}
			set
			{
				if ((this._PlayerViewX != value))
				{
					this.OnPlayerViewXChanging(value);
					this.SendPropertyChanging();
					this._PlayerViewX = value;
					this.SendPropertyChanged("PlayerViewX");
					this.OnPlayerViewXChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlayerViewY", DbType="Float NOT NULL")]
		public double PlayerViewY
		{
			get
			{
				return this._PlayerViewY;
			}
			set
			{
				if ((this._PlayerViewY != value))
				{
					this.OnPlayerViewYChanging(value);
					this.SendPropertyChanging();
					this._PlayerViewY = value;
					this.SendPropertyChanged("PlayerViewY");
					this.OnPlayerViewYChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsCT", DbType="Bit NOT NULL")]
		public bool IsCT
		{
			get
			{
				return this._IsCT;
			}
			set
			{
				if ((this._IsCT != value))
				{
					this.OnIsCTChanging(value);
					this.SendPropertyChanging();
					this._IsCT = value;
					this.SendPropertyChanged("IsCT");
					this.OnIsCTChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GrenadePosX", DbType="Float NOT NULL")]
		public double GrenadePosX
		{
			get
			{
				return this._GrenadePosX;
			}
			set
			{
				if ((this._GrenadePosX != value))
				{
					this.OnGrenadePosXChanging(value);
					this.SendPropertyChanging();
					this._GrenadePosX = value;
					this.SendPropertyChanged("GrenadePosX");
					this.OnGrenadePosXChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GrenadePosY", DbType="Float NOT NULL")]
		public double GrenadePosY
		{
			get
			{
				return this._GrenadePosY;
			}
			set
			{
				if ((this._GrenadePosY != value))
				{
					this.OnGrenadePosYChanging(value);
					this.SendPropertyChanging();
					this._GrenadePosY = value;
					this.SendPropertyChanged("GrenadePosY");
					this.OnGrenadePosYChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GrenadePosZ", DbType="Float NOT NULL")]
		public double GrenadePosZ
		{
			get
			{
				return this._GrenadePosZ;
			}
			set
			{
				if ((this._GrenadePosZ != value))
				{
					this.OnGrenadePosZChanging(value);
					this.SendPropertyChanging();
					this._GrenadePosZ = value;
					this.SendPropertyChanged("GrenadePosZ");
					this.OnGrenadePosZChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NadeType", DbType="TinyInt NOT NULL")]
		public byte NadeType
		{
			get
			{
				return this._NadeType;
			}
			set
			{
				if ((this._NadeType != value))
				{
					this.OnNadeTypeChanging(value);
					this.SendPropertyChanging();
					this._NadeType = value;
					this.SendPropertyChanged("NadeType");
					this.OnNadeTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DetonationZoneByTeam", DbType="Int NOT NULL")]
		public int DetonationZoneByTeam
		{
			get
			{
				return this._DetonationZoneByTeam;
			}
			set
			{
				if ((this._DetonationZoneByTeam != value))
				{
					this.OnDetonationZoneByTeamChanging(value);
					this.SendPropertyChanging();
					this._DetonationZoneByTeam = value;
					this.SendPropertyChanged("DetonationZoneByTeam");
					this.OnDetonationZoneByTeamChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Trajectory", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Trajectory
		{
			get
			{
				return this._Trajectory;
			}
			set
			{
				if ((this._Trajectory != value))
				{
					this.OnTrajectoryChanging(value);
					this.SendPropertyChanging();
					this._Trajectory = value;
					this.SendPropertyChanged("Trajectory");
					this.OnTrajectoryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsMolotov", DbType="Bit NOT NULL")]
		public bool IsMolotov
		{
			get
			{
				return this._IsMolotov;
			}
			set
			{
				if ((this._IsMolotov != value))
				{
					this.OnIsMolotovChanging(value);
					this.SendPropertyChanging();
					this._IsMolotov = value;
					this.SendPropertyChanged("IsMolotov");
					this.OnIsMolotovChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FireNade_Damage", Storage="_Damage", ThisKey="MatchId,GrenadeId", OtherKey="MatchId,FireNadeId")]
		public EntitySet<Damage> Damage
		{
			get
			{
				return this._Damage;
			}
			set
			{
				this._Damage.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MatchStats_FireNade", Storage="_MatchStats", ThisKey="MatchId", OtherKey="MatchId", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public MatchStats MatchStats
		{
			get
			{
				return this._MatchStats.Entity;
			}
			set
			{
				MatchStats previousValue = this._MatchStats.Entity;
				if (((previousValue != value) 
							|| (this._MatchStats.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MatchStats.Entity = null;
						previousValue.FireNade.Remove(this);
					}
					this._MatchStats.Entity = value;
					if ((value != null))
					{
						value.FireNade.Add(this);
						this._MatchId = value.MatchId;
					}
					else
					{
						this._MatchId = default(long);
					}
					this.SendPropertyChanged("MatchStats");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PlayerMatchStats_FireNade", Storage="_PlayerMatchStats", ThisKey="MatchId,PlayerId", OtherKey="MatchId,SteamId", IsForeignKey=true)]
		public PlayerMatchStats PlayerMatchStats
		{
			get
			{
				return this._PlayerMatchStats.Entity;
			}
			set
			{
				PlayerMatchStats previousValue = this._PlayerMatchStats.Entity;
				if (((previousValue != value) 
							|| (this._PlayerMatchStats.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PlayerMatchStats.Entity = null;
						previousValue.FireNade.Remove(this);
					}
					this._PlayerMatchStats.Entity = value;
					if ((value != null))
					{
						value.FireNade.Add(this);
						this._MatchId = value.MatchId;
						this._PlayerId = value.SteamId;
					}
					else
					{
						this._MatchId = default(long);
						this._PlayerId = default(long);
					}
					this.SendPropertyChanged("PlayerMatchStats");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PlayerRoundStats_FireNade", Storage="_PlayerRoundStats", ThisKey="MatchId,Round,PlayerId", OtherKey="MatchId,Round,PlayerId", IsForeignKey=true)]
		public PlayerRoundStats PlayerRoundStats
		{
			get
			{
				return this._PlayerRoundStats.Entity;
			}
			set
			{
				PlayerRoundStats previousValue = this._PlayerRoundStats.Entity;
				if (((previousValue != value) 
							|| (this._PlayerRoundStats.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PlayerRoundStats.Entity = null;
						previousValue.FireNade.Remove(this);
					}
					this._PlayerRoundStats.Entity = value;
					if ((value != null))
					{
						value.FireNade.Add(this);
						this._MatchId = value.MatchId;
						this._Round = value.Round;
						this._PlayerId = value.PlayerId;
					}
					else
					{
						this._MatchId = default(long);
						this._Round = default(short);
						this._PlayerId = default(long);
					}
					this.SendPropertyChanged("PlayerRoundStats");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RoundStats_FireNade", Storage="_RoundStats", ThisKey="MatchId,Round", OtherKey="MatchId,Round", IsForeignKey=true)]
		public RoundStats RoundStats
		{
			get
			{
				return this._RoundStats.Entity;
			}
			set
			{
				RoundStats previousValue = this._RoundStats.Entity;
				if (((previousValue != value) 
							|| (this._RoundStats.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._RoundStats.Entity = null;
						previousValue.FireNade.Remove(this);
					}
					this._RoundStats.Entity = value;
					if ((value != null))
					{
						value.FireNade.Add(this);
						this._MatchId = value.MatchId;
						this._Round = value.Round;
					}
					else
					{
						this._MatchId = default(long);
						this._Round = default(short);
					}
					this.SendPropertyChanged("RoundStats");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Damage(Damage entity)
		{
			this.SendPropertyChanging();
			entity.FireNade = this;
		}
		
		private void detach_Damage(Damage entity)
		{
			this.SendPropertyChanging();
			entity.FireNade = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Flash")]
	public partial class Flash : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _MatchId;
		
		private long _GrenadeId;
		
		private short _Round;
		
		private int _Time;
		
		private int _Tick;
		
		private long _PlayerId;
		
		private double _PlayerPosX;
		
		private double _PlayerPosY;
		
		private double _PlayerPosZ;
		
		private double _PlayerViewX;
		
		private double _PlayerViewY;
		
		private bool _IsCT;
		
		private double _GrenadePosX;
		
		private double _GrenadePosY;
		
		private double _GrenadePosZ;
		
		private int _DetonationZoneByTeam;
		
		private string _Trajectory;
		
		private EntitySet<Flashed> _Flashed;
		
		private EntityRef<MatchStats> _MatchStats;
		
		private EntityRef<PlayerMatchStats> _PlayerMatchStats;
		
		private EntityRef<PlayerRoundStats> _PlayerRoundStats;
		
		private EntityRef<RoundStats> _RoundStats;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMatchIdChanging(long value);
    partial void OnMatchIdChanged();
    partial void OnGrenadeIdChanging(long value);
    partial void OnGrenadeIdChanged();
    partial void OnRoundChanging(short value);
    partial void OnRoundChanged();
    partial void OnTimeChanging(int value);
    partial void OnTimeChanged();
    partial void OnTickChanging(int value);
    partial void OnTickChanged();
    partial void OnPlayerIdChanging(long value);
    partial void OnPlayerIdChanged();
    partial void OnPlayerPosXChanging(double value);
    partial void OnPlayerPosXChanged();
    partial void OnPlayerPosYChanging(double value);
    partial void OnPlayerPosYChanged();
    partial void OnPlayerPosZChanging(double value);
    partial void OnPlayerPosZChanged();
    partial void OnPlayerViewXChanging(double value);
    partial void OnPlayerViewXChanged();
    partial void OnPlayerViewYChanging(double value);
    partial void OnPlayerViewYChanged();
    partial void OnIsCTChanging(bool value);
    partial void OnIsCTChanged();
    partial void OnGrenadePosXChanging(double value);
    partial void OnGrenadePosXChanged();
    partial void OnGrenadePosYChanging(double value);
    partial void OnGrenadePosYChanged();
    partial void OnGrenadePosZChanging(double value);
    partial void OnGrenadePosZChanged();
    partial void OnDetonationZoneByTeamChanging(int value);
    partial void OnDetonationZoneByTeamChanged();
    partial void OnTrajectoryChanging(string value);
    partial void OnTrajectoryChanged();
    #endregion
		
		public Flash()
		{
			this._Flashed = new EntitySet<Flashed>(new Action<Flashed>(this.attach_Flashed), new Action<Flashed>(this.detach_Flashed));
			this._MatchStats = default(EntityRef<MatchStats>);
			this._PlayerMatchStats = default(EntityRef<PlayerMatchStats>);
			this._PlayerRoundStats = default(EntityRef<PlayerRoundStats>);
			this._RoundStats = default(EntityRef<RoundStats>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MatchId", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long MatchId
		{
			get
			{
				return this._MatchId;
			}
			set
			{
				if ((this._MatchId != value))
				{
					if ((((this._MatchStats.HasLoadedOrAssignedValue || this._PlayerMatchStats.HasLoadedOrAssignedValue) 
								|| this._PlayerRoundStats.HasLoadedOrAssignedValue) 
								|| this._RoundStats.HasLoadedOrAssignedValue))
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMatchIdChanging(value);
					this.SendPropertyChanging();
					this._MatchId = value;
					this.SendPropertyChanged("MatchId");
					this.OnMatchIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GrenadeId", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long GrenadeId
		{
			get
			{
				return this._GrenadeId;
			}
			set
			{
				if ((this._GrenadeId != value))
				{
					this.OnGrenadeIdChanging(value);
					this.SendPropertyChanging();
					this._GrenadeId = value;
					this.SendPropertyChanged("GrenadeId");
					this.OnGrenadeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Round", DbType="SmallInt NOT NULL")]
		public short Round
		{
			get
			{
				return this._Round;
			}
			set
			{
				if ((this._Round != value))
				{
					if ((this._PlayerRoundStats.HasLoadedOrAssignedValue || this._RoundStats.HasLoadedOrAssignedValue))
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRoundChanging(value);
					this.SendPropertyChanging();
					this._Round = value;
					this.SendPropertyChanged("Round");
					this.OnRoundChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Time", DbType="Int NOT NULL")]
		public int Time
		{
			get
			{
				return this._Time;
			}
			set
			{
				if ((this._Time != value))
				{
					this.OnTimeChanging(value);
					this.SendPropertyChanging();
					this._Time = value;
					this.SendPropertyChanged("Time");
					this.OnTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Tick", DbType="Int NOT NULL")]
		public int Tick
		{
			get
			{
				return this._Tick;
			}
			set
			{
				if ((this._Tick != value))
				{
					this.OnTickChanging(value);
					this.SendPropertyChanging();
					this._Tick = value;
					this.SendPropertyChanged("Tick");
					this.OnTickChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlayerId", DbType="BigInt NOT NULL")]
		public long PlayerId
		{
			get
			{
				return this._PlayerId;
			}
			set
			{
				if ((this._PlayerId != value))
				{
					if ((this._PlayerMatchStats.HasLoadedOrAssignedValue || this._PlayerRoundStats.HasLoadedOrAssignedValue))
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPlayerIdChanging(value);
					this.SendPropertyChanging();
					this._PlayerId = value;
					this.SendPropertyChanged("PlayerId");
					this.OnPlayerIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlayerPosX", DbType="Float NOT NULL")]
		public double PlayerPosX
		{
			get
			{
				return this._PlayerPosX;
			}
			set
			{
				if ((this._PlayerPosX != value))
				{
					this.OnPlayerPosXChanging(value);
					this.SendPropertyChanging();
					this._PlayerPosX = value;
					this.SendPropertyChanged("PlayerPosX");
					this.OnPlayerPosXChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlayerPosY", DbType="Float NOT NULL")]
		public double PlayerPosY
		{
			get
			{
				return this._PlayerPosY;
			}
			set
			{
				if ((this._PlayerPosY != value))
				{
					this.OnPlayerPosYChanging(value);
					this.SendPropertyChanging();
					this._PlayerPosY = value;
					this.SendPropertyChanged("PlayerPosY");
					this.OnPlayerPosYChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlayerPosZ", DbType="Float NOT NULL")]
		public double PlayerPosZ
		{
			get
			{
				return this._PlayerPosZ;
			}
			set
			{
				if ((this._PlayerPosZ != value))
				{
					this.OnPlayerPosZChanging(value);
					this.SendPropertyChanging();
					this._PlayerPosZ = value;
					this.SendPropertyChanged("PlayerPosZ");
					this.OnPlayerPosZChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlayerViewX", DbType="Float NOT NULL")]
		public double PlayerViewX
		{
			get
			{
				return this._PlayerViewX;
			}
			set
			{
				if ((this._PlayerViewX != value))
				{
					this.OnPlayerViewXChanging(value);
					this.SendPropertyChanging();
					this._PlayerViewX = value;
					this.SendPropertyChanged("PlayerViewX");
					this.OnPlayerViewXChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlayerViewY", DbType="Float NOT NULL")]
		public double PlayerViewY
		{
			get
			{
				return this._PlayerViewY;
			}
			set
			{
				if ((this._PlayerViewY != value))
				{
					this.OnPlayerViewYChanging(value);
					this.SendPropertyChanging();
					this._PlayerViewY = value;
					this.SendPropertyChanged("PlayerViewY");
					this.OnPlayerViewYChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsCT", DbType="Bit NOT NULL")]
		public bool IsCT
		{
			get
			{
				return this._IsCT;
			}
			set
			{
				if ((this._IsCT != value))
				{
					this.OnIsCTChanging(value);
					this.SendPropertyChanging();
					this._IsCT = value;
					this.SendPropertyChanged("IsCT");
					this.OnIsCTChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GrenadePosX", DbType="Float NOT NULL")]
		public double GrenadePosX
		{
			get
			{
				return this._GrenadePosX;
			}
			set
			{
				if ((this._GrenadePosX != value))
				{
					this.OnGrenadePosXChanging(value);
					this.SendPropertyChanging();
					this._GrenadePosX = value;
					this.SendPropertyChanged("GrenadePosX");
					this.OnGrenadePosXChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GrenadePosY", DbType="Float NOT NULL")]
		public double GrenadePosY
		{
			get
			{
				return this._GrenadePosY;
			}
			set
			{
				if ((this._GrenadePosY != value))
				{
					this.OnGrenadePosYChanging(value);
					this.SendPropertyChanging();
					this._GrenadePosY = value;
					this.SendPropertyChanged("GrenadePosY");
					this.OnGrenadePosYChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GrenadePosZ", DbType="Float NOT NULL")]
		public double GrenadePosZ
		{
			get
			{
				return this._GrenadePosZ;
			}
			set
			{
				if ((this._GrenadePosZ != value))
				{
					this.OnGrenadePosZChanging(value);
					this.SendPropertyChanging();
					this._GrenadePosZ = value;
					this.SendPropertyChanged("GrenadePosZ");
					this.OnGrenadePosZChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DetonationZoneByTeam", DbType="Int NOT NULL")]
		public int DetonationZoneByTeam
		{
			get
			{
				return this._DetonationZoneByTeam;
			}
			set
			{
				if ((this._DetonationZoneByTeam != value))
				{
					this.OnDetonationZoneByTeamChanging(value);
					this.SendPropertyChanging();
					this._DetonationZoneByTeam = value;
					this.SendPropertyChanged("DetonationZoneByTeam");
					this.OnDetonationZoneByTeamChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Trajectory", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Trajectory
		{
			get
			{
				return this._Trajectory;
			}
			set
			{
				if ((this._Trajectory != value))
				{
					this.OnTrajectoryChanging(value);
					this.SendPropertyChanging();
					this._Trajectory = value;
					this.SendPropertyChanged("Trajectory");
					this.OnTrajectoryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Flash_Flashed", Storage="_Flashed", ThisKey="MatchId,GrenadeId", OtherKey="MatchId,GrenadeId")]
		public EntitySet<Flashed> Flashed
		{
			get
			{
				return this._Flashed;
			}
			set
			{
				this._Flashed.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MatchStats_Flash", Storage="_MatchStats", ThisKey="MatchId", OtherKey="MatchId", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public MatchStats MatchStats
		{
			get
			{
				return this._MatchStats.Entity;
			}
			set
			{
				MatchStats previousValue = this._MatchStats.Entity;
				if (((previousValue != value) 
							|| (this._MatchStats.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MatchStats.Entity = null;
						previousValue.Flash.Remove(this);
					}
					this._MatchStats.Entity = value;
					if ((value != null))
					{
						value.Flash.Add(this);
						this._MatchId = value.MatchId;
					}
					else
					{
						this._MatchId = default(long);
					}
					this.SendPropertyChanged("MatchStats");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PlayerMatchStats_Flash", Storage="_PlayerMatchStats", ThisKey="MatchId,PlayerId", OtherKey="MatchId,SteamId", IsForeignKey=true)]
		public PlayerMatchStats PlayerMatchStats
		{
			get
			{
				return this._PlayerMatchStats.Entity;
			}
			set
			{
				PlayerMatchStats previousValue = this._PlayerMatchStats.Entity;
				if (((previousValue != value) 
							|| (this._PlayerMatchStats.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PlayerMatchStats.Entity = null;
						previousValue.Flash.Remove(this);
					}
					this._PlayerMatchStats.Entity = value;
					if ((value != null))
					{
						value.Flash.Add(this);
						this._MatchId = value.MatchId;
						this._PlayerId = value.SteamId;
					}
					else
					{
						this._MatchId = default(long);
						this._PlayerId = default(long);
					}
					this.SendPropertyChanged("PlayerMatchStats");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PlayerRoundStats_Flash", Storage="_PlayerRoundStats", ThisKey="MatchId,Round,PlayerId", OtherKey="MatchId,Round,PlayerId", IsForeignKey=true)]
		public PlayerRoundStats PlayerRoundStats
		{
			get
			{
				return this._PlayerRoundStats.Entity;
			}
			set
			{
				PlayerRoundStats previousValue = this._PlayerRoundStats.Entity;
				if (((previousValue != value) 
							|| (this._PlayerRoundStats.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PlayerRoundStats.Entity = null;
						previousValue.Flash.Remove(this);
					}
					this._PlayerRoundStats.Entity = value;
					if ((value != null))
					{
						value.Flash.Add(this);
						this._MatchId = value.MatchId;
						this._Round = value.Round;
						this._PlayerId = value.PlayerId;
					}
					else
					{
						this._MatchId = default(long);
						this._Round = default(short);
						this._PlayerId = default(long);
					}
					this.SendPropertyChanged("PlayerRoundStats");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RoundStats_Flash", Storage="_RoundStats", ThisKey="MatchId,Round", OtherKey="MatchId,Round", IsForeignKey=true)]
		public RoundStats RoundStats
		{
			get
			{
				return this._RoundStats.Entity;
			}
			set
			{
				RoundStats previousValue = this._RoundStats.Entity;
				if (((previousValue != value) 
							|| (this._RoundStats.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._RoundStats.Entity = null;
						previousValue.Flash.Remove(this);
					}
					this._RoundStats.Entity = value;
					if ((value != null))
					{
						value.Flash.Add(this);
						this._MatchId = value.MatchId;
						this._Round = value.Round;
					}
					else
					{
						this._MatchId = default(long);
						this._Round = default(short);
					}
					this.SendPropertyChanged("RoundStats");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Flashed(Flashed entity)
		{
			this.SendPropertyChanging();
			entity.Flash = this;
		}
		
		private void detach_Flashed(Flashed entity)
		{
			this.SendPropertyChanging();
			entity.Flash = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.FlashBounce")]
	public partial class FlashBounce
	{
		
		private long _MatchId;
		
		private long _GrenadeId;
		
		private int _Time;
		
		private double _GrenadePosX;
		
		private double _GrenadePosY;
		
		private double _GrenadePosZ;
		
		public FlashBounce()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MatchId", DbType="BigInt NOT NULL")]
		public long MatchId
		{
			get
			{
				return this._MatchId;
			}
			set
			{
				if ((this._MatchId != value))
				{
					this._MatchId = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GrenadeId", DbType="BigInt NOT NULL")]
		public long GrenadeId
		{
			get
			{
				return this._GrenadeId;
			}
			set
			{
				if ((this._GrenadeId != value))
				{
					this._GrenadeId = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Time", DbType="Int NOT NULL")]
		public int Time
		{
			get
			{
				return this._Time;
			}
			set
			{
				if ((this._Time != value))
				{
					this._Time = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GrenadePosX", DbType="Float NOT NULL")]
		public double GrenadePosX
		{
			get
			{
				return this._GrenadePosX;
			}
			set
			{
				if ((this._GrenadePosX != value))
				{
					this._GrenadePosX = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GrenadePosY", DbType="Float NOT NULL")]
		public double GrenadePosY
		{
			get
			{
				return this._GrenadePosY;
			}
			set
			{
				if ((this._GrenadePosY != value))
				{
					this._GrenadePosY = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GrenadePosZ", DbType="Float NOT NULL")]
		public double GrenadePosZ
		{
			get
			{
				return this._GrenadePosZ;
			}
			set
			{
				if ((this._GrenadePosZ != value))
				{
					this._GrenadePosZ = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Flashed")]
	public partial class Flashed : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _MatchId;
		
		private long _GrenadeId;
		
		private long _VictimId;
		
		private short _Round;
		
		private double _VictimPosX;
		
		private double _VictimPosY;
		
		private double _VictimPosZ;
		
		private double _VictimViewX;
		
		private double _VictimViewY;
		
		private bool _IsCT;
		
		private int _TimeFlashed;
		
		private bool _TeamAttack;
		
		private System.Nullable<long> _AssistedKillId;
		
		private System.Nullable<int> _TimeUntilAssistedKill;
		
		private int _AngleToCrosshair;
		
		private EntityRef<Flash> _Flash;
		
		private EntityRef<Kills> _Kills;
		
		private EntityRef<MatchStats> _MatchStats;
		
		private EntityRef<PlayerMatchStats> _PlayerMatchStats;
		
		private EntityRef<PlayerRoundStats> _PlayerRoundStats;
		
		private EntityRef<RoundStats> _RoundStats;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMatchIdChanging(long value);
    partial void OnMatchIdChanged();
    partial void OnGrenadeIdChanging(long value);
    partial void OnGrenadeIdChanged();
    partial void OnVictimIdChanging(long value);
    partial void OnVictimIdChanged();
    partial void OnRoundChanging(short value);
    partial void OnRoundChanged();
    partial void OnVictimPosXChanging(double value);
    partial void OnVictimPosXChanged();
    partial void OnVictimPosYChanging(double value);
    partial void OnVictimPosYChanged();
    partial void OnVictimPosZChanging(double value);
    partial void OnVictimPosZChanged();
    partial void OnVictimViewXChanging(double value);
    partial void OnVictimViewXChanged();
    partial void OnVictimViewYChanging(double value);
    partial void OnVictimViewYChanged();
    partial void OnIsCTChanging(bool value);
    partial void OnIsCTChanged();
    partial void OnTimeFlashedChanging(int value);
    partial void OnTimeFlashedChanged();
    partial void OnTeamAttackChanging(bool value);
    partial void OnTeamAttackChanged();
    partial void OnAssistedKillIdChanging(System.Nullable<long> value);
    partial void OnAssistedKillIdChanged();
    partial void OnTimeUntilAssistedKillChanging(System.Nullable<int> value);
    partial void OnTimeUntilAssistedKillChanged();
    partial void OnAngleToCrosshairChanging(int value);
    partial void OnAngleToCrosshairChanged();
    #endregion
		
		public Flashed()
		{
			this._Flash = default(EntityRef<Flash>);
			this._Kills = default(EntityRef<Kills>);
			this._MatchStats = default(EntityRef<MatchStats>);
			this._PlayerMatchStats = default(EntityRef<PlayerMatchStats>);
			this._PlayerRoundStats = default(EntityRef<PlayerRoundStats>);
			this._RoundStats = default(EntityRef<RoundStats>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MatchId", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long MatchId
		{
			get
			{
				return this._MatchId;
			}
			set
			{
				if ((this._MatchId != value))
				{
					if ((((((this._Flash.HasLoadedOrAssignedValue || this._Kills.HasLoadedOrAssignedValue) 
								|| this._MatchStats.HasLoadedOrAssignedValue) 
								|| this._PlayerMatchStats.HasLoadedOrAssignedValue) 
								|| this._PlayerRoundStats.HasLoadedOrAssignedValue) 
								|| this._RoundStats.HasLoadedOrAssignedValue))
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMatchIdChanging(value);
					this.SendPropertyChanging();
					this._MatchId = value;
					this.SendPropertyChanged("MatchId");
					this.OnMatchIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GrenadeId", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long GrenadeId
		{
			get
			{
				return this._GrenadeId;
			}
			set
			{
				if ((this._GrenadeId != value))
				{
					if (this._Flash.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGrenadeIdChanging(value);
					this.SendPropertyChanging();
					this._GrenadeId = value;
					this.SendPropertyChanged("GrenadeId");
					this.OnGrenadeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VictimId", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long VictimId
		{
			get
			{
				return this._VictimId;
			}
			set
			{
				if ((this._VictimId != value))
				{
					if ((this._PlayerMatchStats.HasLoadedOrAssignedValue || this._PlayerRoundStats.HasLoadedOrAssignedValue))
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnVictimIdChanging(value);
					this.SendPropertyChanging();
					this._VictimId = value;
					this.SendPropertyChanged("VictimId");
					this.OnVictimIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Round", DbType="SmallInt NOT NULL")]
		public short Round
		{
			get
			{
				return this._Round;
			}
			set
			{
				if ((this._Round != value))
				{
					if ((this._PlayerRoundStats.HasLoadedOrAssignedValue || this._RoundStats.HasLoadedOrAssignedValue))
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRoundChanging(value);
					this.SendPropertyChanging();
					this._Round = value;
					this.SendPropertyChanged("Round");
					this.OnRoundChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VictimPosX", DbType="Float NOT NULL")]
		public double VictimPosX
		{
			get
			{
				return this._VictimPosX;
			}
			set
			{
				if ((this._VictimPosX != value))
				{
					this.OnVictimPosXChanging(value);
					this.SendPropertyChanging();
					this._VictimPosX = value;
					this.SendPropertyChanged("VictimPosX");
					this.OnVictimPosXChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VictimPosY", DbType="Float NOT NULL")]
		public double VictimPosY
		{
			get
			{
				return this._VictimPosY;
			}
			set
			{
				if ((this._VictimPosY != value))
				{
					this.OnVictimPosYChanging(value);
					this.SendPropertyChanging();
					this._VictimPosY = value;
					this.SendPropertyChanged("VictimPosY");
					this.OnVictimPosYChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VictimPosZ", DbType="Float NOT NULL")]
		public double VictimPosZ
		{
			get
			{
				return this._VictimPosZ;
			}
			set
			{
				if ((this._VictimPosZ != value))
				{
					this.OnVictimPosZChanging(value);
					this.SendPropertyChanging();
					this._VictimPosZ = value;
					this.SendPropertyChanged("VictimPosZ");
					this.OnVictimPosZChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VictimViewX", DbType="Float NOT NULL")]
		public double VictimViewX
		{
			get
			{
				return this._VictimViewX;
			}
			set
			{
				if ((this._VictimViewX != value))
				{
					this.OnVictimViewXChanging(value);
					this.SendPropertyChanging();
					this._VictimViewX = value;
					this.SendPropertyChanged("VictimViewX");
					this.OnVictimViewXChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VictimViewY", DbType="Float NOT NULL")]
		public double VictimViewY
		{
			get
			{
				return this._VictimViewY;
			}
			set
			{
				if ((this._VictimViewY != value))
				{
					this.OnVictimViewYChanging(value);
					this.SendPropertyChanging();
					this._VictimViewY = value;
					this.SendPropertyChanged("VictimViewY");
					this.OnVictimViewYChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsCT", DbType="Bit NOT NULL")]
		public bool IsCT
		{
			get
			{
				return this._IsCT;
			}
			set
			{
				if ((this._IsCT != value))
				{
					this.OnIsCTChanging(value);
					this.SendPropertyChanging();
					this._IsCT = value;
					this.SendPropertyChanged("IsCT");
					this.OnIsCTChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TimeFlashed", DbType="Int NOT NULL")]
		public int TimeFlashed
		{
			get
			{
				return this._TimeFlashed;
			}
			set
			{
				if ((this._TimeFlashed != value))
				{
					this.OnTimeFlashedChanging(value);
					this.SendPropertyChanging();
					this._TimeFlashed = value;
					this.SendPropertyChanged("TimeFlashed");
					this.OnTimeFlashedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TeamAttack", DbType="Bit NOT NULL")]
		public bool TeamAttack
		{
			get
			{
				return this._TeamAttack;
			}
			set
			{
				if ((this._TeamAttack != value))
				{
					this.OnTeamAttackChanging(value);
					this.SendPropertyChanging();
					this._TeamAttack = value;
					this.SendPropertyChanged("TeamAttack");
					this.OnTeamAttackChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AssistedKillId", DbType="BigInt")]
		public System.Nullable<long> AssistedKillId
		{
			get
			{
				return this._AssistedKillId;
			}
			set
			{
				if ((this._AssistedKillId != value))
				{
					if (this._Kills.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAssistedKillIdChanging(value);
					this.SendPropertyChanging();
					this._AssistedKillId = value;
					this.SendPropertyChanged("AssistedKillId");
					this.OnAssistedKillIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TimeUntilAssistedKill", DbType="Int")]
		public System.Nullable<int> TimeUntilAssistedKill
		{
			get
			{
				return this._TimeUntilAssistedKill;
			}
			set
			{
				if ((this._TimeUntilAssistedKill != value))
				{
					this.OnTimeUntilAssistedKillChanging(value);
					this.SendPropertyChanging();
					this._TimeUntilAssistedKill = value;
					this.SendPropertyChanged("TimeUntilAssistedKill");
					this.OnTimeUntilAssistedKillChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AngleToCrosshair", DbType="Int NOT NULL")]
		public int AngleToCrosshair
		{
			get
			{
				return this._AngleToCrosshair;
			}
			set
			{
				if ((this._AngleToCrosshair != value))
				{
					this.OnAngleToCrosshairChanging(value);
					this.SendPropertyChanging();
					this._AngleToCrosshair = value;
					this.SendPropertyChanged("AngleToCrosshair");
					this.OnAngleToCrosshairChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Flash_Flashed", Storage="_Flash", ThisKey="MatchId,GrenadeId", OtherKey="MatchId,GrenadeId", IsForeignKey=true)]
		public Flash Flash
		{
			get
			{
				return this._Flash.Entity;
			}
			set
			{
				Flash previousValue = this._Flash.Entity;
				if (((previousValue != value) 
							|| (this._Flash.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Flash.Entity = null;
						previousValue.Flashed.Remove(this);
					}
					this._Flash.Entity = value;
					if ((value != null))
					{
						value.Flashed.Add(this);
						this._MatchId = value.MatchId;
						this._GrenadeId = value.GrenadeId;
					}
					else
					{
						this._MatchId = default(long);
						this._GrenadeId = default(long);
					}
					this.SendPropertyChanged("Flash");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Kills_Flashed", Storage="_Kills", ThisKey="MatchId,AssistedKillId", OtherKey="MatchId,KillId", IsForeignKey=true)]
		public Kills Kills
		{
			get
			{
				return this._Kills.Entity;
			}
			set
			{
				Kills previousValue = this._Kills.Entity;
				if (((previousValue != value) 
							|| (this._Kills.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Kills.Entity = null;
						previousValue.Flashed.Remove(this);
					}
					this._Kills.Entity = value;
					if ((value != null))
					{
						value.Flashed.Add(this);
						this._MatchId = value.MatchId;
						this._AssistedKillId = value.KillId;
					}
					else
					{
						this._MatchId = default(long);
						this._AssistedKillId = default(Nullable<long>);
					}
					this.SendPropertyChanged("Kills");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MatchStats_Flashed", Storage="_MatchStats", ThisKey="MatchId", OtherKey="MatchId", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public MatchStats MatchStats
		{
			get
			{
				return this._MatchStats.Entity;
			}
			set
			{
				MatchStats previousValue = this._MatchStats.Entity;
				if (((previousValue != value) 
							|| (this._MatchStats.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MatchStats.Entity = null;
						previousValue.Flashed.Remove(this);
					}
					this._MatchStats.Entity = value;
					if ((value != null))
					{
						value.Flashed.Add(this);
						this._MatchId = value.MatchId;
					}
					else
					{
						this._MatchId = default(long);
					}
					this.SendPropertyChanged("MatchStats");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PlayerMatchStats_Flashed", Storage="_PlayerMatchStats", ThisKey="MatchId,VictimId", OtherKey="MatchId,SteamId", IsForeignKey=true)]
		public PlayerMatchStats PlayerMatchStats
		{
			get
			{
				return this._PlayerMatchStats.Entity;
			}
			set
			{
				PlayerMatchStats previousValue = this._PlayerMatchStats.Entity;
				if (((previousValue != value) 
							|| (this._PlayerMatchStats.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PlayerMatchStats.Entity = null;
						previousValue.Flashed.Remove(this);
					}
					this._PlayerMatchStats.Entity = value;
					if ((value != null))
					{
						value.Flashed.Add(this);
						this._MatchId = value.MatchId;
						this._VictimId = value.SteamId;
					}
					else
					{
						this._MatchId = default(long);
						this._VictimId = default(long);
					}
					this.SendPropertyChanged("PlayerMatchStats");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PlayerRoundStats_Flashed", Storage="_PlayerRoundStats", ThisKey="MatchId,Round,VictimId", OtherKey="MatchId,Round,PlayerId", IsForeignKey=true)]
		public PlayerRoundStats PlayerRoundStats
		{
			get
			{
				return this._PlayerRoundStats.Entity;
			}
			set
			{
				PlayerRoundStats previousValue = this._PlayerRoundStats.Entity;
				if (((previousValue != value) 
							|| (this._PlayerRoundStats.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PlayerRoundStats.Entity = null;
						previousValue.Flashed.Remove(this);
					}
					this._PlayerRoundStats.Entity = value;
					if ((value != null))
					{
						value.Flashed.Add(this);
						this._MatchId = value.MatchId;
						this._Round = value.Round;
						this._VictimId = value.PlayerId;
					}
					else
					{
						this._MatchId = default(long);
						this._Round = default(short);
						this._VictimId = default(long);
					}
					this.SendPropertyChanged("PlayerRoundStats");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RoundStats_Flashed", Storage="_RoundStats", ThisKey="MatchId,Round", OtherKey="MatchId,Round", IsForeignKey=true)]
		public RoundStats RoundStats
		{
			get
			{
				return this._RoundStats.Entity;
			}
			set
			{
				RoundStats previousValue = this._RoundStats.Entity;
				if (((previousValue != value) 
							|| (this._RoundStats.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._RoundStats.Entity = null;
						previousValue.Flashed.Remove(this);
					}
					this._RoundStats.Entity = value;
					if ((value != null))
					{
						value.Flashed.Add(this);
						this._MatchId = value.MatchId;
						this._Round = value.Round;
					}
					else
					{
						this._MatchId = default(long);
						this._Round = default(short);
					}
					this.SendPropertyChanged("RoundStats");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Friends")]
	public partial class Friends : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _SteamId;
		
		private long _FriendSteamId;
		
		private System.DateTime _FriendsSince;
		
		private bool _Steam;
		
		private bool _FaceIt;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSteamIdChanging(long value);
    partial void OnSteamIdChanged();
    partial void OnFriendSteamIdChanging(long value);
    partial void OnFriendSteamIdChanged();
    partial void OnFriendsSinceChanging(System.DateTime value);
    partial void OnFriendsSinceChanged();
    partial void OnSteamChanging(bool value);
    partial void OnSteamChanged();
    partial void OnFaceItChanging(bool value);
    partial void OnFaceItChanged();
    #endregion
		
		public Friends()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SteamId", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long SteamId
		{
			get
			{
				return this._SteamId;
			}
			set
			{
				if ((this._SteamId != value))
				{
					this.OnSteamIdChanging(value);
					this.SendPropertyChanging();
					this._SteamId = value;
					this.SendPropertyChanged("SteamId");
					this.OnSteamIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FriendSteamId", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long FriendSteamId
		{
			get
			{
				return this._FriendSteamId;
			}
			set
			{
				if ((this._FriendSteamId != value))
				{
					this.OnFriendSteamIdChanging(value);
					this.SendPropertyChanging();
					this._FriendSteamId = value;
					this.SendPropertyChanged("FriendSteamId");
					this.OnFriendSteamIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FriendsSince", DbType="DateTime NOT NULL")]
		public System.DateTime FriendsSince
		{
			get
			{
				return this._FriendsSince;
			}
			set
			{
				if ((this._FriendsSince != value))
				{
					this.OnFriendsSinceChanging(value);
					this.SendPropertyChanging();
					this._FriendsSince = value;
					this.SendPropertyChanged("FriendsSince");
					this.OnFriendsSinceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Steam", DbType="Bit NOT NULL")]
		public bool Steam
		{
			get
			{
				return this._Steam;
			}
			set
			{
				if ((this._Steam != value))
				{
					this.OnSteamChanging(value);
					this.SendPropertyChanging();
					this._Steam = value;
					this.SendPropertyChanged("Steam");
					this.OnSteamChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FaceIt", DbType="Bit NOT NULL")]
		public bool FaceIt
		{
			get
			{
				return this._FaceIt;
			}
			set
			{
				if ((this._FaceIt != value))
				{
					this.OnFaceItChanging(value);
					this.SendPropertyChanging();
					this._FaceIt = value;
					this.SendPropertyChanged("FaceIt");
					this.OnFaceItChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.HE")]
	public partial class HE : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _MatchId;
		
		private long _GrenadeId;
		
		private short _Round;
		
		private int _Time;
		
		private int _Tick;
		
		private long _PlayerId;
		
		private double _PlayerPosX;
		
		private double _PlayerPosY;
		
		private double _PlayerPosZ;
		
		private double _PlayerViewX;
		
		private double _PlayerViewY;
		
		private bool _IsCT;
		
		private double _GrenadePosX;
		
		private double _GrenadePosY;
		
		private double _GrenadePosZ;
		
		private int _DetonationZoneByTeam;
		
		private string _Trajectory;
		
		private EntitySet<Damage> _Damage;
		
		private EntityRef<MatchStats> _MatchStats;
		
		private EntityRef<PlayerMatchStats> _PlayerMatchStats;
		
		private EntityRef<PlayerRoundStats> _PlayerRoundStats;
		
		private EntityRef<RoundStats> _RoundStats;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMatchIdChanging(long value);
    partial void OnMatchIdChanged();
    partial void OnGrenadeIdChanging(long value);
    partial void OnGrenadeIdChanged();
    partial void OnRoundChanging(short value);
    partial void OnRoundChanged();
    partial void OnTimeChanging(int value);
    partial void OnTimeChanged();
    partial void OnTickChanging(int value);
    partial void OnTickChanged();
    partial void OnPlayerIdChanging(long value);
    partial void OnPlayerIdChanged();
    partial void OnPlayerPosXChanging(double value);
    partial void OnPlayerPosXChanged();
    partial void OnPlayerPosYChanging(double value);
    partial void OnPlayerPosYChanged();
    partial void OnPlayerPosZChanging(double value);
    partial void OnPlayerPosZChanged();
    partial void OnPlayerViewXChanging(double value);
    partial void OnPlayerViewXChanged();
    partial void OnPlayerViewYChanging(double value);
    partial void OnPlayerViewYChanged();
    partial void OnIsCTChanging(bool value);
    partial void OnIsCTChanged();
    partial void OnGrenadePosXChanging(double value);
    partial void OnGrenadePosXChanged();
    partial void OnGrenadePosYChanging(double value);
    partial void OnGrenadePosYChanged();
    partial void OnGrenadePosZChanging(double value);
    partial void OnGrenadePosZChanged();
    partial void OnDetonationZoneByTeamChanging(int value);
    partial void OnDetonationZoneByTeamChanged();
    partial void OnTrajectoryChanging(string value);
    partial void OnTrajectoryChanged();
    #endregion
		
		public HE()
		{
			this._Damage = new EntitySet<Damage>(new Action<Damage>(this.attach_Damage), new Action<Damage>(this.detach_Damage));
			this._MatchStats = default(EntityRef<MatchStats>);
			this._PlayerMatchStats = default(EntityRef<PlayerMatchStats>);
			this._PlayerRoundStats = default(EntityRef<PlayerRoundStats>);
			this._RoundStats = default(EntityRef<RoundStats>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MatchId", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long MatchId
		{
			get
			{
				return this._MatchId;
			}
			set
			{
				if ((this._MatchId != value))
				{
					if ((((this._MatchStats.HasLoadedOrAssignedValue || this._PlayerMatchStats.HasLoadedOrAssignedValue) 
								|| this._PlayerRoundStats.HasLoadedOrAssignedValue) 
								|| this._RoundStats.HasLoadedOrAssignedValue))
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMatchIdChanging(value);
					this.SendPropertyChanging();
					this._MatchId = value;
					this.SendPropertyChanged("MatchId");
					this.OnMatchIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GrenadeId", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long GrenadeId
		{
			get
			{
				return this._GrenadeId;
			}
			set
			{
				if ((this._GrenadeId != value))
				{
					this.OnGrenadeIdChanging(value);
					this.SendPropertyChanging();
					this._GrenadeId = value;
					this.SendPropertyChanged("GrenadeId");
					this.OnGrenadeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Round", DbType="SmallInt NOT NULL")]
		public short Round
		{
			get
			{
				return this._Round;
			}
			set
			{
				if ((this._Round != value))
				{
					if ((this._PlayerRoundStats.HasLoadedOrAssignedValue || this._RoundStats.HasLoadedOrAssignedValue))
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRoundChanging(value);
					this.SendPropertyChanging();
					this._Round = value;
					this.SendPropertyChanged("Round");
					this.OnRoundChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Time", DbType="Int NOT NULL")]
		public int Time
		{
			get
			{
				return this._Time;
			}
			set
			{
				if ((this._Time != value))
				{
					this.OnTimeChanging(value);
					this.SendPropertyChanging();
					this._Time = value;
					this.SendPropertyChanged("Time");
					this.OnTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Tick", DbType="Int NOT NULL")]
		public int Tick
		{
			get
			{
				return this._Tick;
			}
			set
			{
				if ((this._Tick != value))
				{
					this.OnTickChanging(value);
					this.SendPropertyChanging();
					this._Tick = value;
					this.SendPropertyChanged("Tick");
					this.OnTickChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlayerId", DbType="BigInt NOT NULL")]
		public long PlayerId
		{
			get
			{
				return this._PlayerId;
			}
			set
			{
				if ((this._PlayerId != value))
				{
					if ((this._PlayerMatchStats.HasLoadedOrAssignedValue || this._PlayerRoundStats.HasLoadedOrAssignedValue))
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPlayerIdChanging(value);
					this.SendPropertyChanging();
					this._PlayerId = value;
					this.SendPropertyChanged("PlayerId");
					this.OnPlayerIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlayerPosX", DbType="Float NOT NULL")]
		public double PlayerPosX
		{
			get
			{
				return this._PlayerPosX;
			}
			set
			{
				if ((this._PlayerPosX != value))
				{
					this.OnPlayerPosXChanging(value);
					this.SendPropertyChanging();
					this._PlayerPosX = value;
					this.SendPropertyChanged("PlayerPosX");
					this.OnPlayerPosXChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlayerPosY", DbType="Float NOT NULL")]
		public double PlayerPosY
		{
			get
			{
				return this._PlayerPosY;
			}
			set
			{
				if ((this._PlayerPosY != value))
				{
					this.OnPlayerPosYChanging(value);
					this.SendPropertyChanging();
					this._PlayerPosY = value;
					this.SendPropertyChanged("PlayerPosY");
					this.OnPlayerPosYChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlayerPosZ", DbType="Float NOT NULL")]
		public double PlayerPosZ
		{
			get
			{
				return this._PlayerPosZ;
			}
			set
			{
				if ((this._PlayerPosZ != value))
				{
					this.OnPlayerPosZChanging(value);
					this.SendPropertyChanging();
					this._PlayerPosZ = value;
					this.SendPropertyChanged("PlayerPosZ");
					this.OnPlayerPosZChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlayerViewX", DbType="Float NOT NULL")]
		public double PlayerViewX
		{
			get
			{
				return this._PlayerViewX;
			}
			set
			{
				if ((this._PlayerViewX != value))
				{
					this.OnPlayerViewXChanging(value);
					this.SendPropertyChanging();
					this._PlayerViewX = value;
					this.SendPropertyChanged("PlayerViewX");
					this.OnPlayerViewXChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlayerViewY", DbType="Float NOT NULL")]
		public double PlayerViewY
		{
			get
			{
				return this._PlayerViewY;
			}
			set
			{
				if ((this._PlayerViewY != value))
				{
					this.OnPlayerViewYChanging(value);
					this.SendPropertyChanging();
					this._PlayerViewY = value;
					this.SendPropertyChanged("PlayerViewY");
					this.OnPlayerViewYChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsCT", DbType="Bit NOT NULL")]
		public bool IsCT
		{
			get
			{
				return this._IsCT;
			}
			set
			{
				if ((this._IsCT != value))
				{
					this.OnIsCTChanging(value);
					this.SendPropertyChanging();
					this._IsCT = value;
					this.SendPropertyChanged("IsCT");
					this.OnIsCTChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GrenadePosX", DbType="Float NOT NULL")]
		public double GrenadePosX
		{
			get
			{
				return this._GrenadePosX;
			}
			set
			{
				if ((this._GrenadePosX != value))
				{
					this.OnGrenadePosXChanging(value);
					this.SendPropertyChanging();
					this._GrenadePosX = value;
					this.SendPropertyChanged("GrenadePosX");
					this.OnGrenadePosXChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GrenadePosY", DbType="Float NOT NULL")]
		public double GrenadePosY
		{
			get
			{
				return this._GrenadePosY;
			}
			set
			{
				if ((this._GrenadePosY != value))
				{
					this.OnGrenadePosYChanging(value);
					this.SendPropertyChanging();
					this._GrenadePosY = value;
					this.SendPropertyChanged("GrenadePosY");
					this.OnGrenadePosYChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GrenadePosZ", DbType="Float NOT NULL")]
		public double GrenadePosZ
		{
			get
			{
				return this._GrenadePosZ;
			}
			set
			{
				if ((this._GrenadePosZ != value))
				{
					this.OnGrenadePosZChanging(value);
					this.SendPropertyChanging();
					this._GrenadePosZ = value;
					this.SendPropertyChanged("GrenadePosZ");
					this.OnGrenadePosZChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DetonationZoneByTeam", DbType="Int NOT NULL")]
		public int DetonationZoneByTeam
		{
			get
			{
				return this._DetonationZoneByTeam;
			}
			set
			{
				if ((this._DetonationZoneByTeam != value))
				{
					this.OnDetonationZoneByTeamChanging(value);
					this.SendPropertyChanging();
					this._DetonationZoneByTeam = value;
					this.SendPropertyChanged("DetonationZoneByTeam");
					this.OnDetonationZoneByTeamChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Trajectory", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Trajectory
		{
			get
			{
				return this._Trajectory;
			}
			set
			{
				if ((this._Trajectory != value))
				{
					this.OnTrajectoryChanging(value);
					this.SendPropertyChanging();
					this._Trajectory = value;
					this.SendPropertyChanged("Trajectory");
					this.OnTrajectoryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="HE_Damage", Storage="_Damage", ThisKey="MatchId,GrenadeId", OtherKey="MatchId,HEGrenadeId")]
		public EntitySet<Damage> Damage
		{
			get
			{
				return this._Damage;
			}
			set
			{
				this._Damage.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MatchStats_HE", Storage="_MatchStats", ThisKey="MatchId", OtherKey="MatchId", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public MatchStats MatchStats
		{
			get
			{
				return this._MatchStats.Entity;
			}
			set
			{
				MatchStats previousValue = this._MatchStats.Entity;
				if (((previousValue != value) 
							|| (this._MatchStats.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MatchStats.Entity = null;
						previousValue.HE.Remove(this);
					}
					this._MatchStats.Entity = value;
					if ((value != null))
					{
						value.HE.Add(this);
						this._MatchId = value.MatchId;
					}
					else
					{
						this._MatchId = default(long);
					}
					this.SendPropertyChanged("MatchStats");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PlayerMatchStats_HE", Storage="_PlayerMatchStats", ThisKey="MatchId,PlayerId", OtherKey="MatchId,SteamId", IsForeignKey=true)]
		public PlayerMatchStats PlayerMatchStats
		{
			get
			{
				return this._PlayerMatchStats.Entity;
			}
			set
			{
				PlayerMatchStats previousValue = this._PlayerMatchStats.Entity;
				if (((previousValue != value) 
							|| (this._PlayerMatchStats.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PlayerMatchStats.Entity = null;
						previousValue.HE.Remove(this);
					}
					this._PlayerMatchStats.Entity = value;
					if ((value != null))
					{
						value.HE.Add(this);
						this._MatchId = value.MatchId;
						this._PlayerId = value.SteamId;
					}
					else
					{
						this._MatchId = default(long);
						this._PlayerId = default(long);
					}
					this.SendPropertyChanged("PlayerMatchStats");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PlayerRoundStats_HE", Storage="_PlayerRoundStats", ThisKey="MatchId,Round,PlayerId", OtherKey="MatchId,Round,PlayerId", IsForeignKey=true)]
		public PlayerRoundStats PlayerRoundStats
		{
			get
			{
				return this._PlayerRoundStats.Entity;
			}
			set
			{
				PlayerRoundStats previousValue = this._PlayerRoundStats.Entity;
				if (((previousValue != value) 
							|| (this._PlayerRoundStats.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PlayerRoundStats.Entity = null;
						previousValue.HE.Remove(this);
					}
					this._PlayerRoundStats.Entity = value;
					if ((value != null))
					{
						value.HE.Add(this);
						this._MatchId = value.MatchId;
						this._Round = value.Round;
						this._PlayerId = value.PlayerId;
					}
					else
					{
						this._MatchId = default(long);
						this._Round = default(short);
						this._PlayerId = default(long);
					}
					this.SendPropertyChanged("PlayerRoundStats");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RoundStats_HE", Storage="_RoundStats", ThisKey="MatchId,Round", OtherKey="MatchId,Round", IsForeignKey=true)]
		public RoundStats RoundStats
		{
			get
			{
				return this._RoundStats.Entity;
			}
			set
			{
				RoundStats previousValue = this._RoundStats.Entity;
				if (((previousValue != value) 
							|| (this._RoundStats.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._RoundStats.Entity = null;
						previousValue.HE.Remove(this);
					}
					this._RoundStats.Entity = value;
					if ((value != null))
					{
						value.HE.Add(this);
						this._MatchId = value.MatchId;
						this._Round = value.Round;
					}
					else
					{
						this._MatchId = default(long);
						this._Round = default(short);
					}
					this.SendPropertyChanged("RoundStats");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Damage(Damage entity)
		{
			this.SendPropertyChanging();
			entity.HE = this;
		}
		
		private void detach_Damage(Damage entity)
		{
			this.SendPropertyChanging();
			entity.HE = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.HostageDrop")]
	public partial class HostageDrop : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _MatchId;
		
		private short _Round;
		
		private int _Time;
		
		private int _Tick;
		
		private long _PlayerId;
		
		private double _PosX;
		
		private double _PosY;
		
		private double _PosZ;
		
		private EntityRef<MatchStats> _MatchStats;
		
		private EntityRef<PlayerMatchStats> _PlayerMatchStats;
		
		private EntityRef<PlayerRoundStats> _PlayerRoundStats;
		
		private EntityRef<RoundStats> _RoundStats;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMatchIdChanging(long value);
    partial void OnMatchIdChanged();
    partial void OnRoundChanging(short value);
    partial void OnRoundChanged();
    partial void OnTimeChanging(int value);
    partial void OnTimeChanged();
    partial void OnTickChanging(int value);
    partial void OnTickChanged();
    partial void OnPlayerIdChanging(long value);
    partial void OnPlayerIdChanged();
    partial void OnPosXChanging(double value);
    partial void OnPosXChanged();
    partial void OnPosYChanging(double value);
    partial void OnPosYChanged();
    partial void OnPosZChanging(double value);
    partial void OnPosZChanged();
    #endregion
		
		public HostageDrop()
		{
			this._MatchStats = default(EntityRef<MatchStats>);
			this._PlayerMatchStats = default(EntityRef<PlayerMatchStats>);
			this._PlayerRoundStats = default(EntityRef<PlayerRoundStats>);
			this._RoundStats = default(EntityRef<RoundStats>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MatchId", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long MatchId
		{
			get
			{
				return this._MatchId;
			}
			set
			{
				if ((this._MatchId != value))
				{
					if ((((this._MatchStats.HasLoadedOrAssignedValue || this._PlayerMatchStats.HasLoadedOrAssignedValue) 
								|| this._PlayerRoundStats.HasLoadedOrAssignedValue) 
								|| this._RoundStats.HasLoadedOrAssignedValue))
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMatchIdChanging(value);
					this.SendPropertyChanging();
					this._MatchId = value;
					this.SendPropertyChanged("MatchId");
					this.OnMatchIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Round", DbType="SmallInt NOT NULL", IsPrimaryKey=true)]
		public short Round
		{
			get
			{
				return this._Round;
			}
			set
			{
				if ((this._Round != value))
				{
					if ((this._PlayerRoundStats.HasLoadedOrAssignedValue || this._RoundStats.HasLoadedOrAssignedValue))
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRoundChanging(value);
					this.SendPropertyChanging();
					this._Round = value;
					this.SendPropertyChanged("Round");
					this.OnRoundChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Time", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Time
		{
			get
			{
				return this._Time;
			}
			set
			{
				if ((this._Time != value))
				{
					this.OnTimeChanging(value);
					this.SendPropertyChanging();
					this._Time = value;
					this.SendPropertyChanged("Time");
					this.OnTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Tick", DbType="Int NOT NULL")]
		public int Tick
		{
			get
			{
				return this._Tick;
			}
			set
			{
				if ((this._Tick != value))
				{
					this.OnTickChanging(value);
					this.SendPropertyChanging();
					this._Tick = value;
					this.SendPropertyChanged("Tick");
					this.OnTickChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlayerId", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long PlayerId
		{
			get
			{
				return this._PlayerId;
			}
			set
			{
				if ((this._PlayerId != value))
				{
					if ((this._PlayerMatchStats.HasLoadedOrAssignedValue || this._PlayerRoundStats.HasLoadedOrAssignedValue))
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPlayerIdChanging(value);
					this.SendPropertyChanging();
					this._PlayerId = value;
					this.SendPropertyChanged("PlayerId");
					this.OnPlayerIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PosX", DbType="Float NOT NULL")]
		public double PosX
		{
			get
			{
				return this._PosX;
			}
			set
			{
				if ((this._PosX != value))
				{
					this.OnPosXChanging(value);
					this.SendPropertyChanging();
					this._PosX = value;
					this.SendPropertyChanged("PosX");
					this.OnPosXChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PosY", DbType="Float NOT NULL")]
		public double PosY
		{
			get
			{
				return this._PosY;
			}
			set
			{
				if ((this._PosY != value))
				{
					this.OnPosYChanging(value);
					this.SendPropertyChanging();
					this._PosY = value;
					this.SendPropertyChanged("PosY");
					this.OnPosYChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PosZ", DbType="Float NOT NULL")]
		public double PosZ
		{
			get
			{
				return this._PosZ;
			}
			set
			{
				if ((this._PosZ != value))
				{
					this.OnPosZChanging(value);
					this.SendPropertyChanging();
					this._PosZ = value;
					this.SendPropertyChanged("PosZ");
					this.OnPosZChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MatchStats_HostageDrop", Storage="_MatchStats", ThisKey="MatchId", OtherKey="MatchId", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public MatchStats MatchStats
		{
			get
			{
				return this._MatchStats.Entity;
			}
			set
			{
				MatchStats previousValue = this._MatchStats.Entity;
				if (((previousValue != value) 
							|| (this._MatchStats.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MatchStats.Entity = null;
						previousValue.HostageDrop.Remove(this);
					}
					this._MatchStats.Entity = value;
					if ((value != null))
					{
						value.HostageDrop.Add(this);
						this._MatchId = value.MatchId;
					}
					else
					{
						this._MatchId = default(long);
					}
					this.SendPropertyChanged("MatchStats");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PlayerMatchStats_HostageDrop", Storage="_PlayerMatchStats", ThisKey="MatchId,PlayerId", OtherKey="MatchId,SteamId", IsForeignKey=true)]
		public PlayerMatchStats PlayerMatchStats
		{
			get
			{
				return this._PlayerMatchStats.Entity;
			}
			set
			{
				PlayerMatchStats previousValue = this._PlayerMatchStats.Entity;
				if (((previousValue != value) 
							|| (this._PlayerMatchStats.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PlayerMatchStats.Entity = null;
						previousValue.HostageDrop.Remove(this);
					}
					this._PlayerMatchStats.Entity = value;
					if ((value != null))
					{
						value.HostageDrop.Add(this);
						this._MatchId = value.MatchId;
						this._PlayerId = value.SteamId;
					}
					else
					{
						this._MatchId = default(long);
						this._PlayerId = default(long);
					}
					this.SendPropertyChanged("PlayerMatchStats");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PlayerRoundStats_HostageDrop", Storage="_PlayerRoundStats", ThisKey="MatchId,Round,PlayerId", OtherKey="MatchId,Round,PlayerId", IsForeignKey=true)]
		public PlayerRoundStats PlayerRoundStats
		{
			get
			{
				return this._PlayerRoundStats.Entity;
			}
			set
			{
				PlayerRoundStats previousValue = this._PlayerRoundStats.Entity;
				if (((previousValue != value) 
							|| (this._PlayerRoundStats.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PlayerRoundStats.Entity = null;
						previousValue.HostageDrop.Remove(this);
					}
					this._PlayerRoundStats.Entity = value;
					if ((value != null))
					{
						value.HostageDrop.Add(this);
						this._MatchId = value.MatchId;
						this._Round = value.Round;
						this._PlayerId = value.PlayerId;
					}
					else
					{
						this._MatchId = default(long);
						this._Round = default(short);
						this._PlayerId = default(long);
					}
					this.SendPropertyChanged("PlayerRoundStats");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RoundStats_HostageDrop", Storage="_RoundStats", ThisKey="MatchId,Round", OtherKey="MatchId,Round", IsForeignKey=true)]
		public RoundStats RoundStats
		{
			get
			{
				return this._RoundStats.Entity;
			}
			set
			{
				RoundStats previousValue = this._RoundStats.Entity;
				if (((previousValue != value) 
							|| (this._RoundStats.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._RoundStats.Entity = null;
						previousValue.HostageDrop.Remove(this);
					}
					this._RoundStats.Entity = value;
					if ((value != null))
					{
						value.HostageDrop.Add(this);
						this._MatchId = value.MatchId;
						this._Round = value.Round;
					}
					else
					{
						this._MatchId = default(long);
						this._Round = default(short);
					}
					this.SendPropertyChanged("RoundStats");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.HostagePickUp")]
	public partial class HostagePickUp : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _MatchId;
		
		private short _Round;
		
		private int _Time;
		
		private int _Tick;
		
		private long _PlayerId;
		
		private double _PosX;
		
		private double _PosY;
		
		private double _PosZ;
		
		private EntityRef<MatchStats> _MatchStats;
		
		private EntityRef<PlayerMatchStats> _PlayerMatchStats;
		
		private EntityRef<PlayerRoundStats> _PlayerRoundStats;
		
		private EntityRef<RoundStats> _RoundStats;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMatchIdChanging(long value);
    partial void OnMatchIdChanged();
    partial void OnRoundChanging(short value);
    partial void OnRoundChanged();
    partial void OnTimeChanging(int value);
    partial void OnTimeChanged();
    partial void OnTickChanging(int value);
    partial void OnTickChanged();
    partial void OnPlayerIdChanging(long value);
    partial void OnPlayerIdChanged();
    partial void OnPosXChanging(double value);
    partial void OnPosXChanged();
    partial void OnPosYChanging(double value);
    partial void OnPosYChanged();
    partial void OnPosZChanging(double value);
    partial void OnPosZChanged();
    #endregion
		
		public HostagePickUp()
		{
			this._MatchStats = default(EntityRef<MatchStats>);
			this._PlayerMatchStats = default(EntityRef<PlayerMatchStats>);
			this._PlayerRoundStats = default(EntityRef<PlayerRoundStats>);
			this._RoundStats = default(EntityRef<RoundStats>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MatchId", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long MatchId
		{
			get
			{
				return this._MatchId;
			}
			set
			{
				if ((this._MatchId != value))
				{
					if ((((this._MatchStats.HasLoadedOrAssignedValue || this._PlayerMatchStats.HasLoadedOrAssignedValue) 
								|| this._PlayerRoundStats.HasLoadedOrAssignedValue) 
								|| this._RoundStats.HasLoadedOrAssignedValue))
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMatchIdChanging(value);
					this.SendPropertyChanging();
					this._MatchId = value;
					this.SendPropertyChanged("MatchId");
					this.OnMatchIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Round", DbType="SmallInt NOT NULL", IsPrimaryKey=true)]
		public short Round
		{
			get
			{
				return this._Round;
			}
			set
			{
				if ((this._Round != value))
				{
					if ((this._PlayerRoundStats.HasLoadedOrAssignedValue || this._RoundStats.HasLoadedOrAssignedValue))
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRoundChanging(value);
					this.SendPropertyChanging();
					this._Round = value;
					this.SendPropertyChanged("Round");
					this.OnRoundChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Time", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Time
		{
			get
			{
				return this._Time;
			}
			set
			{
				if ((this._Time != value))
				{
					this.OnTimeChanging(value);
					this.SendPropertyChanging();
					this._Time = value;
					this.SendPropertyChanged("Time");
					this.OnTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Tick", DbType="Int NOT NULL")]
		public int Tick
		{
			get
			{
				return this._Tick;
			}
			set
			{
				if ((this._Tick != value))
				{
					this.OnTickChanging(value);
					this.SendPropertyChanging();
					this._Tick = value;
					this.SendPropertyChanged("Tick");
					this.OnTickChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlayerId", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long PlayerId
		{
			get
			{
				return this._PlayerId;
			}
			set
			{
				if ((this._PlayerId != value))
				{
					if ((this._PlayerMatchStats.HasLoadedOrAssignedValue || this._PlayerRoundStats.HasLoadedOrAssignedValue))
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPlayerIdChanging(value);
					this.SendPropertyChanging();
					this._PlayerId = value;
					this.SendPropertyChanged("PlayerId");
					this.OnPlayerIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PosX", DbType="Float NOT NULL")]
		public double PosX
		{
			get
			{
				return this._PosX;
			}
			set
			{
				if ((this._PosX != value))
				{
					this.OnPosXChanging(value);
					this.SendPropertyChanging();
					this._PosX = value;
					this.SendPropertyChanged("PosX");
					this.OnPosXChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PosY", DbType="Float NOT NULL")]
		public double PosY
		{
			get
			{
				return this._PosY;
			}
			set
			{
				if ((this._PosY != value))
				{
					this.OnPosYChanging(value);
					this.SendPropertyChanging();
					this._PosY = value;
					this.SendPropertyChanged("PosY");
					this.OnPosYChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PosZ", DbType="Float NOT NULL")]
		public double PosZ
		{
			get
			{
				return this._PosZ;
			}
			set
			{
				if ((this._PosZ != value))
				{
					this.OnPosZChanging(value);
					this.SendPropertyChanging();
					this._PosZ = value;
					this.SendPropertyChanged("PosZ");
					this.OnPosZChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MatchStats_HostagePickUp", Storage="_MatchStats", ThisKey="MatchId", OtherKey="MatchId", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public MatchStats MatchStats
		{
			get
			{
				return this._MatchStats.Entity;
			}
			set
			{
				MatchStats previousValue = this._MatchStats.Entity;
				if (((previousValue != value) 
							|| (this._MatchStats.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MatchStats.Entity = null;
						previousValue.HostagePickUp.Remove(this);
					}
					this._MatchStats.Entity = value;
					if ((value != null))
					{
						value.HostagePickUp.Add(this);
						this._MatchId = value.MatchId;
					}
					else
					{
						this._MatchId = default(long);
					}
					this.SendPropertyChanged("MatchStats");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PlayerMatchStats_HostagePickUp", Storage="_PlayerMatchStats", ThisKey="MatchId,PlayerId", OtherKey="MatchId,SteamId", IsForeignKey=true)]
		public PlayerMatchStats PlayerMatchStats
		{
			get
			{
				return this._PlayerMatchStats.Entity;
			}
			set
			{
				PlayerMatchStats previousValue = this._PlayerMatchStats.Entity;
				if (((previousValue != value) 
							|| (this._PlayerMatchStats.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PlayerMatchStats.Entity = null;
						previousValue.HostagePickUp.Remove(this);
					}
					this._PlayerMatchStats.Entity = value;
					if ((value != null))
					{
						value.HostagePickUp.Add(this);
						this._MatchId = value.MatchId;
						this._PlayerId = value.SteamId;
					}
					else
					{
						this._MatchId = default(long);
						this._PlayerId = default(long);
					}
					this.SendPropertyChanged("PlayerMatchStats");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PlayerRoundStats_HostagePickUp", Storage="_PlayerRoundStats", ThisKey="MatchId,Round,PlayerId", OtherKey="MatchId,Round,PlayerId", IsForeignKey=true)]
		public PlayerRoundStats PlayerRoundStats
		{
			get
			{
				return this._PlayerRoundStats.Entity;
			}
			set
			{
				PlayerRoundStats previousValue = this._PlayerRoundStats.Entity;
				if (((previousValue != value) 
							|| (this._PlayerRoundStats.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PlayerRoundStats.Entity = null;
						previousValue.HostagePickUp.Remove(this);
					}
					this._PlayerRoundStats.Entity = value;
					if ((value != null))
					{
						value.HostagePickUp.Add(this);
						this._MatchId = value.MatchId;
						this._Round = value.Round;
						this._PlayerId = value.PlayerId;
					}
					else
					{
						this._MatchId = default(long);
						this._Round = default(short);
						this._PlayerId = default(long);
					}
					this.SendPropertyChanged("PlayerRoundStats");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RoundStats_HostagePickUp", Storage="_RoundStats", ThisKey="MatchId,Round", OtherKey="MatchId,Round", IsForeignKey=true)]
		public RoundStats RoundStats
		{
			get
			{
				return this._RoundStats.Entity;
			}
			set
			{
				RoundStats previousValue = this._RoundStats.Entity;
				if (((previousValue != value) 
							|| (this._RoundStats.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._RoundStats.Entity = null;
						previousValue.HostagePickUp.Remove(this);
					}
					this._RoundStats.Entity = value;
					if ((value != null))
					{
						value.HostagePickUp.Add(this);
						this._MatchId = value.MatchId;
						this._Round = value.Round;
					}
					else
					{
						this._MatchId = default(long);
						this._Round = default(short);
					}
					this.SendPropertyChanged("RoundStats");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.HostageRescue")]
	public partial class HostageRescue : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _MatchId;
		
		private short _Round;
		
		private int _Time;
		
		private int _Tick;
		
		private long _PlayerId;
		
		private double _PosX;
		
		private double _PosY;
		
		private double _PosZ;
		
		private EntityRef<MatchStats> _MatchStats;
		
		private EntityRef<PlayerMatchStats> _PlayerMatchStats;
		
		private EntityRef<PlayerRoundStats> _PlayerRoundStats;
		
		private EntityRef<RoundStats> _RoundStats;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMatchIdChanging(long value);
    partial void OnMatchIdChanged();
    partial void OnRoundChanging(short value);
    partial void OnRoundChanged();
    partial void OnTimeChanging(int value);
    partial void OnTimeChanged();
    partial void OnTickChanging(int value);
    partial void OnTickChanged();
    partial void OnPlayerIdChanging(long value);
    partial void OnPlayerIdChanged();
    partial void OnPosXChanging(double value);
    partial void OnPosXChanged();
    partial void OnPosYChanging(double value);
    partial void OnPosYChanged();
    partial void OnPosZChanging(double value);
    partial void OnPosZChanged();
    #endregion
		
		public HostageRescue()
		{
			this._MatchStats = default(EntityRef<MatchStats>);
			this._PlayerMatchStats = default(EntityRef<PlayerMatchStats>);
			this._PlayerRoundStats = default(EntityRef<PlayerRoundStats>);
			this._RoundStats = default(EntityRef<RoundStats>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MatchId", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long MatchId
		{
			get
			{
				return this._MatchId;
			}
			set
			{
				if ((this._MatchId != value))
				{
					if ((((this._MatchStats.HasLoadedOrAssignedValue || this._PlayerMatchStats.HasLoadedOrAssignedValue) 
								|| this._PlayerRoundStats.HasLoadedOrAssignedValue) 
								|| this._RoundStats.HasLoadedOrAssignedValue))
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMatchIdChanging(value);
					this.SendPropertyChanging();
					this._MatchId = value;
					this.SendPropertyChanged("MatchId");
					this.OnMatchIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Round", DbType="SmallInt NOT NULL", IsPrimaryKey=true)]
		public short Round
		{
			get
			{
				return this._Round;
			}
			set
			{
				if ((this._Round != value))
				{
					if ((this._PlayerRoundStats.HasLoadedOrAssignedValue || this._RoundStats.HasLoadedOrAssignedValue))
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRoundChanging(value);
					this.SendPropertyChanging();
					this._Round = value;
					this.SendPropertyChanged("Round");
					this.OnRoundChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Time", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Time
		{
			get
			{
				return this._Time;
			}
			set
			{
				if ((this._Time != value))
				{
					this.OnTimeChanging(value);
					this.SendPropertyChanging();
					this._Time = value;
					this.SendPropertyChanged("Time");
					this.OnTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Tick", DbType="Int NOT NULL")]
		public int Tick
		{
			get
			{
				return this._Tick;
			}
			set
			{
				if ((this._Tick != value))
				{
					this.OnTickChanging(value);
					this.SendPropertyChanging();
					this._Tick = value;
					this.SendPropertyChanged("Tick");
					this.OnTickChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlayerId", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long PlayerId
		{
			get
			{
				return this._PlayerId;
			}
			set
			{
				if ((this._PlayerId != value))
				{
					if ((this._PlayerMatchStats.HasLoadedOrAssignedValue || this._PlayerRoundStats.HasLoadedOrAssignedValue))
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPlayerIdChanging(value);
					this.SendPropertyChanging();
					this._PlayerId = value;
					this.SendPropertyChanged("PlayerId");
					this.OnPlayerIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PosX", DbType="Float NOT NULL")]
		public double PosX
		{
			get
			{
				return this._PosX;
			}
			set
			{
				if ((this._PosX != value))
				{
					this.OnPosXChanging(value);
					this.SendPropertyChanging();
					this._PosX = value;
					this.SendPropertyChanged("PosX");
					this.OnPosXChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PosY", DbType="Float NOT NULL")]
		public double PosY
		{
			get
			{
				return this._PosY;
			}
			set
			{
				if ((this._PosY != value))
				{
					this.OnPosYChanging(value);
					this.SendPropertyChanging();
					this._PosY = value;
					this.SendPropertyChanged("PosY");
					this.OnPosYChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PosZ", DbType="Float NOT NULL")]
		public double PosZ
		{
			get
			{
				return this._PosZ;
			}
			set
			{
				if ((this._PosZ != value))
				{
					this.OnPosZChanging(value);
					this.SendPropertyChanging();
					this._PosZ = value;
					this.SendPropertyChanged("PosZ");
					this.OnPosZChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MatchStats_HostageRescue", Storage="_MatchStats", ThisKey="MatchId", OtherKey="MatchId", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public MatchStats MatchStats
		{
			get
			{
				return this._MatchStats.Entity;
			}
			set
			{
				MatchStats previousValue = this._MatchStats.Entity;
				if (((previousValue != value) 
							|| (this._MatchStats.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MatchStats.Entity = null;
						previousValue.HostageRescue.Remove(this);
					}
					this._MatchStats.Entity = value;
					if ((value != null))
					{
						value.HostageRescue.Add(this);
						this._MatchId = value.MatchId;
					}
					else
					{
						this._MatchId = default(long);
					}
					this.SendPropertyChanged("MatchStats");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PlayerMatchStats_HostageRescue", Storage="_PlayerMatchStats", ThisKey="MatchId,PlayerId", OtherKey="MatchId,SteamId", IsForeignKey=true)]
		public PlayerMatchStats PlayerMatchStats
		{
			get
			{
				return this._PlayerMatchStats.Entity;
			}
			set
			{
				PlayerMatchStats previousValue = this._PlayerMatchStats.Entity;
				if (((previousValue != value) 
							|| (this._PlayerMatchStats.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PlayerMatchStats.Entity = null;
						previousValue.HostageRescue.Remove(this);
					}
					this._PlayerMatchStats.Entity = value;
					if ((value != null))
					{
						value.HostageRescue.Add(this);
						this._MatchId = value.MatchId;
						this._PlayerId = value.SteamId;
					}
					else
					{
						this._MatchId = default(long);
						this._PlayerId = default(long);
					}
					this.SendPropertyChanged("PlayerMatchStats");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PlayerRoundStats_HostageRescue", Storage="_PlayerRoundStats", ThisKey="MatchId,Round,PlayerId", OtherKey="MatchId,Round,PlayerId", IsForeignKey=true)]
		public PlayerRoundStats PlayerRoundStats
		{
			get
			{
				return this._PlayerRoundStats.Entity;
			}
			set
			{
				PlayerRoundStats previousValue = this._PlayerRoundStats.Entity;
				if (((previousValue != value) 
							|| (this._PlayerRoundStats.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PlayerRoundStats.Entity = null;
						previousValue.HostageRescue.Remove(this);
					}
					this._PlayerRoundStats.Entity = value;
					if ((value != null))
					{
						value.HostageRescue.Add(this);
						this._MatchId = value.MatchId;
						this._Round = value.Round;
						this._PlayerId = value.PlayerId;
					}
					else
					{
						this._MatchId = default(long);
						this._Round = default(short);
						this._PlayerId = default(long);
					}
					this.SendPropertyChanged("PlayerRoundStats");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RoundStats_HostageRescue", Storage="_RoundStats", ThisKey="MatchId,Round", OtherKey="MatchId,Round", IsForeignKey=true)]
		public RoundStats RoundStats
		{
			get
			{
				return this._RoundStats.Entity;
			}
			set
			{
				RoundStats previousValue = this._RoundStats.Entity;
				if (((previousValue != value) 
							|| (this._RoundStats.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._RoundStats.Entity = null;
						previousValue.HostageRescue.Remove(this);
					}
					this._RoundStats.Entity = value;
					if ((value != null))
					{
						value.HostageRescue.Add(this);
						this._MatchId = value.MatchId;
						this._Round = value.Round;
					}
					else
					{
						this._MatchId = default(long);
						this._Round = default(short);
					}
					this.SendPropertyChanged("RoundStats");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ItemDropped")]
	public partial class ItemDropped : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _MatchId;
		
		private short _Round;
		
		private long _PlayerId;
		
		private bool _IsCT;
		
		private long _ItemDroppedId;
		
		private long _ItemId;
		
		private int _Time;
		
		private int _Tick;
		
		private short _Equipment;
		
		private bool _ByDeath;
		
		private bool _Gift;
		
		private EntitySet<ItemPickedUp> _ItemPickedUp;
		
		private EntityRef<MatchStats> _MatchStats;
		
		private EntityRef<PlayerMatchStats> _PlayerMatchStats;
		
		private EntityRef<PlayerRoundStats> _PlayerRoundStats;
		
		private EntityRef<RoundStats> _RoundStats;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMatchIdChanging(long value);
    partial void OnMatchIdChanged();
    partial void OnRoundChanging(short value);
    partial void OnRoundChanged();
    partial void OnPlayerIdChanging(long value);
    partial void OnPlayerIdChanged();
    partial void OnIsCTChanging(bool value);
    partial void OnIsCTChanged();
    partial void OnItemDroppedIdChanging(long value);
    partial void OnItemDroppedIdChanged();
    partial void OnItemIdChanging(long value);
    partial void OnItemIdChanged();
    partial void OnTimeChanging(int value);
    partial void OnTimeChanged();
    partial void OnTickChanging(int value);
    partial void OnTickChanged();
    partial void OnEquipmentChanging(short value);
    partial void OnEquipmentChanged();
    partial void OnByDeathChanging(bool value);
    partial void OnByDeathChanged();
    partial void OnGiftChanging(bool value);
    partial void OnGiftChanged();
    #endregion
		
		public ItemDropped()
		{
			this._ItemPickedUp = new EntitySet<ItemPickedUp>(new Action<ItemPickedUp>(this.attach_ItemPickedUp), new Action<ItemPickedUp>(this.detach_ItemPickedUp));
			this._MatchStats = default(EntityRef<MatchStats>);
			this._PlayerMatchStats = default(EntityRef<PlayerMatchStats>);
			this._PlayerRoundStats = default(EntityRef<PlayerRoundStats>);
			this._RoundStats = default(EntityRef<RoundStats>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MatchId", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long MatchId
		{
			get
			{
				return this._MatchId;
			}
			set
			{
				if ((this._MatchId != value))
				{
					if ((((this._MatchStats.HasLoadedOrAssignedValue || this._PlayerMatchStats.HasLoadedOrAssignedValue) 
								|| this._PlayerRoundStats.HasLoadedOrAssignedValue) 
								|| this._RoundStats.HasLoadedOrAssignedValue))
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMatchIdChanging(value);
					this.SendPropertyChanging();
					this._MatchId = value;
					this.SendPropertyChanged("MatchId");
					this.OnMatchIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Round", DbType="SmallInt NOT NULL")]
		public short Round
		{
			get
			{
				return this._Round;
			}
			set
			{
				if ((this._Round != value))
				{
					if ((this._PlayerRoundStats.HasLoadedOrAssignedValue || this._RoundStats.HasLoadedOrAssignedValue))
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRoundChanging(value);
					this.SendPropertyChanging();
					this._Round = value;
					this.SendPropertyChanged("Round");
					this.OnRoundChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlayerId", DbType="BigInt NOT NULL")]
		public long PlayerId
		{
			get
			{
				return this._PlayerId;
			}
			set
			{
				if ((this._PlayerId != value))
				{
					if ((this._PlayerMatchStats.HasLoadedOrAssignedValue || this._PlayerRoundStats.HasLoadedOrAssignedValue))
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPlayerIdChanging(value);
					this.SendPropertyChanging();
					this._PlayerId = value;
					this.SendPropertyChanged("PlayerId");
					this.OnPlayerIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsCT", DbType="Bit NOT NULL")]
		public bool IsCT
		{
			get
			{
				return this._IsCT;
			}
			set
			{
				if ((this._IsCT != value))
				{
					this.OnIsCTChanging(value);
					this.SendPropertyChanging();
					this._IsCT = value;
					this.SendPropertyChanged("IsCT");
					this.OnIsCTChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ItemDroppedId", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long ItemDroppedId
		{
			get
			{
				return this._ItemDroppedId;
			}
			set
			{
				if ((this._ItemDroppedId != value))
				{
					this.OnItemDroppedIdChanging(value);
					this.SendPropertyChanging();
					this._ItemDroppedId = value;
					this.SendPropertyChanged("ItemDroppedId");
					this.OnItemDroppedIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ItemId", DbType="BigInt NOT NULL")]
		public long ItemId
		{
			get
			{
				return this._ItemId;
			}
			set
			{
				if ((this._ItemId != value))
				{
					this.OnItemIdChanging(value);
					this.SendPropertyChanging();
					this._ItemId = value;
					this.SendPropertyChanged("ItemId");
					this.OnItemIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Time", DbType="Int NOT NULL")]
		public int Time
		{
			get
			{
				return this._Time;
			}
			set
			{
				if ((this._Time != value))
				{
					this.OnTimeChanging(value);
					this.SendPropertyChanging();
					this._Time = value;
					this.SendPropertyChanged("Time");
					this.OnTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Tick", DbType="Int NOT NULL")]
		public int Tick
		{
			get
			{
				return this._Tick;
			}
			set
			{
				if ((this._Tick != value))
				{
					this.OnTickChanging(value);
					this.SendPropertyChanging();
					this._Tick = value;
					this.SendPropertyChanged("Tick");
					this.OnTickChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Equipment", DbType="SmallInt NOT NULL")]
		public short Equipment
		{
			get
			{
				return this._Equipment;
			}
			set
			{
				if ((this._Equipment != value))
				{
					this.OnEquipmentChanging(value);
					this.SendPropertyChanging();
					this._Equipment = value;
					this.SendPropertyChanged("Equipment");
					this.OnEquipmentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ByDeath", DbType="Bit NOT NULL")]
		public bool ByDeath
		{
			get
			{
				return this._ByDeath;
			}
			set
			{
				if ((this._ByDeath != value))
				{
					this.OnByDeathChanging(value);
					this.SendPropertyChanging();
					this._ByDeath = value;
					this.SendPropertyChanged("ByDeath");
					this.OnByDeathChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Gift", DbType="Bit NOT NULL")]
		public bool Gift
		{
			get
			{
				return this._Gift;
			}
			set
			{
				if ((this._Gift != value))
				{
					this.OnGiftChanging(value);
					this.SendPropertyChanging();
					this._Gift = value;
					this.SendPropertyChanged("Gift");
					this.OnGiftChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ItemDropped_ItemPickedUp", Storage="_ItemPickedUp", ThisKey="MatchId,ItemDroppedId", OtherKey="MatchId,ItemDroppedId")]
		public EntitySet<ItemPickedUp> ItemPickedUp
		{
			get
			{
				return this._ItemPickedUp;
			}
			set
			{
				this._ItemPickedUp.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MatchStats_ItemDropped", Storage="_MatchStats", ThisKey="MatchId", OtherKey="MatchId", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public MatchStats MatchStats
		{
			get
			{
				return this._MatchStats.Entity;
			}
			set
			{
				MatchStats previousValue = this._MatchStats.Entity;
				if (((previousValue != value) 
							|| (this._MatchStats.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MatchStats.Entity = null;
						previousValue.ItemDropped.Remove(this);
					}
					this._MatchStats.Entity = value;
					if ((value != null))
					{
						value.ItemDropped.Add(this);
						this._MatchId = value.MatchId;
					}
					else
					{
						this._MatchId = default(long);
					}
					this.SendPropertyChanged("MatchStats");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PlayerMatchStats_ItemDropped", Storage="_PlayerMatchStats", ThisKey="MatchId,PlayerId", OtherKey="MatchId,SteamId", IsForeignKey=true)]
		public PlayerMatchStats PlayerMatchStats
		{
			get
			{
				return this._PlayerMatchStats.Entity;
			}
			set
			{
				PlayerMatchStats previousValue = this._PlayerMatchStats.Entity;
				if (((previousValue != value) 
							|| (this._PlayerMatchStats.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PlayerMatchStats.Entity = null;
						previousValue.ItemDropped.Remove(this);
					}
					this._PlayerMatchStats.Entity = value;
					if ((value != null))
					{
						value.ItemDropped.Add(this);
						this._MatchId = value.MatchId;
						this._PlayerId = value.SteamId;
					}
					else
					{
						this._MatchId = default(long);
						this._PlayerId = default(long);
					}
					this.SendPropertyChanged("PlayerMatchStats");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PlayerRoundStats_ItemDropped", Storage="_PlayerRoundStats", ThisKey="MatchId,Round,PlayerId", OtherKey="MatchId,Round,PlayerId", IsForeignKey=true)]
		public PlayerRoundStats PlayerRoundStats
		{
			get
			{
				return this._PlayerRoundStats.Entity;
			}
			set
			{
				PlayerRoundStats previousValue = this._PlayerRoundStats.Entity;
				if (((previousValue != value) 
							|| (this._PlayerRoundStats.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PlayerRoundStats.Entity = null;
						previousValue.ItemDropped.Remove(this);
					}
					this._PlayerRoundStats.Entity = value;
					if ((value != null))
					{
						value.ItemDropped.Add(this);
						this._MatchId = value.MatchId;
						this._Round = value.Round;
						this._PlayerId = value.PlayerId;
					}
					else
					{
						this._MatchId = default(long);
						this._Round = default(short);
						this._PlayerId = default(long);
					}
					this.SendPropertyChanged("PlayerRoundStats");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RoundStats_ItemDropped", Storage="_RoundStats", ThisKey="MatchId,Round", OtherKey="MatchId,Round", IsForeignKey=true)]
		public RoundStats RoundStats
		{
			get
			{
				return this._RoundStats.Entity;
			}
			set
			{
				RoundStats previousValue = this._RoundStats.Entity;
				if (((previousValue != value) 
							|| (this._RoundStats.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._RoundStats.Entity = null;
						previousValue.ItemDropped.Remove(this);
					}
					this._RoundStats.Entity = value;
					if ((value != null))
					{
						value.ItemDropped.Add(this);
						this._MatchId = value.MatchId;
						this._Round = value.Round;
					}
					else
					{
						this._MatchId = default(long);
						this._Round = default(short);
					}
					this.SendPropertyChanged("RoundStats");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ItemPickedUp(ItemPickedUp entity)
		{
			this.SendPropertyChanging();
			entity.ItemDropped = this;
		}
		
		private void detach_ItemPickedUp(ItemPickedUp entity)
		{
			this.SendPropertyChanging();
			entity.ItemDropped = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ItemPickedUp")]
	public partial class ItemPickedUp : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _MatchId;
		
		private short _Round;
		
		private long _PlayerId;
		
		private bool _IsCT;
		
		private long _ItemPickedUpId;
		
		private long _ItemId;
		
		private int _Time;
		
		private int _Tick;
		
		private short _Equipment;
		
		private System.Nullable<long> _ItemDroppedId;
		
		private bool _Gift;
		
		private bool _Buy;
		
		private EntityRef<ItemDropped> _ItemDropped;
		
		private EntityRef<MatchStats> _MatchStats;
		
		private EntityRef<PlayerMatchStats> _PlayerMatchStats;
		
		private EntityRef<PlayerRoundStats> _PlayerRoundStats;
		
		private EntityRef<RoundStats> _RoundStats;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMatchIdChanging(long value);
    partial void OnMatchIdChanged();
    partial void OnRoundChanging(short value);
    partial void OnRoundChanged();
    partial void OnPlayerIdChanging(long value);
    partial void OnPlayerIdChanged();
    partial void OnIsCTChanging(bool value);
    partial void OnIsCTChanged();
    partial void OnItemPickedUpIdChanging(long value);
    partial void OnItemPickedUpIdChanged();
    partial void OnItemIdChanging(long value);
    partial void OnItemIdChanged();
    partial void OnTimeChanging(int value);
    partial void OnTimeChanged();
    partial void OnTickChanging(int value);
    partial void OnTickChanged();
    partial void OnEquipmentChanging(short value);
    partial void OnEquipmentChanged();
    partial void OnItemDroppedIdChanging(System.Nullable<long> value);
    partial void OnItemDroppedIdChanged();
    partial void OnGiftChanging(bool value);
    partial void OnGiftChanged();
    partial void OnBuyChanging(bool value);
    partial void OnBuyChanged();
    #endregion
		
		public ItemPickedUp()
		{
			this._ItemDropped = default(EntityRef<ItemDropped>);
			this._MatchStats = default(EntityRef<MatchStats>);
			this._PlayerMatchStats = default(EntityRef<PlayerMatchStats>);
			this._PlayerRoundStats = default(EntityRef<PlayerRoundStats>);
			this._RoundStats = default(EntityRef<RoundStats>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MatchId", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long MatchId
		{
			get
			{
				return this._MatchId;
			}
			set
			{
				if ((this._MatchId != value))
				{
					if (((((this._ItemDropped.HasLoadedOrAssignedValue || this._MatchStats.HasLoadedOrAssignedValue) 
								|| this._PlayerMatchStats.HasLoadedOrAssignedValue) 
								|| this._PlayerRoundStats.HasLoadedOrAssignedValue) 
								|| this._RoundStats.HasLoadedOrAssignedValue))
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMatchIdChanging(value);
					this.SendPropertyChanging();
					this._MatchId = value;
					this.SendPropertyChanged("MatchId");
					this.OnMatchIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Round", DbType="SmallInt NOT NULL")]
		public short Round
		{
			get
			{
				return this._Round;
			}
			set
			{
				if ((this._Round != value))
				{
					if ((this._PlayerRoundStats.HasLoadedOrAssignedValue || this._RoundStats.HasLoadedOrAssignedValue))
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRoundChanging(value);
					this.SendPropertyChanging();
					this._Round = value;
					this.SendPropertyChanged("Round");
					this.OnRoundChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlayerId", DbType="BigInt NOT NULL")]
		public long PlayerId
		{
			get
			{
				return this._PlayerId;
			}
			set
			{
				if ((this._PlayerId != value))
				{
					if ((this._PlayerMatchStats.HasLoadedOrAssignedValue || this._PlayerRoundStats.HasLoadedOrAssignedValue))
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPlayerIdChanging(value);
					this.SendPropertyChanging();
					this._PlayerId = value;
					this.SendPropertyChanged("PlayerId");
					this.OnPlayerIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsCT", DbType="Bit NOT NULL")]
		public bool IsCT
		{
			get
			{
				return this._IsCT;
			}
			set
			{
				if ((this._IsCT != value))
				{
					this.OnIsCTChanging(value);
					this.SendPropertyChanging();
					this._IsCT = value;
					this.SendPropertyChanged("IsCT");
					this.OnIsCTChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ItemPickedUpId", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long ItemPickedUpId
		{
			get
			{
				return this._ItemPickedUpId;
			}
			set
			{
				if ((this._ItemPickedUpId != value))
				{
					this.OnItemPickedUpIdChanging(value);
					this.SendPropertyChanging();
					this._ItemPickedUpId = value;
					this.SendPropertyChanged("ItemPickedUpId");
					this.OnItemPickedUpIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ItemId", DbType="BigInt NOT NULL")]
		public long ItemId
		{
			get
			{
				return this._ItemId;
			}
			set
			{
				if ((this._ItemId != value))
				{
					this.OnItemIdChanging(value);
					this.SendPropertyChanging();
					this._ItemId = value;
					this.SendPropertyChanged("ItemId");
					this.OnItemIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Time", DbType="Int NOT NULL")]
		public int Time
		{
			get
			{
				return this._Time;
			}
			set
			{
				if ((this._Time != value))
				{
					this.OnTimeChanging(value);
					this.SendPropertyChanging();
					this._Time = value;
					this.SendPropertyChanged("Time");
					this.OnTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Tick", DbType="Int NOT NULL")]
		public int Tick
		{
			get
			{
				return this._Tick;
			}
			set
			{
				if ((this._Tick != value))
				{
					this.OnTickChanging(value);
					this.SendPropertyChanging();
					this._Tick = value;
					this.SendPropertyChanged("Tick");
					this.OnTickChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Equipment", DbType="SmallInt NOT NULL")]
		public short Equipment
		{
			get
			{
				return this._Equipment;
			}
			set
			{
				if ((this._Equipment != value))
				{
					this.OnEquipmentChanging(value);
					this.SendPropertyChanging();
					this._Equipment = value;
					this.SendPropertyChanged("Equipment");
					this.OnEquipmentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ItemDroppedId", DbType="BigInt")]
		public System.Nullable<long> ItemDroppedId
		{
			get
			{
				return this._ItemDroppedId;
			}
			set
			{
				if ((this._ItemDroppedId != value))
				{
					if (this._ItemDropped.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnItemDroppedIdChanging(value);
					this.SendPropertyChanging();
					this._ItemDroppedId = value;
					this.SendPropertyChanged("ItemDroppedId");
					this.OnItemDroppedIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Gift", DbType="Bit NOT NULL")]
		public bool Gift
		{
			get
			{
				return this._Gift;
			}
			set
			{
				if ((this._Gift != value))
				{
					this.OnGiftChanging(value);
					this.SendPropertyChanging();
					this._Gift = value;
					this.SendPropertyChanged("Gift");
					this.OnGiftChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Buy", DbType="Bit NOT NULL")]
		public bool Buy
		{
			get
			{
				return this._Buy;
			}
			set
			{
				if ((this._Buy != value))
				{
					this.OnBuyChanging(value);
					this.SendPropertyChanging();
					this._Buy = value;
					this.SendPropertyChanged("Buy");
					this.OnBuyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ItemDropped_ItemPickedUp", Storage="_ItemDropped", ThisKey="MatchId,ItemDroppedId", OtherKey="MatchId,ItemDroppedId", IsForeignKey=true)]
		public ItemDropped ItemDropped
		{
			get
			{
				return this._ItemDropped.Entity;
			}
			set
			{
				ItemDropped previousValue = this._ItemDropped.Entity;
				if (((previousValue != value) 
							|| (this._ItemDropped.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ItemDropped.Entity = null;
						previousValue.ItemPickedUp.Remove(this);
					}
					this._ItemDropped.Entity = value;
					if ((value != null))
					{
						value.ItemPickedUp.Add(this);
						this._MatchId = value.MatchId;
						this._ItemDroppedId = value.ItemDroppedId;
					}
					else
					{
						this._MatchId = default(long);
						this._ItemDroppedId = default(Nullable<long>);
					}
					this.SendPropertyChanged("ItemDropped");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MatchStats_ItemPickedUp", Storage="_MatchStats", ThisKey="MatchId", OtherKey="MatchId", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public MatchStats MatchStats
		{
			get
			{
				return this._MatchStats.Entity;
			}
			set
			{
				MatchStats previousValue = this._MatchStats.Entity;
				if (((previousValue != value) 
							|| (this._MatchStats.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MatchStats.Entity = null;
						previousValue.ItemPickedUp.Remove(this);
					}
					this._MatchStats.Entity = value;
					if ((value != null))
					{
						value.ItemPickedUp.Add(this);
						this._MatchId = value.MatchId;
					}
					else
					{
						this._MatchId = default(long);
					}
					this.SendPropertyChanged("MatchStats");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PlayerMatchStats_ItemPickedUp", Storage="_PlayerMatchStats", ThisKey="MatchId,PlayerId", OtherKey="MatchId,SteamId", IsForeignKey=true)]
		public PlayerMatchStats PlayerMatchStats
		{
			get
			{
				return this._PlayerMatchStats.Entity;
			}
			set
			{
				PlayerMatchStats previousValue = this._PlayerMatchStats.Entity;
				if (((previousValue != value) 
							|| (this._PlayerMatchStats.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PlayerMatchStats.Entity = null;
						previousValue.ItemPickedUp.Remove(this);
					}
					this._PlayerMatchStats.Entity = value;
					if ((value != null))
					{
						value.ItemPickedUp.Add(this);
						this._MatchId = value.MatchId;
						this._PlayerId = value.SteamId;
					}
					else
					{
						this._MatchId = default(long);
						this._PlayerId = default(long);
					}
					this.SendPropertyChanged("PlayerMatchStats");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PlayerRoundStats_ItemPickedUp", Storage="_PlayerRoundStats", ThisKey="MatchId,Round,PlayerId", OtherKey="MatchId,Round,PlayerId", IsForeignKey=true)]
		public PlayerRoundStats PlayerRoundStats
		{
			get
			{
				return this._PlayerRoundStats.Entity;
			}
			set
			{
				PlayerRoundStats previousValue = this._PlayerRoundStats.Entity;
				if (((previousValue != value) 
							|| (this._PlayerRoundStats.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PlayerRoundStats.Entity = null;
						previousValue.ItemPickedUp.Remove(this);
					}
					this._PlayerRoundStats.Entity = value;
					if ((value != null))
					{
						value.ItemPickedUp.Add(this);
						this._MatchId = value.MatchId;
						this._Round = value.Round;
						this._PlayerId = value.PlayerId;
					}
					else
					{
						this._MatchId = default(long);
						this._Round = default(short);
						this._PlayerId = default(long);
					}
					this.SendPropertyChanged("PlayerRoundStats");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RoundStats_ItemPickedUp", Storage="_RoundStats", ThisKey="MatchId,Round", OtherKey="MatchId,Round", IsForeignKey=true)]
		public RoundStats RoundStats
		{
			get
			{
				return this._RoundStats.Entity;
			}
			set
			{
				RoundStats previousValue = this._RoundStats.Entity;
				if (((previousValue != value) 
							|| (this._RoundStats.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._RoundStats.Entity = null;
						previousValue.ItemPickedUp.Remove(this);
					}
					this._RoundStats.Entity = value;
					if ((value != null))
					{
						value.ItemPickedUp.Add(this);
						this._MatchId = value.MatchId;
						this._Round = value.Round;
					}
					else
					{
						this._MatchId = default(long);
						this._Round = default(short);
					}
					this.SendPropertyChanged("RoundStats");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ItemSaved")]
	public partial class ItemSaved : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _MatchId;
		
		private short _Round;
		
		private long _PlayerId;
		
		private bool _IsCT;
		
		private long _ItemSavedId;
		
		private long _ItemId;
		
		private short _Equipment;
		
		private EntityRef<MatchStats> _MatchStats;
		
		private EntityRef<PlayerMatchStats> _PlayerMatchStats;
		
		private EntityRef<PlayerRoundStats> _PlayerRoundStats;
		
		private EntityRef<RoundStats> _RoundStats;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMatchIdChanging(long value);
    partial void OnMatchIdChanged();
    partial void OnRoundChanging(short value);
    partial void OnRoundChanged();
    partial void OnPlayerIdChanging(long value);
    partial void OnPlayerIdChanged();
    partial void OnIsCTChanging(bool value);
    partial void OnIsCTChanged();
    partial void OnItemSavedIdChanging(long value);
    partial void OnItemSavedIdChanged();
    partial void OnItemIdChanging(long value);
    partial void OnItemIdChanged();
    partial void OnEquipmentChanging(short value);
    partial void OnEquipmentChanged();
    #endregion
		
		public ItemSaved()
		{
			this._MatchStats = default(EntityRef<MatchStats>);
			this._PlayerMatchStats = default(EntityRef<PlayerMatchStats>);
			this._PlayerRoundStats = default(EntityRef<PlayerRoundStats>);
			this._RoundStats = default(EntityRef<RoundStats>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MatchId", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long MatchId
		{
			get
			{
				return this._MatchId;
			}
			set
			{
				if ((this._MatchId != value))
				{
					if ((((this._MatchStats.HasLoadedOrAssignedValue || this._PlayerMatchStats.HasLoadedOrAssignedValue) 
								|| this._PlayerRoundStats.HasLoadedOrAssignedValue) 
								|| this._RoundStats.HasLoadedOrAssignedValue))
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMatchIdChanging(value);
					this.SendPropertyChanging();
					this._MatchId = value;
					this.SendPropertyChanged("MatchId");
					this.OnMatchIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Round", DbType="SmallInt NOT NULL")]
		public short Round
		{
			get
			{
				return this._Round;
			}
			set
			{
				if ((this._Round != value))
				{
					if ((this._PlayerRoundStats.HasLoadedOrAssignedValue || this._RoundStats.HasLoadedOrAssignedValue))
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRoundChanging(value);
					this.SendPropertyChanging();
					this._Round = value;
					this.SendPropertyChanged("Round");
					this.OnRoundChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlayerId", DbType="BigInt NOT NULL")]
		public long PlayerId
		{
			get
			{
				return this._PlayerId;
			}
			set
			{
				if ((this._PlayerId != value))
				{
					if ((this._PlayerMatchStats.HasLoadedOrAssignedValue || this._PlayerRoundStats.HasLoadedOrAssignedValue))
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPlayerIdChanging(value);
					this.SendPropertyChanging();
					this._PlayerId = value;
					this.SendPropertyChanged("PlayerId");
					this.OnPlayerIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsCT", DbType="Bit NOT NULL")]
		public bool IsCT
		{
			get
			{
				return this._IsCT;
			}
			set
			{
				if ((this._IsCT != value))
				{
					this.OnIsCTChanging(value);
					this.SendPropertyChanging();
					this._IsCT = value;
					this.SendPropertyChanged("IsCT");
					this.OnIsCTChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ItemSavedId", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long ItemSavedId
		{
			get
			{
				return this._ItemSavedId;
			}
			set
			{
				if ((this._ItemSavedId != value))
				{
					this.OnItemSavedIdChanging(value);
					this.SendPropertyChanging();
					this._ItemSavedId = value;
					this.SendPropertyChanged("ItemSavedId");
					this.OnItemSavedIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ItemId", DbType="BigInt NOT NULL")]
		public long ItemId
		{
			get
			{
				return this._ItemId;
			}
			set
			{
				if ((this._ItemId != value))
				{
					this.OnItemIdChanging(value);
					this.SendPropertyChanging();
					this._ItemId = value;
					this.SendPropertyChanged("ItemId");
					this.OnItemIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Equipment", DbType="SmallInt NOT NULL")]
		public short Equipment
		{
			get
			{
				return this._Equipment;
			}
			set
			{
				if ((this._Equipment != value))
				{
					this.OnEquipmentChanging(value);
					this.SendPropertyChanging();
					this._Equipment = value;
					this.SendPropertyChanged("Equipment");
					this.OnEquipmentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MatchStats_ItemSaved", Storage="_MatchStats", ThisKey="MatchId", OtherKey="MatchId", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public MatchStats MatchStats
		{
			get
			{
				return this._MatchStats.Entity;
			}
			set
			{
				MatchStats previousValue = this._MatchStats.Entity;
				if (((previousValue != value) 
							|| (this._MatchStats.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MatchStats.Entity = null;
						previousValue.ItemSaved.Remove(this);
					}
					this._MatchStats.Entity = value;
					if ((value != null))
					{
						value.ItemSaved.Add(this);
						this._MatchId = value.MatchId;
					}
					else
					{
						this._MatchId = default(long);
					}
					this.SendPropertyChanged("MatchStats");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PlayerMatchStats_ItemSaved", Storage="_PlayerMatchStats", ThisKey="MatchId,PlayerId", OtherKey="MatchId,SteamId", IsForeignKey=true)]
		public PlayerMatchStats PlayerMatchStats
		{
			get
			{
				return this._PlayerMatchStats.Entity;
			}
			set
			{
				PlayerMatchStats previousValue = this._PlayerMatchStats.Entity;
				if (((previousValue != value) 
							|| (this._PlayerMatchStats.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PlayerMatchStats.Entity = null;
						previousValue.ItemSaved.Remove(this);
					}
					this._PlayerMatchStats.Entity = value;
					if ((value != null))
					{
						value.ItemSaved.Add(this);
						this._MatchId = value.MatchId;
						this._PlayerId = value.SteamId;
					}
					else
					{
						this._MatchId = default(long);
						this._PlayerId = default(long);
					}
					this.SendPropertyChanged("PlayerMatchStats");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PlayerRoundStats_ItemSaved", Storage="_PlayerRoundStats", ThisKey="MatchId,Round,PlayerId", OtherKey="MatchId,Round,PlayerId", IsForeignKey=true)]
		public PlayerRoundStats PlayerRoundStats
		{
			get
			{
				return this._PlayerRoundStats.Entity;
			}
			set
			{
				PlayerRoundStats previousValue = this._PlayerRoundStats.Entity;
				if (((previousValue != value) 
							|| (this._PlayerRoundStats.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PlayerRoundStats.Entity = null;
						previousValue.ItemSaved.Remove(this);
					}
					this._PlayerRoundStats.Entity = value;
					if ((value != null))
					{
						value.ItemSaved.Add(this);
						this._MatchId = value.MatchId;
						this._Round = value.Round;
						this._PlayerId = value.PlayerId;
					}
					else
					{
						this._MatchId = default(long);
						this._Round = default(short);
						this._PlayerId = default(long);
					}
					this.SendPropertyChanged("PlayerRoundStats");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RoundStats_ItemSaved", Storage="_RoundStats", ThisKey="MatchId,Round", OtherKey="MatchId,Round", IsForeignKey=true)]
		public RoundStats RoundStats
		{
			get
			{
				return this._RoundStats.Entity;
			}
			set
			{
				RoundStats previousValue = this._RoundStats.Entity;
				if (((previousValue != value) 
							|| (this._RoundStats.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._RoundStats.Entity = null;
						previousValue.ItemSaved.Remove(this);
					}
					this._RoundStats.Entity = value;
					if ((value != null))
					{
						value.ItemSaved.Add(this);
						this._MatchId = value.MatchId;
						this._Round = value.Round;
					}
					else
					{
						this._MatchId = default(long);
						this._Round = default(short);
					}
					this.SendPropertyChanged("RoundStats");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Kills")]
	public partial class Kills : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _MatchId;
		
		private long _KillId;
		
		private short _Round;
		
		private int _Time;
		
		private int _Tick;
		
		private long _PlayerId;
		
		private double _PlayerPosX;
		
		private double _PlayerPosY;
		
		private double _PlayerPosZ;
		
		private short _PlayerPrimary;
		
		private short _PlayerSecondary;
		
		private bool _IsCT;
		
		private long _VictimId;
		
		private double _VictimPosX;
		
		private double _VictimPosY;
		
		private double _VictimPosZ;
		
		private short _VictimPrimary;
		
		private short _VictimSecondary;
		
		private bool _AssistedFlash;
		
		private System.Nullable<long> _AssisterId;
		
		private System.Nullable<double> _AssisterPosX;
		
		private System.Nullable<double> _AssisterPosY;
		
		private System.Nullable<double> _AssisterPosZ;
		
		private byte _KillType;
		
		private short _Weapon;
		
		private bool _TeamKill;
		
		private System.Nullable<long> _DamageId;
		
		private System.Nullable<int> _PlayerZoneByTeam;
		
		private System.Nullable<int> _VictimZoneByTeam;
		
		private EntityRef<_Refrag> @__Refrag;
		
		private EntitySet<_Refrag> @__Refrag1;
		
		private EntitySet<Flashed> _Flashed;
		
		private EntityRef<Damage> _Damage;
		
		private EntityRef<MatchStats> _MatchStats;
		
		private EntityRef<PlayerMatchStats> _PlayerMatchStats;
		
		private EntityRef<PlayerMatchStats> _PlayerMatchStats1;
		
		private EntityRef<PlayerRoundStats> _PlayerRoundStats;
		
		private EntityRef<PlayerRoundStats> _PlayerRoundStats1;
		
		private EntityRef<RoundStats> _RoundStats;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMatchIdChanging(long value);
    partial void OnMatchIdChanged();
    partial void OnKillIdChanging(long value);
    partial void OnKillIdChanged();
    partial void OnRoundChanging(short value);
    partial void OnRoundChanged();
    partial void OnTimeChanging(int value);
    partial void OnTimeChanged();
    partial void OnTickChanging(int value);
    partial void OnTickChanged();
    partial void OnPlayerIdChanging(long value);
    partial void OnPlayerIdChanged();
    partial void OnPlayerPosXChanging(double value);
    partial void OnPlayerPosXChanged();
    partial void OnPlayerPosYChanging(double value);
    partial void OnPlayerPosYChanged();
    partial void OnPlayerPosZChanging(double value);
    partial void OnPlayerPosZChanged();
    partial void OnPlayerPrimaryChanging(short value);
    partial void OnPlayerPrimaryChanged();
    partial void OnPlayerSecondaryChanging(short value);
    partial void OnPlayerSecondaryChanged();
    partial void OnIsCTChanging(bool value);
    partial void OnIsCTChanged();
    partial void OnVictimIdChanging(long value);
    partial void OnVictimIdChanged();
    partial void OnVictimPosXChanging(double value);
    partial void OnVictimPosXChanged();
    partial void OnVictimPosYChanging(double value);
    partial void OnVictimPosYChanged();
    partial void OnVictimPosZChanging(double value);
    partial void OnVictimPosZChanged();
    partial void OnVictimPrimaryChanging(short value);
    partial void OnVictimPrimaryChanged();
    partial void OnVictimSecondaryChanging(short value);
    partial void OnVictimSecondaryChanged();
    partial void OnAssistedFlashChanging(bool value);
    partial void OnAssistedFlashChanged();
    partial void OnAssisterIdChanging(System.Nullable<long> value);
    partial void OnAssisterIdChanged();
    partial void OnAssisterPosXChanging(System.Nullable<double> value);
    partial void OnAssisterPosXChanged();
    partial void OnAssisterPosYChanging(System.Nullable<double> value);
    partial void OnAssisterPosYChanged();
    partial void OnAssisterPosZChanging(System.Nullable<double> value);
    partial void OnAssisterPosZChanged();
    partial void OnKillTypeChanging(byte value);
    partial void OnKillTypeChanged();
    partial void OnWeaponChanging(short value);
    partial void OnWeaponChanged();
    partial void OnTeamKillChanging(bool value);
    partial void OnTeamKillChanged();
    partial void OnDamageIdChanging(System.Nullable<long> value);
    partial void OnDamageIdChanged();
    partial void OnPlayerZoneByTeamChanging(System.Nullable<int> value);
    partial void OnPlayerZoneByTeamChanged();
    partial void OnVictimZoneByTeamChanging(System.Nullable<int> value);
    partial void OnVictimZoneByTeamChanged();
    #endregion
		
		public Kills()
		{
			this.@__Refrag = default(EntityRef<_Refrag>);
			this.@__Refrag1 = new EntitySet<_Refrag>(new Action<_Refrag>(this.attach__Refrag1), new Action<_Refrag>(this.detach__Refrag1));
			this._Flashed = new EntitySet<Flashed>(new Action<Flashed>(this.attach_Flashed), new Action<Flashed>(this.detach_Flashed));
			this._Damage = default(EntityRef<Damage>);
			this._MatchStats = default(EntityRef<MatchStats>);
			this._PlayerMatchStats = default(EntityRef<PlayerMatchStats>);
			this._PlayerMatchStats1 = default(EntityRef<PlayerMatchStats>);
			this._PlayerRoundStats = default(EntityRef<PlayerRoundStats>);
			this._PlayerRoundStats1 = default(EntityRef<PlayerRoundStats>);
			this._RoundStats = default(EntityRef<RoundStats>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MatchId", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long MatchId
		{
			get
			{
				return this._MatchId;
			}
			set
			{
				if ((this._MatchId != value))
				{
					if (((((((this._Damage.HasLoadedOrAssignedValue || this._MatchStats.HasLoadedOrAssignedValue) 
								|| this._PlayerMatchStats.HasLoadedOrAssignedValue) 
								|| this._PlayerMatchStats1.HasLoadedOrAssignedValue) 
								|| this._PlayerRoundStats.HasLoadedOrAssignedValue) 
								|| this._PlayerRoundStats1.HasLoadedOrAssignedValue) 
								|| this._RoundStats.HasLoadedOrAssignedValue))
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMatchIdChanging(value);
					this.SendPropertyChanging();
					this._MatchId = value;
					this.SendPropertyChanged("MatchId");
					this.OnMatchIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_KillId", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long KillId
		{
			get
			{
				return this._KillId;
			}
			set
			{
				if ((this._KillId != value))
				{
					this.OnKillIdChanging(value);
					this.SendPropertyChanging();
					this._KillId = value;
					this.SendPropertyChanged("KillId");
					this.OnKillIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Round", DbType="SmallInt NOT NULL")]
		public short Round
		{
			get
			{
				return this._Round;
			}
			set
			{
				if ((this._Round != value))
				{
					if (((this._PlayerRoundStats.HasLoadedOrAssignedValue || this._PlayerRoundStats1.HasLoadedOrAssignedValue) 
								|| this._RoundStats.HasLoadedOrAssignedValue))
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRoundChanging(value);
					this.SendPropertyChanging();
					this._Round = value;
					this.SendPropertyChanged("Round");
					this.OnRoundChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Time", DbType="Int NOT NULL")]
		public int Time
		{
			get
			{
				return this._Time;
			}
			set
			{
				if ((this._Time != value))
				{
					this.OnTimeChanging(value);
					this.SendPropertyChanging();
					this._Time = value;
					this.SendPropertyChanged("Time");
					this.OnTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Tick", DbType="Int NOT NULL")]
		public int Tick
		{
			get
			{
				return this._Tick;
			}
			set
			{
				if ((this._Tick != value))
				{
					this.OnTickChanging(value);
					this.SendPropertyChanging();
					this._Tick = value;
					this.SendPropertyChanged("Tick");
					this.OnTickChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlayerId", DbType="BigInt NOT NULL")]
		public long PlayerId
		{
			get
			{
				return this._PlayerId;
			}
			set
			{
				if ((this._PlayerId != value))
				{
					if ((this._PlayerMatchStats.HasLoadedOrAssignedValue || this._PlayerRoundStats.HasLoadedOrAssignedValue))
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPlayerIdChanging(value);
					this.SendPropertyChanging();
					this._PlayerId = value;
					this.SendPropertyChanged("PlayerId");
					this.OnPlayerIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlayerPosX", DbType="Float NOT NULL")]
		public double PlayerPosX
		{
			get
			{
				return this._PlayerPosX;
			}
			set
			{
				if ((this._PlayerPosX != value))
				{
					this.OnPlayerPosXChanging(value);
					this.SendPropertyChanging();
					this._PlayerPosX = value;
					this.SendPropertyChanged("PlayerPosX");
					this.OnPlayerPosXChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlayerPosY", DbType="Float NOT NULL")]
		public double PlayerPosY
		{
			get
			{
				return this._PlayerPosY;
			}
			set
			{
				if ((this._PlayerPosY != value))
				{
					this.OnPlayerPosYChanging(value);
					this.SendPropertyChanging();
					this._PlayerPosY = value;
					this.SendPropertyChanged("PlayerPosY");
					this.OnPlayerPosYChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlayerPosZ", DbType="Float NOT NULL")]
		public double PlayerPosZ
		{
			get
			{
				return this._PlayerPosZ;
			}
			set
			{
				if ((this._PlayerPosZ != value))
				{
					this.OnPlayerPosZChanging(value);
					this.SendPropertyChanging();
					this._PlayerPosZ = value;
					this.SendPropertyChanged("PlayerPosZ");
					this.OnPlayerPosZChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlayerPrimary", DbType="SmallInt NOT NULL")]
		public short PlayerPrimary
		{
			get
			{
				return this._PlayerPrimary;
			}
			set
			{
				if ((this._PlayerPrimary != value))
				{
					this.OnPlayerPrimaryChanging(value);
					this.SendPropertyChanging();
					this._PlayerPrimary = value;
					this.SendPropertyChanged("PlayerPrimary");
					this.OnPlayerPrimaryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlayerSecondary", DbType="SmallInt NOT NULL")]
		public short PlayerSecondary
		{
			get
			{
				return this._PlayerSecondary;
			}
			set
			{
				if ((this._PlayerSecondary != value))
				{
					this.OnPlayerSecondaryChanging(value);
					this.SendPropertyChanging();
					this._PlayerSecondary = value;
					this.SendPropertyChanged("PlayerSecondary");
					this.OnPlayerSecondaryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsCT", DbType="Bit NOT NULL")]
		public bool IsCT
		{
			get
			{
				return this._IsCT;
			}
			set
			{
				if ((this._IsCT != value))
				{
					this.OnIsCTChanging(value);
					this.SendPropertyChanging();
					this._IsCT = value;
					this.SendPropertyChanged("IsCT");
					this.OnIsCTChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VictimId", DbType="BigInt NOT NULL")]
		public long VictimId
		{
			get
			{
				return this._VictimId;
			}
			set
			{
				if ((this._VictimId != value))
				{
					if ((this._PlayerMatchStats1.HasLoadedOrAssignedValue || this._PlayerRoundStats1.HasLoadedOrAssignedValue))
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnVictimIdChanging(value);
					this.SendPropertyChanging();
					this._VictimId = value;
					this.SendPropertyChanged("VictimId");
					this.OnVictimIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VictimPosX", DbType="Float NOT NULL")]
		public double VictimPosX
		{
			get
			{
				return this._VictimPosX;
			}
			set
			{
				if ((this._VictimPosX != value))
				{
					this.OnVictimPosXChanging(value);
					this.SendPropertyChanging();
					this._VictimPosX = value;
					this.SendPropertyChanged("VictimPosX");
					this.OnVictimPosXChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VictimPosY", DbType="Float NOT NULL")]
		public double VictimPosY
		{
			get
			{
				return this._VictimPosY;
			}
			set
			{
				if ((this._VictimPosY != value))
				{
					this.OnVictimPosYChanging(value);
					this.SendPropertyChanging();
					this._VictimPosY = value;
					this.SendPropertyChanged("VictimPosY");
					this.OnVictimPosYChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VictimPosZ", DbType="Float NOT NULL")]
		public double VictimPosZ
		{
			get
			{
				return this._VictimPosZ;
			}
			set
			{
				if ((this._VictimPosZ != value))
				{
					this.OnVictimPosZChanging(value);
					this.SendPropertyChanging();
					this._VictimPosZ = value;
					this.SendPropertyChanged("VictimPosZ");
					this.OnVictimPosZChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VictimPrimary", DbType="SmallInt NOT NULL")]
		public short VictimPrimary
		{
			get
			{
				return this._VictimPrimary;
			}
			set
			{
				if ((this._VictimPrimary != value))
				{
					this.OnVictimPrimaryChanging(value);
					this.SendPropertyChanging();
					this._VictimPrimary = value;
					this.SendPropertyChanged("VictimPrimary");
					this.OnVictimPrimaryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VictimSecondary", DbType="SmallInt NOT NULL")]
		public short VictimSecondary
		{
			get
			{
				return this._VictimSecondary;
			}
			set
			{
				if ((this._VictimSecondary != value))
				{
					this.OnVictimSecondaryChanging(value);
					this.SendPropertyChanging();
					this._VictimSecondary = value;
					this.SendPropertyChanged("VictimSecondary");
					this.OnVictimSecondaryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AssistedFlash", DbType="Bit NOT NULL")]
		public bool AssistedFlash
		{
			get
			{
				return this._AssistedFlash;
			}
			set
			{
				if ((this._AssistedFlash != value))
				{
					this.OnAssistedFlashChanging(value);
					this.SendPropertyChanging();
					this._AssistedFlash = value;
					this.SendPropertyChanged("AssistedFlash");
					this.OnAssistedFlashChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AssisterId", DbType="BigInt")]
		public System.Nullable<long> AssisterId
		{
			get
			{
				return this._AssisterId;
			}
			set
			{
				if ((this._AssisterId != value))
				{
					this.OnAssisterIdChanging(value);
					this.SendPropertyChanging();
					this._AssisterId = value;
					this.SendPropertyChanged("AssisterId");
					this.OnAssisterIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AssisterPosX", DbType="Float")]
		public System.Nullable<double> AssisterPosX
		{
			get
			{
				return this._AssisterPosX;
			}
			set
			{
				if ((this._AssisterPosX != value))
				{
					this.OnAssisterPosXChanging(value);
					this.SendPropertyChanging();
					this._AssisterPosX = value;
					this.SendPropertyChanged("AssisterPosX");
					this.OnAssisterPosXChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AssisterPosY", DbType="Float")]
		public System.Nullable<double> AssisterPosY
		{
			get
			{
				return this._AssisterPosY;
			}
			set
			{
				if ((this._AssisterPosY != value))
				{
					this.OnAssisterPosYChanging(value);
					this.SendPropertyChanging();
					this._AssisterPosY = value;
					this.SendPropertyChanged("AssisterPosY");
					this.OnAssisterPosYChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AssisterPosZ", DbType="Float")]
		public System.Nullable<double> AssisterPosZ
		{
			get
			{
				return this._AssisterPosZ;
			}
			set
			{
				if ((this._AssisterPosZ != value))
				{
					this.OnAssisterPosZChanging(value);
					this.SendPropertyChanging();
					this._AssisterPosZ = value;
					this.SendPropertyChanged("AssisterPosZ");
					this.OnAssisterPosZChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_KillType", DbType="TinyInt NOT NULL")]
		public byte KillType
		{
			get
			{
				return this._KillType;
			}
			set
			{
				if ((this._KillType != value))
				{
					this.OnKillTypeChanging(value);
					this.SendPropertyChanging();
					this._KillType = value;
					this.SendPropertyChanged("KillType");
					this.OnKillTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Weapon", DbType="SmallInt NOT NULL")]
		public short Weapon
		{
			get
			{
				return this._Weapon;
			}
			set
			{
				if ((this._Weapon != value))
				{
					this.OnWeaponChanging(value);
					this.SendPropertyChanging();
					this._Weapon = value;
					this.SendPropertyChanged("Weapon");
					this.OnWeaponChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TeamKill", DbType="Bit NOT NULL")]
		public bool TeamKill
		{
			get
			{
				return this._TeamKill;
			}
			set
			{
				if ((this._TeamKill != value))
				{
					this.OnTeamKillChanging(value);
					this.SendPropertyChanging();
					this._TeamKill = value;
					this.SendPropertyChanged("TeamKill");
					this.OnTeamKillChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DamageId", DbType="BigInt")]
		public System.Nullable<long> DamageId
		{
			get
			{
				return this._DamageId;
			}
			set
			{
				if ((this._DamageId != value))
				{
					if (this._Damage.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDamageIdChanging(value);
					this.SendPropertyChanging();
					this._DamageId = value;
					this.SendPropertyChanged("DamageId");
					this.OnDamageIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlayerZoneByTeam", DbType="Int")]
		public System.Nullable<int> PlayerZoneByTeam
		{
			get
			{
				return this._PlayerZoneByTeam;
			}
			set
			{
				if ((this._PlayerZoneByTeam != value))
				{
					this.OnPlayerZoneByTeamChanging(value);
					this.SendPropertyChanging();
					this._PlayerZoneByTeam = value;
					this.SendPropertyChanged("PlayerZoneByTeam");
					this.OnPlayerZoneByTeamChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VictimZoneByTeam", DbType="Int")]
		public System.Nullable<int> VictimZoneByTeam
		{
			get
			{
				return this._VictimZoneByTeam;
			}
			set
			{
				if ((this._VictimZoneByTeam != value))
				{
					this.OnVictimZoneByTeamChanging(value);
					this.SendPropertyChanging();
					this._VictimZoneByTeam = value;
					this.SendPropertyChanged("VictimZoneByTeam");
					this.OnVictimZoneByTeamChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Kills__Refrag", Storage="__Refrag", ThisKey="MatchId,KillId", OtherKey="MatchId,KillId", IsUnique=true, IsForeignKey=false)]
		public _Refrag _Refrag
		{
			get
			{
				return this.@__Refrag.Entity;
			}
			set
			{
				_Refrag previousValue = this.@__Refrag.Entity;
				if (((previousValue != value) 
							|| (this.@__Refrag.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this.@__Refrag.Entity = null;
						previousValue.Kills = null;
					}
					this.@__Refrag.Entity = value;
					if ((value != null))
					{
						value.Kills = this;
					}
					this.SendPropertyChanged("_Refrag");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Kills__Refrag1", Storage="__Refrag1", ThisKey="MatchId,KillId", OtherKey="MatchId,RefraggedKillId")]
		public EntitySet<_Refrag> _Refrag1
		{
			get
			{
				return this.@__Refrag1;
			}
			set
			{
				this.@__Refrag1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Kills_Flashed", Storage="_Flashed", ThisKey="MatchId,KillId", OtherKey="MatchId,AssistedKillId")]
		public EntitySet<Flashed> Flashed
		{
			get
			{
				return this._Flashed;
			}
			set
			{
				this._Flashed.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Damage_Kills", Storage="_Damage", ThisKey="MatchId,DamageId", OtherKey="MatchId,DamageId", IsForeignKey=true)]
		public Damage Damage
		{
			get
			{
				return this._Damage.Entity;
			}
			set
			{
				Damage previousValue = this._Damage.Entity;
				if (((previousValue != value) 
							|| (this._Damage.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Damage.Entity = null;
						previousValue.Kills.Remove(this);
					}
					this._Damage.Entity = value;
					if ((value != null))
					{
						value.Kills.Add(this);
						this._MatchId = value.MatchId;
						this._DamageId = value.DamageId;
					}
					else
					{
						this._MatchId = default(long);
						this._DamageId = default(Nullable<long>);
					}
					this.SendPropertyChanged("Damage");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MatchStats_Kills", Storage="_MatchStats", ThisKey="MatchId", OtherKey="MatchId", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public MatchStats MatchStats
		{
			get
			{
				return this._MatchStats.Entity;
			}
			set
			{
				MatchStats previousValue = this._MatchStats.Entity;
				if (((previousValue != value) 
							|| (this._MatchStats.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MatchStats.Entity = null;
						previousValue.Kills.Remove(this);
					}
					this._MatchStats.Entity = value;
					if ((value != null))
					{
						value.Kills.Add(this);
						this._MatchId = value.MatchId;
					}
					else
					{
						this._MatchId = default(long);
					}
					this.SendPropertyChanged("MatchStats");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PlayerMatchStats_Kills", Storage="_PlayerMatchStats", ThisKey="MatchId,PlayerId", OtherKey="MatchId,SteamId", IsForeignKey=true)]
		public PlayerMatchStats PlayerMatchStats
		{
			get
			{
				return this._PlayerMatchStats.Entity;
			}
			set
			{
				PlayerMatchStats previousValue = this._PlayerMatchStats.Entity;
				if (((previousValue != value) 
							|| (this._PlayerMatchStats.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PlayerMatchStats.Entity = null;
						previousValue.Kills1.Remove(this);
					}
					this._PlayerMatchStats.Entity = value;
					if ((value != null))
					{
						value.Kills1.Add(this);
						this._MatchId = value.MatchId;
						this._PlayerId = value.SteamId;
					}
					else
					{
						this._MatchId = default(long);
						this._PlayerId = default(long);
					}
					this.SendPropertyChanged("PlayerMatchStats");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PlayerMatchStats_Kills1", Storage="_PlayerMatchStats1", ThisKey="MatchId,VictimId", OtherKey="MatchId,SteamId", IsForeignKey=true)]
		public PlayerMatchStats PlayerMatchStats1
		{
			get
			{
				return this._PlayerMatchStats1.Entity;
			}
			set
			{
				PlayerMatchStats previousValue = this._PlayerMatchStats1.Entity;
				if (((previousValue != value) 
							|| (this._PlayerMatchStats1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PlayerMatchStats1.Entity = null;
						previousValue.Kills2.Remove(this);
					}
					this._PlayerMatchStats1.Entity = value;
					if ((value != null))
					{
						value.Kills2.Add(this);
						this._MatchId = value.MatchId;
						this._VictimId = value.SteamId;
					}
					else
					{
						this._MatchId = default(long);
						this._VictimId = default(long);
					}
					this.SendPropertyChanged("PlayerMatchStats1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PlayerRoundStats_Kills", Storage="_PlayerRoundStats", ThisKey="MatchId,Round,PlayerId", OtherKey="MatchId,Round,PlayerId", IsForeignKey=true)]
		public PlayerRoundStats PlayerRoundStats
		{
			get
			{
				return this._PlayerRoundStats.Entity;
			}
			set
			{
				PlayerRoundStats previousValue = this._PlayerRoundStats.Entity;
				if (((previousValue != value) 
							|| (this._PlayerRoundStats.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PlayerRoundStats.Entity = null;
						previousValue.Kills.Remove(this);
					}
					this._PlayerRoundStats.Entity = value;
					if ((value != null))
					{
						value.Kills.Add(this);
						this._MatchId = value.MatchId;
						this._Round = value.Round;
						this._PlayerId = value.PlayerId;
					}
					else
					{
						this._MatchId = default(long);
						this._Round = default(short);
						this._PlayerId = default(long);
					}
					this.SendPropertyChanged("PlayerRoundStats");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PlayerRoundStats_Kills1", Storage="_PlayerRoundStats1", ThisKey="MatchId,Round,VictimId", OtherKey="MatchId,Round,PlayerId", IsForeignKey=true)]
		public PlayerRoundStats PlayerRoundStats1
		{
			get
			{
				return this._PlayerRoundStats1.Entity;
			}
			set
			{
				PlayerRoundStats previousValue = this._PlayerRoundStats1.Entity;
				if (((previousValue != value) 
							|| (this._PlayerRoundStats1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PlayerRoundStats1.Entity = null;
						previousValue.Kills1.Remove(this);
					}
					this._PlayerRoundStats1.Entity = value;
					if ((value != null))
					{
						value.Kills1.Add(this);
						this._MatchId = value.MatchId;
						this._Round = value.Round;
						this._VictimId = value.PlayerId;
					}
					else
					{
						this._MatchId = default(long);
						this._Round = default(short);
						this._VictimId = default(long);
					}
					this.SendPropertyChanged("PlayerRoundStats1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RoundStats_Kills", Storage="_RoundStats", ThisKey="MatchId,Round", OtherKey="MatchId,Round", IsForeignKey=true)]
		public RoundStats RoundStats
		{
			get
			{
				return this._RoundStats.Entity;
			}
			set
			{
				RoundStats previousValue = this._RoundStats.Entity;
				if (((previousValue != value) 
							|| (this._RoundStats.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._RoundStats.Entity = null;
						previousValue.Kills.Remove(this);
					}
					this._RoundStats.Entity = value;
					if ((value != null))
					{
						value.Kills.Add(this);
						this._MatchId = value.MatchId;
						this._Round = value.Round;
					}
					else
					{
						this._MatchId = default(long);
						this._Round = default(short);
					}
					this.SendPropertyChanged("RoundStats");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach__Refrag1(_Refrag entity)
		{
			this.SendPropertyChanging();
			entity.Kills1 = this;
		}
		
		private void detach__Refrag1(_Refrag entity)
		{
			this.SendPropertyChanging();
			entity.Kills1 = null;
		}
		
		private void attach_Flashed(Flashed entity)
		{
			this.SendPropertyChanging();
			entity.Kills = this;
		}
		
		private void detach_Flashed(Flashed entity)
		{
			this.SendPropertyChanging();
			entity.Kills = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MatchStats")]
	public partial class MatchStats : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _MatchId;
		
		private long _DemoId;
		
		private System.DateTime _MatchDate;
		
		private string _Map;
		
		private byte _WinnerTeam;
		
		private short _Score1;
		
		private short _Score2;
		
		private short _NumRoundsT1;
		
		private short _NumRoundsCT1;
		
		private short _NumRoundsT2;
		
		private short _NumRoundsCT2;
		
		private short _BombPlants1;
		
		private short _BombPlants2;
		
		private short _BombExplodes1;
		
		private short _BombExplodes2;
		
		private short _BombDefuses1;
		
		private short _BombDefuses2;
		
		private int _MoneyEarned1;
		
		private int _MoneyEarned2;
		
		private int _MoneySpent1;
		
		private int _MoneySpent2;
		
		private System.Nullable<int> _AVGRoundTime;
		
		private int _RoundTimer;
		
		private int _BombTimer;
		
		private int _StartMoney;
		
		private short _DemoTickRate;
		
		private short _SourceTickRate;
		
		private string _Event;
		
		private string _Source;
		
		private byte _GameType;
		
		private System.Nullable<double> _AVGRank;
		
		private short _RealScore1;
		
		private short _RealScore2;
		
		private EntitySet<WeaponReload> _WeaponReload;
		
		private EntitySet<_PlayerMatchSmokeStats> @__PlayerMatchSmokeStats;
		
		private EntitySet<_Refrag> @__Refrag;
		
		private EntitySet<_StutterStep> @__StutterStep;
		
		private EntitySet<BombDefused> _BombDefused;
		
		private EntitySet<BombExplosion> _BombExplosion;
		
		private EntitySet<BombPlant> _BombPlant;
		
		private EntitySet<BotTakeOver> _BotTakeOver;
		
		private EntitySet<ConnectDisconnect> _ConnectDisconnect;
		
		private EntitySet<Damage> _Damage;
		
		private EntitySet<Decoy> _Decoy;
		
		private EntitySet<FireNade> _FireNade;
		
		private EntitySet<Flash> _Flash;
		
		private EntitySet<Flashed> _Flashed;
		
		private EntitySet<HE> _HE;
		
		private EntitySet<HostageDrop> _HostageDrop;
		
		private EntitySet<HostagePickUp> _HostagePickUp;
		
		private EntitySet<HostageRescue> _HostageRescue;
		
		private EntitySet<ItemDropped> _ItemDropped;
		
		private EntitySet<ItemPickedUp> _ItemPickedUp;
		
		private EntitySet<ItemSaved> _ItemSaved;
		
		private EntitySet<Kills> _Kills;
		
		private EntityRef<OverTimeStats> _OverTimeStats;
		
		private EntitySet<PlayerMatchStats> _PlayerMatchStats;
		
		private EntitySet<PlayerPosition> _PlayerPosition;
		
		private EntitySet<PlayerRoundStats> _PlayerRoundStats;
		
		private EntitySet<RoundItem> _RoundItem;
		
		private EntitySet<RoundStats> _RoundStats;
		
		private EntitySet<Smoke> _Smoke;
		
		private EntitySet<WeaponFired> _WeaponFired;
		
		private EntityRef<DemoStats> _DemoStats;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMatchIdChanging(long value);
    partial void OnMatchIdChanged();
    partial void OnDemoIdChanging(long value);
    partial void OnDemoIdChanged();
    partial void OnMatchDateChanging(System.DateTime value);
    partial void OnMatchDateChanged();
    partial void OnMapChanging(string value);
    partial void OnMapChanged();
    partial void OnWinnerTeamChanging(byte value);
    partial void OnWinnerTeamChanged();
    partial void OnScore1Changing(short value);
    partial void OnScore1Changed();
    partial void OnScore2Changing(short value);
    partial void OnScore2Changed();
    partial void OnNumRoundsT1Changing(short value);
    partial void OnNumRoundsT1Changed();
    partial void OnNumRoundsCT1Changing(short value);
    partial void OnNumRoundsCT1Changed();
    partial void OnNumRoundsT2Changing(short value);
    partial void OnNumRoundsT2Changed();
    partial void OnNumRoundsCT2Changing(short value);
    partial void OnNumRoundsCT2Changed();
    partial void OnBombPlants1Changing(short value);
    partial void OnBombPlants1Changed();
    partial void OnBombPlants2Changing(short value);
    partial void OnBombPlants2Changed();
    partial void OnBombExplodes1Changing(short value);
    partial void OnBombExplodes1Changed();
    partial void OnBombExplodes2Changing(short value);
    partial void OnBombExplodes2Changed();
    partial void OnBombDefuses1Changing(short value);
    partial void OnBombDefuses1Changed();
    partial void OnBombDefuses2Changing(short value);
    partial void OnBombDefuses2Changed();
    partial void OnMoneyEarned1Changing(int value);
    partial void OnMoneyEarned1Changed();
    partial void OnMoneyEarned2Changing(int value);
    partial void OnMoneyEarned2Changed();
    partial void OnMoneySpent1Changing(int value);
    partial void OnMoneySpent1Changed();
    partial void OnMoneySpent2Changing(int value);
    partial void OnMoneySpent2Changed();
    partial void OnAVGRoundTimeChanging(System.Nullable<int> value);
    partial void OnAVGRoundTimeChanged();
    partial void OnRoundTimerChanging(int value);
    partial void OnRoundTimerChanged();
    partial void OnBombTimerChanging(int value);
    partial void OnBombTimerChanged();
    partial void OnStartMoneyChanging(int value);
    partial void OnStartMoneyChanged();
    partial void OnDemoTickRateChanging(short value);
    partial void OnDemoTickRateChanged();
    partial void OnSourceTickRateChanging(short value);
    partial void OnSourceTickRateChanged();
    partial void OnEventChanging(string value);
    partial void OnEventChanged();
    partial void OnSourceChanging(string value);
    partial void OnSourceChanged();
    partial void OnGameTypeChanging(byte value);
    partial void OnGameTypeChanged();
    partial void OnAVGRankChanging(System.Nullable<double> value);
    partial void OnAVGRankChanged();
    partial void OnRealScore1Changing(short value);
    partial void OnRealScore1Changed();
    partial void OnRealScore2Changing(short value);
    partial void OnRealScore2Changed();
    #endregion
		
		public MatchStats()
		{
			this._WeaponReload = new EntitySet<WeaponReload>(new Action<WeaponReload>(this.attach_WeaponReload), new Action<WeaponReload>(this.detach_WeaponReload));
			this.@__PlayerMatchSmokeStats = new EntitySet<_PlayerMatchSmokeStats>(new Action<_PlayerMatchSmokeStats>(this.attach__PlayerMatchSmokeStats), new Action<_PlayerMatchSmokeStats>(this.detach__PlayerMatchSmokeStats));
			this.@__Refrag = new EntitySet<_Refrag>(new Action<_Refrag>(this.attach__Refrag), new Action<_Refrag>(this.detach__Refrag));
			this.@__StutterStep = new EntitySet<_StutterStep>(new Action<_StutterStep>(this.attach__StutterStep), new Action<_StutterStep>(this.detach__StutterStep));
			this._BombDefused = new EntitySet<BombDefused>(new Action<BombDefused>(this.attach_BombDefused), new Action<BombDefused>(this.detach_BombDefused));
			this._BombExplosion = new EntitySet<BombExplosion>(new Action<BombExplosion>(this.attach_BombExplosion), new Action<BombExplosion>(this.detach_BombExplosion));
			this._BombPlant = new EntitySet<BombPlant>(new Action<BombPlant>(this.attach_BombPlant), new Action<BombPlant>(this.detach_BombPlant));
			this._BotTakeOver = new EntitySet<BotTakeOver>(new Action<BotTakeOver>(this.attach_BotTakeOver), new Action<BotTakeOver>(this.detach_BotTakeOver));
			this._ConnectDisconnect = new EntitySet<ConnectDisconnect>(new Action<ConnectDisconnect>(this.attach_ConnectDisconnect), new Action<ConnectDisconnect>(this.detach_ConnectDisconnect));
			this._Damage = new EntitySet<Damage>(new Action<Damage>(this.attach_Damage), new Action<Damage>(this.detach_Damage));
			this._Decoy = new EntitySet<Decoy>(new Action<Decoy>(this.attach_Decoy), new Action<Decoy>(this.detach_Decoy));
			this._FireNade = new EntitySet<FireNade>(new Action<FireNade>(this.attach_FireNade), new Action<FireNade>(this.detach_FireNade));
			this._Flash = new EntitySet<Flash>(new Action<Flash>(this.attach_Flash), new Action<Flash>(this.detach_Flash));
			this._Flashed = new EntitySet<Flashed>(new Action<Flashed>(this.attach_Flashed), new Action<Flashed>(this.detach_Flashed));
			this._HE = new EntitySet<HE>(new Action<HE>(this.attach_HE), new Action<HE>(this.detach_HE));
			this._HostageDrop = new EntitySet<HostageDrop>(new Action<HostageDrop>(this.attach_HostageDrop), new Action<HostageDrop>(this.detach_HostageDrop));
			this._HostagePickUp = new EntitySet<HostagePickUp>(new Action<HostagePickUp>(this.attach_HostagePickUp), new Action<HostagePickUp>(this.detach_HostagePickUp));
			this._HostageRescue = new EntitySet<HostageRescue>(new Action<HostageRescue>(this.attach_HostageRescue), new Action<HostageRescue>(this.detach_HostageRescue));
			this._ItemDropped = new EntitySet<ItemDropped>(new Action<ItemDropped>(this.attach_ItemDropped), new Action<ItemDropped>(this.detach_ItemDropped));
			this._ItemPickedUp = new EntitySet<ItemPickedUp>(new Action<ItemPickedUp>(this.attach_ItemPickedUp), new Action<ItemPickedUp>(this.detach_ItemPickedUp));
			this._ItemSaved = new EntitySet<ItemSaved>(new Action<ItemSaved>(this.attach_ItemSaved), new Action<ItemSaved>(this.detach_ItemSaved));
			this._Kills = new EntitySet<Kills>(new Action<Kills>(this.attach_Kills), new Action<Kills>(this.detach_Kills));
			this._OverTimeStats = default(EntityRef<OverTimeStats>);
			this._PlayerMatchStats = new EntitySet<PlayerMatchStats>(new Action<PlayerMatchStats>(this.attach_PlayerMatchStats), new Action<PlayerMatchStats>(this.detach_PlayerMatchStats));
			this._PlayerPosition = new EntitySet<PlayerPosition>(new Action<PlayerPosition>(this.attach_PlayerPosition), new Action<PlayerPosition>(this.detach_PlayerPosition));
			this._PlayerRoundStats = new EntitySet<PlayerRoundStats>(new Action<PlayerRoundStats>(this.attach_PlayerRoundStats), new Action<PlayerRoundStats>(this.detach_PlayerRoundStats));
			this._RoundItem = new EntitySet<RoundItem>(new Action<RoundItem>(this.attach_RoundItem), new Action<RoundItem>(this.detach_RoundItem));
			this._RoundStats = new EntitySet<RoundStats>(new Action<RoundStats>(this.attach_RoundStats), new Action<RoundStats>(this.detach_RoundStats));
			this._Smoke = new EntitySet<Smoke>(new Action<Smoke>(this.attach_Smoke), new Action<Smoke>(this.detach_Smoke));
			this._WeaponFired = new EntitySet<WeaponFired>(new Action<WeaponFired>(this.attach_WeaponFired), new Action<WeaponFired>(this.detach_WeaponFired));
			this._DemoStats = default(EntityRef<DemoStats>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MatchId", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long MatchId
		{
			get
			{
				return this._MatchId;
			}
			set
			{
				if ((this._MatchId != value))
				{
					this.OnMatchIdChanging(value);
					this.SendPropertyChanging();
					this._MatchId = value;
					this.SendPropertyChanged("MatchId");
					this.OnMatchIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DemoId", DbType="BigInt NOT NULL")]
		public long DemoId
		{
			get
			{
				return this._DemoId;
			}
			set
			{
				if ((this._DemoId != value))
				{
					if (this._DemoStats.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDemoIdChanging(value);
					this.SendPropertyChanging();
					this._DemoId = value;
					this.SendPropertyChanged("DemoId");
					this.OnDemoIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MatchDate", DbType="DateTime NOT NULL")]
		public System.DateTime MatchDate
		{
			get
			{
				return this._MatchDate;
			}
			set
			{
				if ((this._MatchDate != value))
				{
					this.OnMatchDateChanging(value);
					this.SendPropertyChanging();
					this._MatchDate = value;
					this.SendPropertyChanged("MatchDate");
					this.OnMatchDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Map", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Map
		{
			get
			{
				return this._Map;
			}
			set
			{
				if ((this._Map != value))
				{
					this.OnMapChanging(value);
					this.SendPropertyChanging();
					this._Map = value;
					this.SendPropertyChanged("Map");
					this.OnMapChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WinnerTeam", DbType="TinyInt NOT NULL")]
		public byte WinnerTeam
		{
			get
			{
				return this._WinnerTeam;
			}
			set
			{
				if ((this._WinnerTeam != value))
				{
					this.OnWinnerTeamChanging(value);
					this.SendPropertyChanging();
					this._WinnerTeam = value;
					this.SendPropertyChanged("WinnerTeam");
					this.OnWinnerTeamChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Score1", DbType="SmallInt NOT NULL")]
		public short Score1
		{
			get
			{
				return this._Score1;
			}
			set
			{
				if ((this._Score1 != value))
				{
					this.OnScore1Changing(value);
					this.SendPropertyChanging();
					this._Score1 = value;
					this.SendPropertyChanged("Score1");
					this.OnScore1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Score2", DbType="SmallInt NOT NULL")]
		public short Score2
		{
			get
			{
				return this._Score2;
			}
			set
			{
				if ((this._Score2 != value))
				{
					this.OnScore2Changing(value);
					this.SendPropertyChanging();
					this._Score2 = value;
					this.SendPropertyChanged("Score2");
					this.OnScore2Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NumRoundsT1", DbType="SmallInt NOT NULL")]
		public short NumRoundsT1
		{
			get
			{
				return this._NumRoundsT1;
			}
			set
			{
				if ((this._NumRoundsT1 != value))
				{
					this.OnNumRoundsT1Changing(value);
					this.SendPropertyChanging();
					this._NumRoundsT1 = value;
					this.SendPropertyChanged("NumRoundsT1");
					this.OnNumRoundsT1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NumRoundsCT1", DbType="SmallInt NOT NULL")]
		public short NumRoundsCT1
		{
			get
			{
				return this._NumRoundsCT1;
			}
			set
			{
				if ((this._NumRoundsCT1 != value))
				{
					this.OnNumRoundsCT1Changing(value);
					this.SendPropertyChanging();
					this._NumRoundsCT1 = value;
					this.SendPropertyChanged("NumRoundsCT1");
					this.OnNumRoundsCT1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NumRoundsT2", DbType="SmallInt NOT NULL")]
		public short NumRoundsT2
		{
			get
			{
				return this._NumRoundsT2;
			}
			set
			{
				if ((this._NumRoundsT2 != value))
				{
					this.OnNumRoundsT2Changing(value);
					this.SendPropertyChanging();
					this._NumRoundsT2 = value;
					this.SendPropertyChanged("NumRoundsT2");
					this.OnNumRoundsT2Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NumRoundsCT2", DbType="SmallInt NOT NULL")]
		public short NumRoundsCT2
		{
			get
			{
				return this._NumRoundsCT2;
			}
			set
			{
				if ((this._NumRoundsCT2 != value))
				{
					this.OnNumRoundsCT2Changing(value);
					this.SendPropertyChanging();
					this._NumRoundsCT2 = value;
					this.SendPropertyChanged("NumRoundsCT2");
					this.OnNumRoundsCT2Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BombPlants1", DbType="SmallInt NOT NULL")]
		public short BombPlants1
		{
			get
			{
				return this._BombPlants1;
			}
			set
			{
				if ((this._BombPlants1 != value))
				{
					this.OnBombPlants1Changing(value);
					this.SendPropertyChanging();
					this._BombPlants1 = value;
					this.SendPropertyChanged("BombPlants1");
					this.OnBombPlants1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BombPlants2", DbType="SmallInt NOT NULL")]
		public short BombPlants2
		{
			get
			{
				return this._BombPlants2;
			}
			set
			{
				if ((this._BombPlants2 != value))
				{
					this.OnBombPlants2Changing(value);
					this.SendPropertyChanging();
					this._BombPlants2 = value;
					this.SendPropertyChanged("BombPlants2");
					this.OnBombPlants2Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BombExplodes1", DbType="SmallInt NOT NULL")]
		public short BombExplodes1
		{
			get
			{
				return this._BombExplodes1;
			}
			set
			{
				if ((this._BombExplodes1 != value))
				{
					this.OnBombExplodes1Changing(value);
					this.SendPropertyChanging();
					this._BombExplodes1 = value;
					this.SendPropertyChanged("BombExplodes1");
					this.OnBombExplodes1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BombExplodes2", DbType="SmallInt NOT NULL")]
		public short BombExplodes2
		{
			get
			{
				return this._BombExplodes2;
			}
			set
			{
				if ((this._BombExplodes2 != value))
				{
					this.OnBombExplodes2Changing(value);
					this.SendPropertyChanging();
					this._BombExplodes2 = value;
					this.SendPropertyChanged("BombExplodes2");
					this.OnBombExplodes2Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BombDefuses1", DbType="SmallInt NOT NULL")]
		public short BombDefuses1
		{
			get
			{
				return this._BombDefuses1;
			}
			set
			{
				if ((this._BombDefuses1 != value))
				{
					this.OnBombDefuses1Changing(value);
					this.SendPropertyChanging();
					this._BombDefuses1 = value;
					this.SendPropertyChanged("BombDefuses1");
					this.OnBombDefuses1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BombDefuses2", DbType="SmallInt NOT NULL")]
		public short BombDefuses2
		{
			get
			{
				return this._BombDefuses2;
			}
			set
			{
				if ((this._BombDefuses2 != value))
				{
					this.OnBombDefuses2Changing(value);
					this.SendPropertyChanging();
					this._BombDefuses2 = value;
					this.SendPropertyChanged("BombDefuses2");
					this.OnBombDefuses2Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MoneyEarned1", DbType="Int NOT NULL")]
		public int MoneyEarned1
		{
			get
			{
				return this._MoneyEarned1;
			}
			set
			{
				if ((this._MoneyEarned1 != value))
				{
					this.OnMoneyEarned1Changing(value);
					this.SendPropertyChanging();
					this._MoneyEarned1 = value;
					this.SendPropertyChanged("MoneyEarned1");
					this.OnMoneyEarned1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MoneyEarned2", DbType="Int NOT NULL")]
		public int MoneyEarned2
		{
			get
			{
				return this._MoneyEarned2;
			}
			set
			{
				if ((this._MoneyEarned2 != value))
				{
					this.OnMoneyEarned2Changing(value);
					this.SendPropertyChanging();
					this._MoneyEarned2 = value;
					this.SendPropertyChanged("MoneyEarned2");
					this.OnMoneyEarned2Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MoneySpent1", DbType="Int NOT NULL")]
		public int MoneySpent1
		{
			get
			{
				return this._MoneySpent1;
			}
			set
			{
				if ((this._MoneySpent1 != value))
				{
					this.OnMoneySpent1Changing(value);
					this.SendPropertyChanging();
					this._MoneySpent1 = value;
					this.SendPropertyChanged("MoneySpent1");
					this.OnMoneySpent1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MoneySpent2", DbType="Int NOT NULL")]
		public int MoneySpent2
		{
			get
			{
				return this._MoneySpent2;
			}
			set
			{
				if ((this._MoneySpent2 != value))
				{
					this.OnMoneySpent2Changing(value);
					this.SendPropertyChanging();
					this._MoneySpent2 = value;
					this.SendPropertyChanged("MoneySpent2");
					this.OnMoneySpent2Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AVGRoundTime", DbType="Int")]
		public System.Nullable<int> AVGRoundTime
		{
			get
			{
				return this._AVGRoundTime;
			}
			set
			{
				if ((this._AVGRoundTime != value))
				{
					this.OnAVGRoundTimeChanging(value);
					this.SendPropertyChanging();
					this._AVGRoundTime = value;
					this.SendPropertyChanged("AVGRoundTime");
					this.OnAVGRoundTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoundTimer", DbType="Int NOT NULL")]
		public int RoundTimer
		{
			get
			{
				return this._RoundTimer;
			}
			set
			{
				if ((this._RoundTimer != value))
				{
					this.OnRoundTimerChanging(value);
					this.SendPropertyChanging();
					this._RoundTimer = value;
					this.SendPropertyChanged("RoundTimer");
					this.OnRoundTimerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BombTimer", DbType="Int NOT NULL")]
		public int BombTimer
		{
			get
			{
				return this._BombTimer;
			}
			set
			{
				if ((this._BombTimer != value))
				{
					this.OnBombTimerChanging(value);
					this.SendPropertyChanging();
					this._BombTimer = value;
					this.SendPropertyChanged("BombTimer");
					this.OnBombTimerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StartMoney", DbType="Int NOT NULL")]
		public int StartMoney
		{
			get
			{
				return this._StartMoney;
			}
			set
			{
				if ((this._StartMoney != value))
				{
					this.OnStartMoneyChanging(value);
					this.SendPropertyChanging();
					this._StartMoney = value;
					this.SendPropertyChanged("StartMoney");
					this.OnStartMoneyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DemoTickRate", DbType="SmallInt NOT NULL")]
		public short DemoTickRate
		{
			get
			{
				return this._DemoTickRate;
			}
			set
			{
				if ((this._DemoTickRate != value))
				{
					this.OnDemoTickRateChanging(value);
					this.SendPropertyChanging();
					this._DemoTickRate = value;
					this.SendPropertyChanged("DemoTickRate");
					this.OnDemoTickRateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SourceTickRate", DbType="SmallInt NOT NULL")]
		public short SourceTickRate
		{
			get
			{
				return this._SourceTickRate;
			}
			set
			{
				if ((this._SourceTickRate != value))
				{
					this.OnSourceTickRateChanging(value);
					this.SendPropertyChanging();
					this._SourceTickRate = value;
					this.SendPropertyChanged("SourceTickRate");
					this.OnSourceTickRateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Event", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Event
		{
			get
			{
				return this._Event;
			}
			set
			{
				if ((this._Event != value))
				{
					this.OnEventChanging(value);
					this.SendPropertyChanging();
					this._Event = value;
					this.SendPropertyChanged("Event");
					this.OnEventChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Source", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Source
		{
			get
			{
				return this._Source;
			}
			set
			{
				if ((this._Source != value))
				{
					this.OnSourceChanging(value);
					this.SendPropertyChanging();
					this._Source = value;
					this.SendPropertyChanged("Source");
					this.OnSourceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GameType", DbType="TinyInt NOT NULL")]
		public byte GameType
		{
			get
			{
				return this._GameType;
			}
			set
			{
				if ((this._GameType != value))
				{
					this.OnGameTypeChanging(value);
					this.SendPropertyChanging();
					this._GameType = value;
					this.SendPropertyChanged("GameType");
					this.OnGameTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AVGRank", DbType="Float")]
		public System.Nullable<double> AVGRank
		{
			get
			{
				return this._AVGRank;
			}
			set
			{
				if ((this._AVGRank != value))
				{
					this.OnAVGRankChanging(value);
					this.SendPropertyChanging();
					this._AVGRank = value;
					this.SendPropertyChanged("AVGRank");
					this.OnAVGRankChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RealScore1", DbType="SmallInt NOT NULL")]
		public short RealScore1
		{
			get
			{
				return this._RealScore1;
			}
			set
			{
				if ((this._RealScore1 != value))
				{
					this.OnRealScore1Changing(value);
					this.SendPropertyChanging();
					this._RealScore1 = value;
					this.SendPropertyChanged("RealScore1");
					this.OnRealScore1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RealScore2", DbType="SmallInt NOT NULL")]
		public short RealScore2
		{
			get
			{
				return this._RealScore2;
			}
			set
			{
				if ((this._RealScore2 != value))
				{
					this.OnRealScore2Changing(value);
					this.SendPropertyChanging();
					this._RealScore2 = value;
					this.SendPropertyChanged("RealScore2");
					this.OnRealScore2Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MatchStats_WeaponReload", Storage="_WeaponReload", ThisKey="MatchId", OtherKey="MatchId")]
		public EntitySet<WeaponReload> WeaponReload
		{
			get
			{
				return this._WeaponReload;
			}
			set
			{
				this._WeaponReload.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MatchStats__PlayerMatchSmokeStats", Storage="__PlayerMatchSmokeStats", ThisKey="MatchId", OtherKey="MatchId")]
		public EntitySet<_PlayerMatchSmokeStats> _PlayerMatchSmokeStats
		{
			get
			{
				return this.@__PlayerMatchSmokeStats;
			}
			set
			{
				this.@__PlayerMatchSmokeStats.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MatchStats__Refrag", Storage="__Refrag", ThisKey="MatchId", OtherKey="MatchId")]
		public EntitySet<_Refrag> _Refrag
		{
			get
			{
				return this.@__Refrag;
			}
			set
			{
				this.@__Refrag.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MatchStats__StutterStep", Storage="__StutterStep", ThisKey="MatchId", OtherKey="MatchId")]
		public EntitySet<_StutterStep> _StutterStep
		{
			get
			{
				return this.@__StutterStep;
			}
			set
			{
				this.@__StutterStep.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MatchStats_BombDefused", Storage="_BombDefused", ThisKey="MatchId", OtherKey="MatchId")]
		public EntitySet<BombDefused> BombDefused
		{
			get
			{
				return this._BombDefused;
			}
			set
			{
				this._BombDefused.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MatchStats_BombExplosion", Storage="_BombExplosion", ThisKey="MatchId", OtherKey="MatchId")]
		public EntitySet<BombExplosion> BombExplosion
		{
			get
			{
				return this._BombExplosion;
			}
			set
			{
				this._BombExplosion.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MatchStats_BombPlant", Storage="_BombPlant", ThisKey="MatchId", OtherKey="MatchId")]
		public EntitySet<BombPlant> BombPlant
		{
			get
			{
				return this._BombPlant;
			}
			set
			{
				this._BombPlant.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MatchStats_BotTakeOver", Storage="_BotTakeOver", ThisKey="MatchId", OtherKey="MatchId")]
		public EntitySet<BotTakeOver> BotTakeOver
		{
			get
			{
				return this._BotTakeOver;
			}
			set
			{
				this._BotTakeOver.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MatchStats_ConnectDisconnect", Storage="_ConnectDisconnect", ThisKey="MatchId", OtherKey="MatchId")]
		public EntitySet<ConnectDisconnect> ConnectDisconnect
		{
			get
			{
				return this._ConnectDisconnect;
			}
			set
			{
				this._ConnectDisconnect.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MatchStats_Damage", Storage="_Damage", ThisKey="MatchId", OtherKey="MatchId")]
		public EntitySet<Damage> Damage
		{
			get
			{
				return this._Damage;
			}
			set
			{
				this._Damage.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MatchStats_Decoy", Storage="_Decoy", ThisKey="MatchId", OtherKey="MatchId")]
		public EntitySet<Decoy> Decoy
		{
			get
			{
				return this._Decoy;
			}
			set
			{
				this._Decoy.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MatchStats_FireNade", Storage="_FireNade", ThisKey="MatchId", OtherKey="MatchId")]
		public EntitySet<FireNade> FireNade
		{
			get
			{
				return this._FireNade;
			}
			set
			{
				this._FireNade.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MatchStats_Flash", Storage="_Flash", ThisKey="MatchId", OtherKey="MatchId")]
		public EntitySet<Flash> Flash
		{
			get
			{
				return this._Flash;
			}
			set
			{
				this._Flash.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MatchStats_Flashed", Storage="_Flashed", ThisKey="MatchId", OtherKey="MatchId")]
		public EntitySet<Flashed> Flashed
		{
			get
			{
				return this._Flashed;
			}
			set
			{
				this._Flashed.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MatchStats_HE", Storage="_HE", ThisKey="MatchId", OtherKey="MatchId")]
		public EntitySet<HE> HE
		{
			get
			{
				return this._HE;
			}
			set
			{
				this._HE.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MatchStats_HostageDrop", Storage="_HostageDrop", ThisKey="MatchId", OtherKey="MatchId")]
		public EntitySet<HostageDrop> HostageDrop
		{
			get
			{
				return this._HostageDrop;
			}
			set
			{
				this._HostageDrop.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MatchStats_HostagePickUp", Storage="_HostagePickUp", ThisKey="MatchId", OtherKey="MatchId")]
		public EntitySet<HostagePickUp> HostagePickUp
		{
			get
			{
				return this._HostagePickUp;
			}
			set
			{
				this._HostagePickUp.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MatchStats_HostageRescue", Storage="_HostageRescue", ThisKey="MatchId", OtherKey="MatchId")]
		public EntitySet<HostageRescue> HostageRescue
		{
			get
			{
				return this._HostageRescue;
			}
			set
			{
				this._HostageRescue.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MatchStats_ItemDropped", Storage="_ItemDropped", ThisKey="MatchId", OtherKey="MatchId")]
		public EntitySet<ItemDropped> ItemDropped
		{
			get
			{
				return this._ItemDropped;
			}
			set
			{
				this._ItemDropped.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MatchStats_ItemPickedUp", Storage="_ItemPickedUp", ThisKey="MatchId", OtherKey="MatchId")]
		public EntitySet<ItemPickedUp> ItemPickedUp
		{
			get
			{
				return this._ItemPickedUp;
			}
			set
			{
				this._ItemPickedUp.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MatchStats_ItemSaved", Storage="_ItemSaved", ThisKey="MatchId", OtherKey="MatchId")]
		public EntitySet<ItemSaved> ItemSaved
		{
			get
			{
				return this._ItemSaved;
			}
			set
			{
				this._ItemSaved.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MatchStats_Kills", Storage="_Kills", ThisKey="MatchId", OtherKey="MatchId")]
		public EntitySet<Kills> Kills
		{
			get
			{
				return this._Kills;
			}
			set
			{
				this._Kills.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MatchStats_OverTimeStats", Storage="_OverTimeStats", ThisKey="MatchId", OtherKey="MatchId", IsUnique=true, IsForeignKey=false)]
		public OverTimeStats OverTimeStats
		{
			get
			{
				return this._OverTimeStats.Entity;
			}
			set
			{
				OverTimeStats previousValue = this._OverTimeStats.Entity;
				if (((previousValue != value) 
							|| (this._OverTimeStats.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._OverTimeStats.Entity = null;
						previousValue.MatchStats = null;
					}
					this._OverTimeStats.Entity = value;
					if ((value != null))
					{
						value.MatchStats = this;
					}
					this.SendPropertyChanged("OverTimeStats");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MatchStats_PlayerMatchStats", Storage="_PlayerMatchStats", ThisKey="MatchId", OtherKey="MatchId")]
		public EntitySet<PlayerMatchStats> PlayerMatchStats
		{
			get
			{
				return this._PlayerMatchStats;
			}
			set
			{
				this._PlayerMatchStats.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MatchStats_PlayerPosition", Storage="_PlayerPosition", ThisKey="MatchId", OtherKey="MatchId")]
		public EntitySet<PlayerPosition> PlayerPosition
		{
			get
			{
				return this._PlayerPosition;
			}
			set
			{
				this._PlayerPosition.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MatchStats_PlayerRoundStats", Storage="_PlayerRoundStats", ThisKey="MatchId", OtherKey="MatchId")]
		public EntitySet<PlayerRoundStats> PlayerRoundStats
		{
			get
			{
				return this._PlayerRoundStats;
			}
			set
			{
				this._PlayerRoundStats.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MatchStats_RoundItem", Storage="_RoundItem", ThisKey="MatchId", OtherKey="MatchId")]
		public EntitySet<RoundItem> RoundItem
		{
			get
			{
				return this._RoundItem;
			}
			set
			{
				this._RoundItem.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MatchStats_RoundStats", Storage="_RoundStats", ThisKey="MatchId", OtherKey="MatchId")]
		public EntitySet<RoundStats> RoundStats
		{
			get
			{
				return this._RoundStats;
			}
			set
			{
				this._RoundStats.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MatchStats_Smoke", Storage="_Smoke", ThisKey="MatchId", OtherKey="MatchId")]
		public EntitySet<Smoke> Smoke
		{
			get
			{
				return this._Smoke;
			}
			set
			{
				this._Smoke.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MatchStats_WeaponFired", Storage="_WeaponFired", ThisKey="MatchId", OtherKey="MatchId")]
		public EntitySet<WeaponFired> WeaponFired
		{
			get
			{
				return this._WeaponFired;
			}
			set
			{
				this._WeaponFired.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DemoStats_MatchStats", Storage="_DemoStats", ThisKey="DemoId", OtherKey="DemoId", IsForeignKey=true)]
		public DemoStats DemoStats
		{
			get
			{
				return this._DemoStats.Entity;
			}
			set
			{
				DemoStats previousValue = this._DemoStats.Entity;
				if (((previousValue != value) 
							|| (this._DemoStats.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DemoStats.Entity = null;
						previousValue.MatchStats.Remove(this);
					}
					this._DemoStats.Entity = value;
					if ((value != null))
					{
						value.MatchStats.Add(this);
						this._DemoId = value.DemoId;
					}
					else
					{
						this._DemoId = default(long);
					}
					this.SendPropertyChanged("DemoStats");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_WeaponReload(WeaponReload entity)
		{
			this.SendPropertyChanging();
			entity.MatchStats = this;
		}
		
		private void detach_WeaponReload(WeaponReload entity)
		{
			this.SendPropertyChanging();
			entity.MatchStats = null;
		}
		
		private void attach__PlayerMatchSmokeStats(_PlayerMatchSmokeStats entity)
		{
			this.SendPropertyChanging();
			entity.MatchStats = this;
		}
		
		private void detach__PlayerMatchSmokeStats(_PlayerMatchSmokeStats entity)
		{
			this.SendPropertyChanging();
			entity.MatchStats = null;
		}
		
		private void attach__Refrag(_Refrag entity)
		{
			this.SendPropertyChanging();
			entity.MatchStats = this;
		}
		
		private void detach__Refrag(_Refrag entity)
		{
			this.SendPropertyChanging();
			entity.MatchStats = null;
		}
		
		private void attach__StutterStep(_StutterStep entity)
		{
			this.SendPropertyChanging();
			entity.MatchStats = this;
		}
		
		private void detach__StutterStep(_StutterStep entity)
		{
			this.SendPropertyChanging();
			entity.MatchStats = null;
		}
		
		private void attach_BombDefused(BombDefused entity)
		{
			this.SendPropertyChanging();
			entity.MatchStats = this;
		}
		
		private void detach_BombDefused(BombDefused entity)
		{
			this.SendPropertyChanging();
			entity.MatchStats = null;
		}
		
		private void attach_BombExplosion(BombExplosion entity)
		{
			this.SendPropertyChanging();
			entity.MatchStats = this;
		}
		
		private void detach_BombExplosion(BombExplosion entity)
		{
			this.SendPropertyChanging();
			entity.MatchStats = null;
		}
		
		private void attach_BombPlant(BombPlant entity)
		{
			this.SendPropertyChanging();
			entity.MatchStats = this;
		}
		
		private void detach_BombPlant(BombPlant entity)
		{
			this.SendPropertyChanging();
			entity.MatchStats = null;
		}
		
		private void attach_BotTakeOver(BotTakeOver entity)
		{
			this.SendPropertyChanging();
			entity.MatchStats = this;
		}
		
		private void detach_BotTakeOver(BotTakeOver entity)
		{
			this.SendPropertyChanging();
			entity.MatchStats = null;
		}
		
		private void attach_ConnectDisconnect(ConnectDisconnect entity)
		{
			this.SendPropertyChanging();
			entity.MatchStats = this;
		}
		
		private void detach_ConnectDisconnect(ConnectDisconnect entity)
		{
			this.SendPropertyChanging();
			entity.MatchStats = null;
		}
		
		private void attach_Damage(Damage entity)
		{
			this.SendPropertyChanging();
			entity.MatchStats = this;
		}
		
		private void detach_Damage(Damage entity)
		{
			this.SendPropertyChanging();
			entity.MatchStats = null;
		}
		
		private void attach_Decoy(Decoy entity)
		{
			this.SendPropertyChanging();
			entity.MatchStats = this;
		}
		
		private void detach_Decoy(Decoy entity)
		{
			this.SendPropertyChanging();
			entity.MatchStats = null;
		}
		
		private void attach_FireNade(FireNade entity)
		{
			this.SendPropertyChanging();
			entity.MatchStats = this;
		}
		
		private void detach_FireNade(FireNade entity)
		{
			this.SendPropertyChanging();
			entity.MatchStats = null;
		}
		
		private void attach_Flash(Flash entity)
		{
			this.SendPropertyChanging();
			entity.MatchStats = this;
		}
		
		private void detach_Flash(Flash entity)
		{
			this.SendPropertyChanging();
			entity.MatchStats = null;
		}
		
		private void attach_Flashed(Flashed entity)
		{
			this.SendPropertyChanging();
			entity.MatchStats = this;
		}
		
		private void detach_Flashed(Flashed entity)
		{
			this.SendPropertyChanging();
			entity.MatchStats = null;
		}
		
		private void attach_HE(HE entity)
		{
			this.SendPropertyChanging();
			entity.MatchStats = this;
		}
		
		private void detach_HE(HE entity)
		{
			this.SendPropertyChanging();
			entity.MatchStats = null;
		}
		
		private void attach_HostageDrop(HostageDrop entity)
		{
			this.SendPropertyChanging();
			entity.MatchStats = this;
		}
		
		private void detach_HostageDrop(HostageDrop entity)
		{
			this.SendPropertyChanging();
			entity.MatchStats = null;
		}
		
		private void attach_HostagePickUp(HostagePickUp entity)
		{
			this.SendPropertyChanging();
			entity.MatchStats = this;
		}
		
		private void detach_HostagePickUp(HostagePickUp entity)
		{
			this.SendPropertyChanging();
			entity.MatchStats = null;
		}
		
		private void attach_HostageRescue(HostageRescue entity)
		{
			this.SendPropertyChanging();
			entity.MatchStats = this;
		}
		
		private void detach_HostageRescue(HostageRescue entity)
		{
			this.SendPropertyChanging();
			entity.MatchStats = null;
		}
		
		private void attach_ItemDropped(ItemDropped entity)
		{
			this.SendPropertyChanging();
			entity.MatchStats = this;
		}
		
		private void detach_ItemDropped(ItemDropped entity)
		{
			this.SendPropertyChanging();
			entity.MatchStats = null;
		}
		
		private void attach_ItemPickedUp(ItemPickedUp entity)
		{
			this.SendPropertyChanging();
			entity.MatchStats = this;
		}
		
		private void detach_ItemPickedUp(ItemPickedUp entity)
		{
			this.SendPropertyChanging();
			entity.MatchStats = null;
		}
		
		private void attach_ItemSaved(ItemSaved entity)
		{
			this.SendPropertyChanging();
			entity.MatchStats = this;
		}
		
		private void detach_ItemSaved(ItemSaved entity)
		{
			this.SendPropertyChanging();
			entity.MatchStats = null;
		}
		
		private void attach_Kills(Kills entity)
		{
			this.SendPropertyChanging();
			entity.MatchStats = this;
		}
		
		private void detach_Kills(Kills entity)
		{
			this.SendPropertyChanging();
			entity.MatchStats = null;
		}
		
		private void attach_PlayerMatchStats(PlayerMatchStats entity)
		{
			this.SendPropertyChanging();
			entity.MatchStats = this;
		}
		
		private void detach_PlayerMatchStats(PlayerMatchStats entity)
		{
			this.SendPropertyChanging();
			entity.MatchStats = null;
		}
		
		private void attach_PlayerPosition(PlayerPosition entity)
		{
			this.SendPropertyChanging();
			entity.MatchStats = this;
		}
		
		private void detach_PlayerPosition(PlayerPosition entity)
		{
			this.SendPropertyChanging();
			entity.MatchStats = null;
		}
		
		private void attach_PlayerRoundStats(PlayerRoundStats entity)
		{
			this.SendPropertyChanging();
			entity.MatchStats = this;
		}
		
		private void detach_PlayerRoundStats(PlayerRoundStats entity)
		{
			this.SendPropertyChanging();
			entity.MatchStats = null;
		}
		
		private void attach_RoundItem(RoundItem entity)
		{
			this.SendPropertyChanging();
			entity.MatchStats = this;
		}
		
		private void detach_RoundItem(RoundItem entity)
		{
			this.SendPropertyChanging();
			entity.MatchStats = null;
		}
		
		private void attach_RoundStats(RoundStats entity)
		{
			this.SendPropertyChanging();
			entity.MatchStats = this;
		}
		
		private void detach_RoundStats(RoundStats entity)
		{
			this.SendPropertyChanging();
			entity.MatchStats = null;
		}
		
		private void attach_Smoke(Smoke entity)
		{
			this.SendPropertyChanging();
			entity.MatchStats = this;
		}
		
		private void detach_Smoke(Smoke entity)
		{
			this.SendPropertyChanging();
			entity.MatchStats = null;
		}
		
		private void attach_WeaponFired(WeaponFired entity)
		{
			this.SendPropertyChanging();
			entity.MatchStats = this;
		}
		
		private void detach_WeaponFired(WeaponFired entity)
		{
			this.SendPropertyChanging();
			entity.MatchStats = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.OverTimeStats")]
	public partial class OverTimeStats : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _MatchId;
		
		private byte _StartT;
		
		private byte _StartCT;
		
		private int _StartMoney;
		
		private short _NumRounds;
		
		private EntityRef<MatchStats> _MatchStats;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMatchIdChanging(long value);
    partial void OnMatchIdChanged();
    partial void OnStartTChanging(byte value);
    partial void OnStartTChanged();
    partial void OnStartCTChanging(byte value);
    partial void OnStartCTChanged();
    partial void OnStartMoneyChanging(int value);
    partial void OnStartMoneyChanged();
    partial void OnNumRoundsChanging(short value);
    partial void OnNumRoundsChanged();
    #endregion
		
		public OverTimeStats()
		{
			this._MatchStats = default(EntityRef<MatchStats>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MatchId", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long MatchId
		{
			get
			{
				return this._MatchId;
			}
			set
			{
				if ((this._MatchId != value))
				{
					if (this._MatchStats.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMatchIdChanging(value);
					this.SendPropertyChanging();
					this._MatchId = value;
					this.SendPropertyChanged("MatchId");
					this.OnMatchIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StartT", DbType="TinyInt NOT NULL")]
		public byte StartT
		{
			get
			{
				return this._StartT;
			}
			set
			{
				if ((this._StartT != value))
				{
					this.OnStartTChanging(value);
					this.SendPropertyChanging();
					this._StartT = value;
					this.SendPropertyChanged("StartT");
					this.OnStartTChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StartCT", DbType="TinyInt NOT NULL")]
		public byte StartCT
		{
			get
			{
				return this._StartCT;
			}
			set
			{
				if ((this._StartCT != value))
				{
					this.OnStartCTChanging(value);
					this.SendPropertyChanging();
					this._StartCT = value;
					this.SendPropertyChanged("StartCT");
					this.OnStartCTChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StartMoney", DbType="Int NOT NULL")]
		public int StartMoney
		{
			get
			{
				return this._StartMoney;
			}
			set
			{
				if ((this._StartMoney != value))
				{
					this.OnStartMoneyChanging(value);
					this.SendPropertyChanging();
					this._StartMoney = value;
					this.SendPropertyChanged("StartMoney");
					this.OnStartMoneyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NumRounds", DbType="SmallInt NOT NULL")]
		public short NumRounds
		{
			get
			{
				return this._NumRounds;
			}
			set
			{
				if ((this._NumRounds != value))
				{
					this.OnNumRoundsChanging(value);
					this.SendPropertyChanging();
					this._NumRounds = value;
					this.SendPropertyChanged("NumRounds");
					this.OnNumRoundsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MatchStats_OverTimeStats", Storage="_MatchStats", ThisKey="MatchId", OtherKey="MatchId", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public MatchStats MatchStats
		{
			get
			{
				return this._MatchStats.Entity;
			}
			set
			{
				MatchStats previousValue = this._MatchStats.Entity;
				if (((previousValue != value) 
							|| (this._MatchStats.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MatchStats.Entity = null;
						previousValue.OverTimeStats = null;
					}
					this._MatchStats.Entity = value;
					if ((value != null))
					{
						value.OverTimeStats = this;
						this._MatchId = value.MatchId;
					}
					else
					{
						this._MatchId = default(long);
					}
					this.SendPropertyChanged("MatchStats");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PlayerMatchStats")]
	public partial class PlayerMatchStats : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _MatchId;
		
		private long _SteamId;
		
		private byte _Team;
		
		private short _Kills;
		
		private short _Assists;
		
		private short _Deaths;
		
		private short _Score;
		
		private short _MVPs;
		
		private short _HS;
		
		private short _HSKills;
		
		private short _Shots;
		
		private short _Hits;
		
		private short _HSVictim;
		
		private short _HSDeaths;
		
		private short _Enemy2K;
		
		private short _Enemy3K;
		
		private short _Enemy4K;
		
		private short _Enemy5K;
		
		private int _Damage;
		
		private int _DamageVictim;
		
		private short _BombPlants;
		
		private short _BombExplosions;
		
		private short _BombDefuses;
		
		private int _MoneyEarned;
		
		private int _MoneySpent;
		
		private int _MoneyLost;
		
		private short _DecoysUsed;
		
		private short _FireNadesUsed;
		
		private int _FireNadesDamage;
		
		private int _FireNadesDamageVictim;
		
		private short _FlashesUsed;
		
		private short _FlashesSucceeded;
		
		private short _FlashVictim;
		
		private short _TeamFlashed;
		
		private short _TeamFlashVictim;
		
		private short _SelfFlashed;
		
		private short _HEsUsed;
		
		private int _HEsDamage;
		
		private int _HEsDamageVictim;
		
		private short _SmokesUsed;
		
		private short _FirstBloods;
		
		private short _FirstBloodVictim;
		
		private double _AVGTimeAlive;
		
		private int _TeamDamage;
		
		private int _TeamKills;
		
		private int _EntryKills;
		
		private int _EntryKillVictim;
		
		private short _Suicides;
		
		private short _BombVictim;
		
		private double _HLTVRating1;
		
		private double _HLTVRating2;
		
		private byte _RankBeforeMatch;
		
		private byte _RankAfterMatch;
		
		private short _RealKills;
		
		private short _RealDeaths;
		
		private short _RealAssists;
		
		private short _RealScore;
		
		private short _RealMVPs;
		
		private EntitySet<WeaponReload> _WeaponReload;
		
		private EntitySet<_PlayerMatchSmokeStats> @__PlayerMatchSmokeStats;
		
		private EntitySet<_StutterStep> @__StutterStep;
		
		private EntitySet<BombDefused> _BombDefused;
		
		private EntitySet<BombPlant> _BombPlant;
		
		private EntitySet<BotTakeOver> _BotTakeOver;
		
		private EntitySet<ConnectDisconnect> _ConnectDisconnect;
		
		private EntitySet<Damage> _Damage1;
		
		private EntitySet<Damage> _Damage2;
		
		private EntitySet<Decoy> _Decoy;
		
		private EntitySet<FireNade> _FireNade;
		
		private EntitySet<Flash> _Flash;
		
		private EntitySet<Flashed> _Flashed;
		
		private EntitySet<HE> _HE;
		
		private EntitySet<HostageDrop> _HostageDrop;
		
		private EntitySet<HostagePickUp> _HostagePickUp;
		
		private EntitySet<HostageRescue> _HostageRescue;
		
		private EntitySet<ItemDropped> _ItemDropped;
		
		private EntitySet<ItemPickedUp> _ItemPickedUp;
		
		private EntitySet<ItemSaved> _ItemSaved;
		
		private EntitySet<Kills> _Kills1;
		
		private EntitySet<Kills> _Kills2;
		
		private EntitySet<PlayerPosition> _PlayerPosition;
		
		private EntitySet<PlayerRoundStats> _PlayerRoundStats;
		
		private EntitySet<RoundItem> _RoundItem;
		
		private EntitySet<Smoke> _Smoke;
		
		private EntitySet<WeaponFired> _WeaponFired;
		
		private EntityRef<MatchStats> _MatchStats;
		
		private EntityRef<PlayerStats> _PlayerStats;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMatchIdChanging(long value);
    partial void OnMatchIdChanged();
    partial void OnSteamIdChanging(long value);
    partial void OnSteamIdChanged();
    partial void OnTeamChanging(byte value);
    partial void OnTeamChanged();
    partial void OnKillsChanging(short value);
    partial void OnKillsChanged();
    partial void OnAssistsChanging(short value);
    partial void OnAssistsChanged();
    partial void OnDeathsChanging(short value);
    partial void OnDeathsChanged();
    partial void OnScoreChanging(short value);
    partial void OnScoreChanged();
    partial void OnMVPsChanging(short value);
    partial void OnMVPsChanged();
    partial void OnHSChanging(short value);
    partial void OnHSChanged();
    partial void OnHSKillsChanging(short value);
    partial void OnHSKillsChanged();
    partial void OnShotsChanging(short value);
    partial void OnShotsChanged();
    partial void OnHitsChanging(short value);
    partial void OnHitsChanged();
    partial void OnHSVictimChanging(short value);
    partial void OnHSVictimChanged();
    partial void OnHSDeathsChanging(short value);
    partial void OnHSDeathsChanged();
    partial void OnEnemy2KChanging(short value);
    partial void OnEnemy2KChanged();
    partial void OnEnemy3KChanging(short value);
    partial void OnEnemy3KChanged();
    partial void OnEnemy4KChanging(short value);
    partial void OnEnemy4KChanged();
    partial void OnEnemy5KChanging(short value);
    partial void OnEnemy5KChanged();
    partial void OnDamageChanging(int value);
    partial void OnDamageChanged();
    partial void OnDamageVictimChanging(int value);
    partial void OnDamageVictimChanged();
    partial void OnBombPlantsChanging(short value);
    partial void OnBombPlantsChanged();
    partial void OnBombExplosionsChanging(short value);
    partial void OnBombExplosionsChanged();
    partial void OnBombDefusesChanging(short value);
    partial void OnBombDefusesChanged();
    partial void OnMoneyEarnedChanging(int value);
    partial void OnMoneyEarnedChanged();
    partial void OnMoneySpentChanging(int value);
    partial void OnMoneySpentChanged();
    partial void OnMoneyLostChanging(int value);
    partial void OnMoneyLostChanged();
    partial void OnDecoysUsedChanging(short value);
    partial void OnDecoysUsedChanged();
    partial void OnFireNadesUsedChanging(short value);
    partial void OnFireNadesUsedChanged();
    partial void OnFireNadesDamageChanging(int value);
    partial void OnFireNadesDamageChanged();
    partial void OnFireNadesDamageVictimChanging(int value);
    partial void OnFireNadesDamageVictimChanged();
    partial void OnFlashesUsedChanging(short value);
    partial void OnFlashesUsedChanged();
    partial void OnFlashesSucceededChanging(short value);
    partial void OnFlashesSucceededChanged();
    partial void OnFlashVictimChanging(short value);
    partial void OnFlashVictimChanged();
    partial void OnTeamFlashedChanging(short value);
    partial void OnTeamFlashedChanged();
    partial void OnTeamFlashVictimChanging(short value);
    partial void OnTeamFlashVictimChanged();
    partial void OnSelfFlashedChanging(short value);
    partial void OnSelfFlashedChanged();
    partial void OnHEsUsedChanging(short value);
    partial void OnHEsUsedChanged();
    partial void OnHEsDamageChanging(int value);
    partial void OnHEsDamageChanged();
    partial void OnHEsDamageVictimChanging(int value);
    partial void OnHEsDamageVictimChanged();
    partial void OnSmokesUsedChanging(short value);
    partial void OnSmokesUsedChanged();
    partial void OnFirstBloodsChanging(short value);
    partial void OnFirstBloodsChanged();
    partial void OnFirstBloodVictimChanging(short value);
    partial void OnFirstBloodVictimChanged();
    partial void OnAVGTimeAliveChanging(double value);
    partial void OnAVGTimeAliveChanged();
    partial void OnTeamDamageChanging(int value);
    partial void OnTeamDamageChanged();
    partial void OnTeamKillsChanging(int value);
    partial void OnTeamKillsChanged();
    partial void OnEntryKillsChanging(int value);
    partial void OnEntryKillsChanged();
    partial void OnEntryKillVictimChanging(int value);
    partial void OnEntryKillVictimChanged();
    partial void OnSuicidesChanging(short value);
    partial void OnSuicidesChanged();
    partial void OnBombVictimChanging(short value);
    partial void OnBombVictimChanged();
    partial void OnHLTVRating1Changing(double value);
    partial void OnHLTVRating1Changed();
    partial void OnHLTVRating2Changing(double value);
    partial void OnHLTVRating2Changed();
    partial void OnRankBeforeMatchChanging(byte value);
    partial void OnRankBeforeMatchChanged();
    partial void OnRankAfterMatchChanging(byte value);
    partial void OnRankAfterMatchChanged();
    partial void OnRealKillsChanging(short value);
    partial void OnRealKillsChanged();
    partial void OnRealDeathsChanging(short value);
    partial void OnRealDeathsChanged();
    partial void OnRealAssistsChanging(short value);
    partial void OnRealAssistsChanged();
    partial void OnRealScoreChanging(short value);
    partial void OnRealScoreChanged();
    partial void OnRealMVPsChanging(short value);
    partial void OnRealMVPsChanged();
    #endregion
		
		public PlayerMatchStats()
		{
			this._WeaponReload = new EntitySet<WeaponReload>(new Action<WeaponReload>(this.attach_WeaponReload), new Action<WeaponReload>(this.detach_WeaponReload));
			this.@__PlayerMatchSmokeStats = new EntitySet<_PlayerMatchSmokeStats>(new Action<_PlayerMatchSmokeStats>(this.attach__PlayerMatchSmokeStats), new Action<_PlayerMatchSmokeStats>(this.detach__PlayerMatchSmokeStats));
			this.@__StutterStep = new EntitySet<_StutterStep>(new Action<_StutterStep>(this.attach__StutterStep), new Action<_StutterStep>(this.detach__StutterStep));
			this._BombDefused = new EntitySet<BombDefused>(new Action<BombDefused>(this.attach_BombDefused), new Action<BombDefused>(this.detach_BombDefused));
			this._BombPlant = new EntitySet<BombPlant>(new Action<BombPlant>(this.attach_BombPlant), new Action<BombPlant>(this.detach_BombPlant));
			this._BotTakeOver = new EntitySet<BotTakeOver>(new Action<BotTakeOver>(this.attach_BotTakeOver), new Action<BotTakeOver>(this.detach_BotTakeOver));
			this._ConnectDisconnect = new EntitySet<ConnectDisconnect>(new Action<ConnectDisconnect>(this.attach_ConnectDisconnect), new Action<ConnectDisconnect>(this.detach_ConnectDisconnect));
			this._Damage1 = new EntitySet<Damage>(new Action<Damage>(this.attach_Damage1), new Action<Damage>(this.detach_Damage1));
			this._Damage2 = new EntitySet<Damage>(new Action<Damage>(this.attach_Damage2), new Action<Damage>(this.detach_Damage2));
			this._Decoy = new EntitySet<Decoy>(new Action<Decoy>(this.attach_Decoy), new Action<Decoy>(this.detach_Decoy));
			this._FireNade = new EntitySet<FireNade>(new Action<FireNade>(this.attach_FireNade), new Action<FireNade>(this.detach_FireNade));
			this._Flash = new EntitySet<Flash>(new Action<Flash>(this.attach_Flash), new Action<Flash>(this.detach_Flash));
			this._Flashed = new EntitySet<Flashed>(new Action<Flashed>(this.attach_Flashed), new Action<Flashed>(this.detach_Flashed));
			this._HE = new EntitySet<HE>(new Action<HE>(this.attach_HE), new Action<HE>(this.detach_HE));
			this._HostageDrop = new EntitySet<HostageDrop>(new Action<HostageDrop>(this.attach_HostageDrop), new Action<HostageDrop>(this.detach_HostageDrop));
			this._HostagePickUp = new EntitySet<HostagePickUp>(new Action<HostagePickUp>(this.attach_HostagePickUp), new Action<HostagePickUp>(this.detach_HostagePickUp));
			this._HostageRescue = new EntitySet<HostageRescue>(new Action<HostageRescue>(this.attach_HostageRescue), new Action<HostageRescue>(this.detach_HostageRescue));
			this._ItemDropped = new EntitySet<ItemDropped>(new Action<ItemDropped>(this.attach_ItemDropped), new Action<ItemDropped>(this.detach_ItemDropped));
			this._ItemPickedUp = new EntitySet<ItemPickedUp>(new Action<ItemPickedUp>(this.attach_ItemPickedUp), new Action<ItemPickedUp>(this.detach_ItemPickedUp));
			this._ItemSaved = new EntitySet<ItemSaved>(new Action<ItemSaved>(this.attach_ItemSaved), new Action<ItemSaved>(this.detach_ItemSaved));
			this._Kills1 = new EntitySet<Kills>(new Action<Kills>(this.attach_Kills1), new Action<Kills>(this.detach_Kills1));
			this._Kills2 = new EntitySet<Kills>(new Action<Kills>(this.attach_Kills2), new Action<Kills>(this.detach_Kills2));
			this._PlayerPosition = new EntitySet<PlayerPosition>(new Action<PlayerPosition>(this.attach_PlayerPosition), new Action<PlayerPosition>(this.detach_PlayerPosition));
			this._PlayerRoundStats = new EntitySet<PlayerRoundStats>(new Action<PlayerRoundStats>(this.attach_PlayerRoundStats), new Action<PlayerRoundStats>(this.detach_PlayerRoundStats));
			this._RoundItem = new EntitySet<RoundItem>(new Action<RoundItem>(this.attach_RoundItem), new Action<RoundItem>(this.detach_RoundItem));
			this._Smoke = new EntitySet<Smoke>(new Action<Smoke>(this.attach_Smoke), new Action<Smoke>(this.detach_Smoke));
			this._WeaponFired = new EntitySet<WeaponFired>(new Action<WeaponFired>(this.attach_WeaponFired), new Action<WeaponFired>(this.detach_WeaponFired));
			this._MatchStats = default(EntityRef<MatchStats>);
			this._PlayerStats = default(EntityRef<PlayerStats>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MatchId", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long MatchId
		{
			get
			{
				return this._MatchId;
			}
			set
			{
				if ((this._MatchId != value))
				{
					if (this._MatchStats.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMatchIdChanging(value);
					this.SendPropertyChanging();
					this._MatchId = value;
					this.SendPropertyChanged("MatchId");
					this.OnMatchIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SteamId", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long SteamId
		{
			get
			{
				return this._SteamId;
			}
			set
			{
				if ((this._SteamId != value))
				{
					if (this._PlayerStats.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSteamIdChanging(value);
					this.SendPropertyChanging();
					this._SteamId = value;
					this.SendPropertyChanged("SteamId");
					this.OnSteamIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Team", DbType="TinyInt NOT NULL")]
		public byte Team
		{
			get
			{
				return this._Team;
			}
			set
			{
				if ((this._Team != value))
				{
					this.OnTeamChanging(value);
					this.SendPropertyChanging();
					this._Team = value;
					this.SendPropertyChanged("Team");
					this.OnTeamChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Kills", DbType="SmallInt NOT NULL")]
		public short Kills
		{
			get
			{
				return this._Kills;
			}
			set
			{
				if ((this._Kills != value))
				{
					this.OnKillsChanging(value);
					this.SendPropertyChanging();
					this._Kills = value;
					this.SendPropertyChanged("Kills");
					this.OnKillsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Assists", DbType="SmallInt NOT NULL")]
		public short Assists
		{
			get
			{
				return this._Assists;
			}
			set
			{
				if ((this._Assists != value))
				{
					this.OnAssistsChanging(value);
					this.SendPropertyChanging();
					this._Assists = value;
					this.SendPropertyChanged("Assists");
					this.OnAssistsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Deaths", DbType="SmallInt NOT NULL")]
		public short Deaths
		{
			get
			{
				return this._Deaths;
			}
			set
			{
				if ((this._Deaths != value))
				{
					this.OnDeathsChanging(value);
					this.SendPropertyChanging();
					this._Deaths = value;
					this.SendPropertyChanged("Deaths");
					this.OnDeathsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Score", DbType="SmallInt NOT NULL")]
		public short Score
		{
			get
			{
				return this._Score;
			}
			set
			{
				if ((this._Score != value))
				{
					this.OnScoreChanging(value);
					this.SendPropertyChanging();
					this._Score = value;
					this.SendPropertyChanged("Score");
					this.OnScoreChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MVPs", DbType="SmallInt NOT NULL")]
		public short MVPs
		{
			get
			{
				return this._MVPs;
			}
			set
			{
				if ((this._MVPs != value))
				{
					this.OnMVPsChanging(value);
					this.SendPropertyChanging();
					this._MVPs = value;
					this.SendPropertyChanged("MVPs");
					this.OnMVPsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HS", DbType="SmallInt NOT NULL")]
		public short HS
		{
			get
			{
				return this._HS;
			}
			set
			{
				if ((this._HS != value))
				{
					this.OnHSChanging(value);
					this.SendPropertyChanging();
					this._HS = value;
					this.SendPropertyChanged("HS");
					this.OnHSChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HSKills", DbType="SmallInt NOT NULL")]
		public short HSKills
		{
			get
			{
				return this._HSKills;
			}
			set
			{
				if ((this._HSKills != value))
				{
					this.OnHSKillsChanging(value);
					this.SendPropertyChanging();
					this._HSKills = value;
					this.SendPropertyChanged("HSKills");
					this.OnHSKillsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Shots", DbType="SmallInt NOT NULL")]
		public short Shots
		{
			get
			{
				return this._Shots;
			}
			set
			{
				if ((this._Shots != value))
				{
					this.OnShotsChanging(value);
					this.SendPropertyChanging();
					this._Shots = value;
					this.SendPropertyChanged("Shots");
					this.OnShotsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Hits", DbType="SmallInt NOT NULL")]
		public short Hits
		{
			get
			{
				return this._Hits;
			}
			set
			{
				if ((this._Hits != value))
				{
					this.OnHitsChanging(value);
					this.SendPropertyChanging();
					this._Hits = value;
					this.SendPropertyChanged("Hits");
					this.OnHitsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HSVictim", DbType="SmallInt NOT NULL")]
		public short HSVictim
		{
			get
			{
				return this._HSVictim;
			}
			set
			{
				if ((this._HSVictim != value))
				{
					this.OnHSVictimChanging(value);
					this.SendPropertyChanging();
					this._HSVictim = value;
					this.SendPropertyChanged("HSVictim");
					this.OnHSVictimChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HSDeaths", DbType="SmallInt NOT NULL")]
		public short HSDeaths
		{
			get
			{
				return this._HSDeaths;
			}
			set
			{
				if ((this._HSDeaths != value))
				{
					this.OnHSDeathsChanging(value);
					this.SendPropertyChanging();
					this._HSDeaths = value;
					this.SendPropertyChanged("HSDeaths");
					this.OnHSDeathsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Enemy2K", DbType="SmallInt NOT NULL")]
		public short Enemy2K
		{
			get
			{
				return this._Enemy2K;
			}
			set
			{
				if ((this._Enemy2K != value))
				{
					this.OnEnemy2KChanging(value);
					this.SendPropertyChanging();
					this._Enemy2K = value;
					this.SendPropertyChanged("Enemy2K");
					this.OnEnemy2KChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Enemy3K", DbType="SmallInt NOT NULL")]
		public short Enemy3K
		{
			get
			{
				return this._Enemy3K;
			}
			set
			{
				if ((this._Enemy3K != value))
				{
					this.OnEnemy3KChanging(value);
					this.SendPropertyChanging();
					this._Enemy3K = value;
					this.SendPropertyChanged("Enemy3K");
					this.OnEnemy3KChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Enemy4K", DbType="SmallInt NOT NULL")]
		public short Enemy4K
		{
			get
			{
				return this._Enemy4K;
			}
			set
			{
				if ((this._Enemy4K != value))
				{
					this.OnEnemy4KChanging(value);
					this.SendPropertyChanging();
					this._Enemy4K = value;
					this.SendPropertyChanged("Enemy4K");
					this.OnEnemy4KChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Enemy5K", DbType="SmallInt NOT NULL")]
		public short Enemy5K
		{
			get
			{
				return this._Enemy5K;
			}
			set
			{
				if ((this._Enemy5K != value))
				{
					this.OnEnemy5KChanging(value);
					this.SendPropertyChanging();
					this._Enemy5K = value;
					this.SendPropertyChanged("Enemy5K");
					this.OnEnemy5KChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Damage", DbType="Int NOT NULL")]
		public int Damage
		{
			get
			{
				return this._Damage;
			}
			set
			{
				if ((this._Damage != value))
				{
					this.OnDamageChanging(value);
					this.SendPropertyChanging();
					this._Damage = value;
					this.SendPropertyChanged("Damage");
					this.OnDamageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DamageVictim", DbType="Int NOT NULL")]
		public int DamageVictim
		{
			get
			{
				return this._DamageVictim;
			}
			set
			{
				if ((this._DamageVictim != value))
				{
					this.OnDamageVictimChanging(value);
					this.SendPropertyChanging();
					this._DamageVictim = value;
					this.SendPropertyChanged("DamageVictim");
					this.OnDamageVictimChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BombPlants", DbType="SmallInt NOT NULL")]
		public short BombPlants
		{
			get
			{
				return this._BombPlants;
			}
			set
			{
				if ((this._BombPlants != value))
				{
					this.OnBombPlantsChanging(value);
					this.SendPropertyChanging();
					this._BombPlants = value;
					this.SendPropertyChanged("BombPlants");
					this.OnBombPlantsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BombExplosions", DbType="SmallInt NOT NULL")]
		public short BombExplosions
		{
			get
			{
				return this._BombExplosions;
			}
			set
			{
				if ((this._BombExplosions != value))
				{
					this.OnBombExplosionsChanging(value);
					this.SendPropertyChanging();
					this._BombExplosions = value;
					this.SendPropertyChanged("BombExplosions");
					this.OnBombExplosionsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BombDefuses", DbType="SmallInt NOT NULL")]
		public short BombDefuses
		{
			get
			{
				return this._BombDefuses;
			}
			set
			{
				if ((this._BombDefuses != value))
				{
					this.OnBombDefusesChanging(value);
					this.SendPropertyChanging();
					this._BombDefuses = value;
					this.SendPropertyChanged("BombDefuses");
					this.OnBombDefusesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MoneyEarned", DbType="Int NOT NULL")]
		public int MoneyEarned
		{
			get
			{
				return this._MoneyEarned;
			}
			set
			{
				if ((this._MoneyEarned != value))
				{
					this.OnMoneyEarnedChanging(value);
					this.SendPropertyChanging();
					this._MoneyEarned = value;
					this.SendPropertyChanged("MoneyEarned");
					this.OnMoneyEarnedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MoneySpent", DbType="Int NOT NULL")]
		public int MoneySpent
		{
			get
			{
				return this._MoneySpent;
			}
			set
			{
				if ((this._MoneySpent != value))
				{
					this.OnMoneySpentChanging(value);
					this.SendPropertyChanging();
					this._MoneySpent = value;
					this.SendPropertyChanged("MoneySpent");
					this.OnMoneySpentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MoneyLost", DbType="Int NOT NULL")]
		public int MoneyLost
		{
			get
			{
				return this._MoneyLost;
			}
			set
			{
				if ((this._MoneyLost != value))
				{
					this.OnMoneyLostChanging(value);
					this.SendPropertyChanging();
					this._MoneyLost = value;
					this.SendPropertyChanged("MoneyLost");
					this.OnMoneyLostChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DecoysUsed", DbType="SmallInt NOT NULL")]
		public short DecoysUsed
		{
			get
			{
				return this._DecoysUsed;
			}
			set
			{
				if ((this._DecoysUsed != value))
				{
					this.OnDecoysUsedChanging(value);
					this.SendPropertyChanging();
					this._DecoysUsed = value;
					this.SendPropertyChanged("DecoysUsed");
					this.OnDecoysUsedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FireNadesUsed", DbType="SmallInt NOT NULL")]
		public short FireNadesUsed
		{
			get
			{
				return this._FireNadesUsed;
			}
			set
			{
				if ((this._FireNadesUsed != value))
				{
					this.OnFireNadesUsedChanging(value);
					this.SendPropertyChanging();
					this._FireNadesUsed = value;
					this.SendPropertyChanged("FireNadesUsed");
					this.OnFireNadesUsedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FireNadesDamage", DbType="Int NOT NULL")]
		public int FireNadesDamage
		{
			get
			{
				return this._FireNadesDamage;
			}
			set
			{
				if ((this._FireNadesDamage != value))
				{
					this.OnFireNadesDamageChanging(value);
					this.SendPropertyChanging();
					this._FireNadesDamage = value;
					this.SendPropertyChanged("FireNadesDamage");
					this.OnFireNadesDamageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FireNadesDamageVictim", DbType="Int NOT NULL")]
		public int FireNadesDamageVictim
		{
			get
			{
				return this._FireNadesDamageVictim;
			}
			set
			{
				if ((this._FireNadesDamageVictim != value))
				{
					this.OnFireNadesDamageVictimChanging(value);
					this.SendPropertyChanging();
					this._FireNadesDamageVictim = value;
					this.SendPropertyChanged("FireNadesDamageVictim");
					this.OnFireNadesDamageVictimChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FlashesUsed", DbType="SmallInt NOT NULL")]
		public short FlashesUsed
		{
			get
			{
				return this._FlashesUsed;
			}
			set
			{
				if ((this._FlashesUsed != value))
				{
					this.OnFlashesUsedChanging(value);
					this.SendPropertyChanging();
					this._FlashesUsed = value;
					this.SendPropertyChanged("FlashesUsed");
					this.OnFlashesUsedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FlashesSucceeded", DbType="SmallInt NOT NULL")]
		public short FlashesSucceeded
		{
			get
			{
				return this._FlashesSucceeded;
			}
			set
			{
				if ((this._FlashesSucceeded != value))
				{
					this.OnFlashesSucceededChanging(value);
					this.SendPropertyChanging();
					this._FlashesSucceeded = value;
					this.SendPropertyChanged("FlashesSucceeded");
					this.OnFlashesSucceededChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FlashVictim", DbType="SmallInt NOT NULL")]
		public short FlashVictim
		{
			get
			{
				return this._FlashVictim;
			}
			set
			{
				if ((this._FlashVictim != value))
				{
					this.OnFlashVictimChanging(value);
					this.SendPropertyChanging();
					this._FlashVictim = value;
					this.SendPropertyChanged("FlashVictim");
					this.OnFlashVictimChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TeamFlashed", DbType="SmallInt NOT NULL")]
		public short TeamFlashed
		{
			get
			{
				return this._TeamFlashed;
			}
			set
			{
				if ((this._TeamFlashed != value))
				{
					this.OnTeamFlashedChanging(value);
					this.SendPropertyChanging();
					this._TeamFlashed = value;
					this.SendPropertyChanged("TeamFlashed");
					this.OnTeamFlashedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TeamFlashVictim", DbType="SmallInt NOT NULL")]
		public short TeamFlashVictim
		{
			get
			{
				return this._TeamFlashVictim;
			}
			set
			{
				if ((this._TeamFlashVictim != value))
				{
					this.OnTeamFlashVictimChanging(value);
					this.SendPropertyChanging();
					this._TeamFlashVictim = value;
					this.SendPropertyChanged("TeamFlashVictim");
					this.OnTeamFlashVictimChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SelfFlashed", DbType="SmallInt NOT NULL")]
		public short SelfFlashed
		{
			get
			{
				return this._SelfFlashed;
			}
			set
			{
				if ((this._SelfFlashed != value))
				{
					this.OnSelfFlashedChanging(value);
					this.SendPropertyChanging();
					this._SelfFlashed = value;
					this.SendPropertyChanged("SelfFlashed");
					this.OnSelfFlashedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HEsUsed", DbType="SmallInt NOT NULL")]
		public short HEsUsed
		{
			get
			{
				return this._HEsUsed;
			}
			set
			{
				if ((this._HEsUsed != value))
				{
					this.OnHEsUsedChanging(value);
					this.SendPropertyChanging();
					this._HEsUsed = value;
					this.SendPropertyChanged("HEsUsed");
					this.OnHEsUsedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HEsDamage", DbType="Int NOT NULL")]
		public int HEsDamage
		{
			get
			{
				return this._HEsDamage;
			}
			set
			{
				if ((this._HEsDamage != value))
				{
					this.OnHEsDamageChanging(value);
					this.SendPropertyChanging();
					this._HEsDamage = value;
					this.SendPropertyChanged("HEsDamage");
					this.OnHEsDamageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HEsDamageVictim", DbType="Int NOT NULL")]
		public int HEsDamageVictim
		{
			get
			{
				return this._HEsDamageVictim;
			}
			set
			{
				if ((this._HEsDamageVictim != value))
				{
					this.OnHEsDamageVictimChanging(value);
					this.SendPropertyChanging();
					this._HEsDamageVictim = value;
					this.SendPropertyChanged("HEsDamageVictim");
					this.OnHEsDamageVictimChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SmokesUsed", DbType="SmallInt NOT NULL")]
		public short SmokesUsed
		{
			get
			{
				return this._SmokesUsed;
			}
			set
			{
				if ((this._SmokesUsed != value))
				{
					this.OnSmokesUsedChanging(value);
					this.SendPropertyChanging();
					this._SmokesUsed = value;
					this.SendPropertyChanged("SmokesUsed");
					this.OnSmokesUsedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstBloods", DbType="SmallInt NOT NULL")]
		public short FirstBloods
		{
			get
			{
				return this._FirstBloods;
			}
			set
			{
				if ((this._FirstBloods != value))
				{
					this.OnFirstBloodsChanging(value);
					this.SendPropertyChanging();
					this._FirstBloods = value;
					this.SendPropertyChanged("FirstBloods");
					this.OnFirstBloodsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstBloodVictim", DbType="SmallInt NOT NULL")]
		public short FirstBloodVictim
		{
			get
			{
				return this._FirstBloodVictim;
			}
			set
			{
				if ((this._FirstBloodVictim != value))
				{
					this.OnFirstBloodVictimChanging(value);
					this.SendPropertyChanging();
					this._FirstBloodVictim = value;
					this.SendPropertyChanged("FirstBloodVictim");
					this.OnFirstBloodVictimChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AVGTimeAlive", DbType="Float NOT NULL")]
		public double AVGTimeAlive
		{
			get
			{
				return this._AVGTimeAlive;
			}
			set
			{
				if ((this._AVGTimeAlive != value))
				{
					this.OnAVGTimeAliveChanging(value);
					this.SendPropertyChanging();
					this._AVGTimeAlive = value;
					this.SendPropertyChanged("AVGTimeAlive");
					this.OnAVGTimeAliveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TeamDamage", DbType="Int NOT NULL")]
		public int TeamDamage
		{
			get
			{
				return this._TeamDamage;
			}
			set
			{
				if ((this._TeamDamage != value))
				{
					this.OnTeamDamageChanging(value);
					this.SendPropertyChanging();
					this._TeamDamage = value;
					this.SendPropertyChanged("TeamDamage");
					this.OnTeamDamageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TeamKills", DbType="Int NOT NULL")]
		public int TeamKills
		{
			get
			{
				return this._TeamKills;
			}
			set
			{
				if ((this._TeamKills != value))
				{
					this.OnTeamKillsChanging(value);
					this.SendPropertyChanging();
					this._TeamKills = value;
					this.SendPropertyChanged("TeamKills");
					this.OnTeamKillsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EntryKills", DbType="Int NOT NULL")]
		public int EntryKills
		{
			get
			{
				return this._EntryKills;
			}
			set
			{
				if ((this._EntryKills != value))
				{
					this.OnEntryKillsChanging(value);
					this.SendPropertyChanging();
					this._EntryKills = value;
					this.SendPropertyChanged("EntryKills");
					this.OnEntryKillsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EntryKillVictim", DbType="Int NOT NULL")]
		public int EntryKillVictim
		{
			get
			{
				return this._EntryKillVictim;
			}
			set
			{
				if ((this._EntryKillVictim != value))
				{
					this.OnEntryKillVictimChanging(value);
					this.SendPropertyChanging();
					this._EntryKillVictim = value;
					this.SendPropertyChanged("EntryKillVictim");
					this.OnEntryKillVictimChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Suicides", DbType="SmallInt NOT NULL")]
		public short Suicides
		{
			get
			{
				return this._Suicides;
			}
			set
			{
				if ((this._Suicides != value))
				{
					this.OnSuicidesChanging(value);
					this.SendPropertyChanging();
					this._Suicides = value;
					this.SendPropertyChanged("Suicides");
					this.OnSuicidesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BombVictim", DbType="SmallInt NOT NULL")]
		public short BombVictim
		{
			get
			{
				return this._BombVictim;
			}
			set
			{
				if ((this._BombVictim != value))
				{
					this.OnBombVictimChanging(value);
					this.SendPropertyChanging();
					this._BombVictim = value;
					this.SendPropertyChanged("BombVictim");
					this.OnBombVictimChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HLTVRating1", DbType="Float NOT NULL")]
		public double HLTVRating1
		{
			get
			{
				return this._HLTVRating1;
			}
			set
			{
				if ((this._HLTVRating1 != value))
				{
					this.OnHLTVRating1Changing(value);
					this.SendPropertyChanging();
					this._HLTVRating1 = value;
					this.SendPropertyChanged("HLTVRating1");
					this.OnHLTVRating1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HLTVRating2", DbType="Float NOT NULL")]
		public double HLTVRating2
		{
			get
			{
				return this._HLTVRating2;
			}
			set
			{
				if ((this._HLTVRating2 != value))
				{
					this.OnHLTVRating2Changing(value);
					this.SendPropertyChanging();
					this._HLTVRating2 = value;
					this.SendPropertyChanged("HLTVRating2");
					this.OnHLTVRating2Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RankBeforeMatch", DbType="TinyInt NOT NULL")]
		public byte RankBeforeMatch
		{
			get
			{
				return this._RankBeforeMatch;
			}
			set
			{
				if ((this._RankBeforeMatch != value))
				{
					this.OnRankBeforeMatchChanging(value);
					this.SendPropertyChanging();
					this._RankBeforeMatch = value;
					this.SendPropertyChanged("RankBeforeMatch");
					this.OnRankBeforeMatchChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RankAfterMatch", DbType="TinyInt NOT NULL")]
		public byte RankAfterMatch
		{
			get
			{
				return this._RankAfterMatch;
			}
			set
			{
				if ((this._RankAfterMatch != value))
				{
					this.OnRankAfterMatchChanging(value);
					this.SendPropertyChanging();
					this._RankAfterMatch = value;
					this.SendPropertyChanged("RankAfterMatch");
					this.OnRankAfterMatchChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RealKills", DbType="SmallInt NOT NULL")]
		public short RealKills
		{
			get
			{
				return this._RealKills;
			}
			set
			{
				if ((this._RealKills != value))
				{
					this.OnRealKillsChanging(value);
					this.SendPropertyChanging();
					this._RealKills = value;
					this.SendPropertyChanged("RealKills");
					this.OnRealKillsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RealDeaths", DbType="SmallInt NOT NULL")]
		public short RealDeaths
		{
			get
			{
				return this._RealDeaths;
			}
			set
			{
				if ((this._RealDeaths != value))
				{
					this.OnRealDeathsChanging(value);
					this.SendPropertyChanging();
					this._RealDeaths = value;
					this.SendPropertyChanged("RealDeaths");
					this.OnRealDeathsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RealAssists", DbType="SmallInt NOT NULL")]
		public short RealAssists
		{
			get
			{
				return this._RealAssists;
			}
			set
			{
				if ((this._RealAssists != value))
				{
					this.OnRealAssistsChanging(value);
					this.SendPropertyChanging();
					this._RealAssists = value;
					this.SendPropertyChanged("RealAssists");
					this.OnRealAssistsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RealScore", DbType="SmallInt NOT NULL")]
		public short RealScore
		{
			get
			{
				return this._RealScore;
			}
			set
			{
				if ((this._RealScore != value))
				{
					this.OnRealScoreChanging(value);
					this.SendPropertyChanging();
					this._RealScore = value;
					this.SendPropertyChanged("RealScore");
					this.OnRealScoreChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RealMVPs", DbType="SmallInt NOT NULL")]
		public short RealMVPs
		{
			get
			{
				return this._RealMVPs;
			}
			set
			{
				if ((this._RealMVPs != value))
				{
					this.OnRealMVPsChanging(value);
					this.SendPropertyChanging();
					this._RealMVPs = value;
					this.SendPropertyChanged("RealMVPs");
					this.OnRealMVPsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PlayerMatchStats_WeaponReload", Storage="_WeaponReload", ThisKey="MatchId,SteamId", OtherKey="MatchId,PlayerId")]
		public EntitySet<WeaponReload> WeaponReload
		{
			get
			{
				return this._WeaponReload;
			}
			set
			{
				this._WeaponReload.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PlayerMatchStats__PlayerMatchSmokeStats", Storage="__PlayerMatchSmokeStats", ThisKey="MatchId,SteamId", OtherKey="MatchId,PlayerId")]
		public EntitySet<_PlayerMatchSmokeStats> _PlayerMatchSmokeStats
		{
			get
			{
				return this.@__PlayerMatchSmokeStats;
			}
			set
			{
				this.@__PlayerMatchSmokeStats.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PlayerMatchStats__StutterStep", Storage="__StutterStep", ThisKey="MatchId,SteamId", OtherKey="MatchId,PlayerId")]
		public EntitySet<_StutterStep> _StutterStep
		{
			get
			{
				return this.@__StutterStep;
			}
			set
			{
				this.@__StutterStep.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PlayerMatchStats_BombDefused", Storage="_BombDefused", ThisKey="MatchId,SteamId", OtherKey="MatchId,PlayerId")]
		public EntitySet<BombDefused> BombDefused
		{
			get
			{
				return this._BombDefused;
			}
			set
			{
				this._BombDefused.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PlayerMatchStats_BombPlant", Storage="_BombPlant", ThisKey="MatchId,SteamId", OtherKey="MatchId,PlayerId")]
		public EntitySet<BombPlant> BombPlant
		{
			get
			{
				return this._BombPlant;
			}
			set
			{
				this._BombPlant.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PlayerMatchStats_BotTakeOver", Storage="_BotTakeOver", ThisKey="MatchId,SteamId", OtherKey="MatchId,PlayerId")]
		public EntitySet<BotTakeOver> BotTakeOver
		{
			get
			{
				return this._BotTakeOver;
			}
			set
			{
				this._BotTakeOver.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PlayerMatchStats_ConnectDisconnect", Storage="_ConnectDisconnect", ThisKey="MatchId,SteamId", OtherKey="MatchId,PlayerId")]
		public EntitySet<ConnectDisconnect> ConnectDisconnect
		{
			get
			{
				return this._ConnectDisconnect;
			}
			set
			{
				this._ConnectDisconnect.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PlayerMatchStats_Damage", Storage="_Damage1", ThisKey="MatchId,SteamId", OtherKey="MatchId,PlayerId")]
		public EntitySet<Damage> Damage1
		{
			get
			{
				return this._Damage1;
			}
			set
			{
				this._Damage1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PlayerMatchStats_Damage1", Storage="_Damage2", ThisKey="MatchId,SteamId", OtherKey="MatchId,VictimId")]
		public EntitySet<Damage> Damage2
		{
			get
			{
				return this._Damage2;
			}
			set
			{
				this._Damage2.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PlayerMatchStats_Decoy", Storage="_Decoy", ThisKey="MatchId,SteamId", OtherKey="MatchId,PlayerId")]
		public EntitySet<Decoy> Decoy
		{
			get
			{
				return this._Decoy;
			}
			set
			{
				this._Decoy.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PlayerMatchStats_FireNade", Storage="_FireNade", ThisKey="MatchId,SteamId", OtherKey="MatchId,PlayerId")]
		public EntitySet<FireNade> FireNade
		{
			get
			{
				return this._FireNade;
			}
			set
			{
				this._FireNade.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PlayerMatchStats_Flash", Storage="_Flash", ThisKey="MatchId,SteamId", OtherKey="MatchId,PlayerId")]
		public EntitySet<Flash> Flash
		{
			get
			{
				return this._Flash;
			}
			set
			{
				this._Flash.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PlayerMatchStats_Flashed", Storage="_Flashed", ThisKey="MatchId,SteamId", OtherKey="MatchId,VictimId")]
		public EntitySet<Flashed> Flashed
		{
			get
			{
				return this._Flashed;
			}
			set
			{
				this._Flashed.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PlayerMatchStats_HE", Storage="_HE", ThisKey="MatchId,SteamId", OtherKey="MatchId,PlayerId")]
		public EntitySet<HE> HE
		{
			get
			{
				return this._HE;
			}
			set
			{
				this._HE.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PlayerMatchStats_HostageDrop", Storage="_HostageDrop", ThisKey="MatchId,SteamId", OtherKey="MatchId,PlayerId")]
		public EntitySet<HostageDrop> HostageDrop
		{
			get
			{
				return this._HostageDrop;
			}
			set
			{
				this._HostageDrop.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PlayerMatchStats_HostagePickUp", Storage="_HostagePickUp", ThisKey="MatchId,SteamId", OtherKey="MatchId,PlayerId")]
		public EntitySet<HostagePickUp> HostagePickUp
		{
			get
			{
				return this._HostagePickUp;
			}
			set
			{
				this._HostagePickUp.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PlayerMatchStats_HostageRescue", Storage="_HostageRescue", ThisKey="MatchId,SteamId", OtherKey="MatchId,PlayerId")]
		public EntitySet<HostageRescue> HostageRescue
		{
			get
			{
				return this._HostageRescue;
			}
			set
			{
				this._HostageRescue.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PlayerMatchStats_ItemDropped", Storage="_ItemDropped", ThisKey="MatchId,SteamId", OtherKey="MatchId,PlayerId")]
		public EntitySet<ItemDropped> ItemDropped
		{
			get
			{
				return this._ItemDropped;
			}
			set
			{
				this._ItemDropped.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PlayerMatchStats_ItemPickedUp", Storage="_ItemPickedUp", ThisKey="MatchId,SteamId", OtherKey="MatchId,PlayerId")]
		public EntitySet<ItemPickedUp> ItemPickedUp
		{
			get
			{
				return this._ItemPickedUp;
			}
			set
			{
				this._ItemPickedUp.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PlayerMatchStats_ItemSaved", Storage="_ItemSaved", ThisKey="MatchId,SteamId", OtherKey="MatchId,PlayerId")]
		public EntitySet<ItemSaved> ItemSaved
		{
			get
			{
				return this._ItemSaved;
			}
			set
			{
				this._ItemSaved.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PlayerMatchStats_Kills", Storage="_Kills1", ThisKey="MatchId,SteamId", OtherKey="MatchId,PlayerId")]
		public EntitySet<Kills> Kills1
		{
			get
			{
				return this._Kills1;
			}
			set
			{
				this._Kills1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PlayerMatchStats_Kills1", Storage="_Kills2", ThisKey="MatchId,SteamId", OtherKey="MatchId,VictimId")]
		public EntitySet<Kills> Kills2
		{
			get
			{
				return this._Kills2;
			}
			set
			{
				this._Kills2.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PlayerMatchStats_PlayerPosition", Storage="_PlayerPosition", ThisKey="MatchId,SteamId", OtherKey="MatchId,PlayerId")]
		public EntitySet<PlayerPosition> PlayerPosition
		{
			get
			{
				return this._PlayerPosition;
			}
			set
			{
				this._PlayerPosition.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PlayerMatchStats_PlayerRoundStats", Storage="_PlayerRoundStats", ThisKey="MatchId,SteamId", OtherKey="MatchId,PlayerId")]
		public EntitySet<PlayerRoundStats> PlayerRoundStats
		{
			get
			{
				return this._PlayerRoundStats;
			}
			set
			{
				this._PlayerRoundStats.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PlayerMatchStats_RoundItem", Storage="_RoundItem", ThisKey="MatchId,SteamId", OtherKey="MatchId,PlayerId")]
		public EntitySet<RoundItem> RoundItem
		{
			get
			{
				return this._RoundItem;
			}
			set
			{
				this._RoundItem.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PlayerMatchStats_Smoke", Storage="_Smoke", ThisKey="MatchId,SteamId", OtherKey="MatchId,PlayerId")]
		public EntitySet<Smoke> Smoke
		{
			get
			{
				return this._Smoke;
			}
			set
			{
				this._Smoke.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PlayerMatchStats_WeaponFired", Storage="_WeaponFired", ThisKey="MatchId,SteamId", OtherKey="MatchId,PlayerId")]
		public EntitySet<WeaponFired> WeaponFired
		{
			get
			{
				return this._WeaponFired;
			}
			set
			{
				this._WeaponFired.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MatchStats_PlayerMatchStats", Storage="_MatchStats", ThisKey="MatchId", OtherKey="MatchId", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public MatchStats MatchStats
		{
			get
			{
				return this._MatchStats.Entity;
			}
			set
			{
				MatchStats previousValue = this._MatchStats.Entity;
				if (((previousValue != value) 
							|| (this._MatchStats.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MatchStats.Entity = null;
						previousValue.PlayerMatchStats.Remove(this);
					}
					this._MatchStats.Entity = value;
					if ((value != null))
					{
						value.PlayerMatchStats.Add(this);
						this._MatchId = value.MatchId;
					}
					else
					{
						this._MatchId = default(long);
					}
					this.SendPropertyChanged("MatchStats");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PlayerStats_PlayerMatchStats", Storage="_PlayerStats", ThisKey="SteamId", OtherKey="SteamId", IsForeignKey=true)]
		public PlayerStats PlayerStats
		{
			get
			{
				return this._PlayerStats.Entity;
			}
			set
			{
				PlayerStats previousValue = this._PlayerStats.Entity;
				if (((previousValue != value) 
							|| (this._PlayerStats.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PlayerStats.Entity = null;
						previousValue.PlayerMatchStats.Remove(this);
					}
					this._PlayerStats.Entity = value;
					if ((value != null))
					{
						value.PlayerMatchStats.Add(this);
						this._SteamId = value.SteamId;
					}
					else
					{
						this._SteamId = default(long);
					}
					this.SendPropertyChanged("PlayerStats");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_WeaponReload(WeaponReload entity)
		{
			this.SendPropertyChanging();
			entity.PlayerMatchStats = this;
		}
		
		private void detach_WeaponReload(WeaponReload entity)
		{
			this.SendPropertyChanging();
			entity.PlayerMatchStats = null;
		}
		
		private void attach__PlayerMatchSmokeStats(_PlayerMatchSmokeStats entity)
		{
			this.SendPropertyChanging();
			entity.PlayerMatchStats = this;
		}
		
		private void detach__PlayerMatchSmokeStats(_PlayerMatchSmokeStats entity)
		{
			this.SendPropertyChanging();
			entity.PlayerMatchStats = null;
		}
		
		private void attach__StutterStep(_StutterStep entity)
		{
			this.SendPropertyChanging();
			entity.PlayerMatchStats = this;
		}
		
		private void detach__StutterStep(_StutterStep entity)
		{
			this.SendPropertyChanging();
			entity.PlayerMatchStats = null;
		}
		
		private void attach_BombDefused(BombDefused entity)
		{
			this.SendPropertyChanging();
			entity.PlayerMatchStats = this;
		}
		
		private void detach_BombDefused(BombDefused entity)
		{
			this.SendPropertyChanging();
			entity.PlayerMatchStats = null;
		}
		
		private void attach_BombPlant(BombPlant entity)
		{
			this.SendPropertyChanging();
			entity.PlayerMatchStats = this;
		}
		
		private void detach_BombPlant(BombPlant entity)
		{
			this.SendPropertyChanging();
			entity.PlayerMatchStats = null;
		}
		
		private void attach_BotTakeOver(BotTakeOver entity)
		{
			this.SendPropertyChanging();
			entity.PlayerMatchStats = this;
		}
		
		private void detach_BotTakeOver(BotTakeOver entity)
		{
			this.SendPropertyChanging();
			entity.PlayerMatchStats = null;
		}
		
		private void attach_ConnectDisconnect(ConnectDisconnect entity)
		{
			this.SendPropertyChanging();
			entity.PlayerMatchStats = this;
		}
		
		private void detach_ConnectDisconnect(ConnectDisconnect entity)
		{
			this.SendPropertyChanging();
			entity.PlayerMatchStats = null;
		}
		
		private void attach_Damage1(Damage entity)
		{
			this.SendPropertyChanging();
			entity.PlayerMatchStats = this;
		}
		
		private void detach_Damage1(Damage entity)
		{
			this.SendPropertyChanging();
			entity.PlayerMatchStats = null;
		}
		
		private void attach_Damage2(Damage entity)
		{
			this.SendPropertyChanging();
			entity.PlayerMatchStats1 = this;
		}
		
		private void detach_Damage2(Damage entity)
		{
			this.SendPropertyChanging();
			entity.PlayerMatchStats1 = null;
		}
		
		private void attach_Decoy(Decoy entity)
		{
			this.SendPropertyChanging();
			entity.PlayerMatchStats = this;
		}
		
		private void detach_Decoy(Decoy entity)
		{
			this.SendPropertyChanging();
			entity.PlayerMatchStats = null;
		}
		
		private void attach_FireNade(FireNade entity)
		{
			this.SendPropertyChanging();
			entity.PlayerMatchStats = this;
		}
		
		private void detach_FireNade(FireNade entity)
		{
			this.SendPropertyChanging();
			entity.PlayerMatchStats = null;
		}
		
		private void attach_Flash(Flash entity)
		{
			this.SendPropertyChanging();
			entity.PlayerMatchStats = this;
		}
		
		private void detach_Flash(Flash entity)
		{
			this.SendPropertyChanging();
			entity.PlayerMatchStats = null;
		}
		
		private void attach_Flashed(Flashed entity)
		{
			this.SendPropertyChanging();
			entity.PlayerMatchStats = this;
		}
		
		private void detach_Flashed(Flashed entity)
		{
			this.SendPropertyChanging();
			entity.PlayerMatchStats = null;
		}
		
		private void attach_HE(HE entity)
		{
			this.SendPropertyChanging();
			entity.PlayerMatchStats = this;
		}
		
		private void detach_HE(HE entity)
		{
			this.SendPropertyChanging();
			entity.PlayerMatchStats = null;
		}
		
		private void attach_HostageDrop(HostageDrop entity)
		{
			this.SendPropertyChanging();
			entity.PlayerMatchStats = this;
		}
		
		private void detach_HostageDrop(HostageDrop entity)
		{
			this.SendPropertyChanging();
			entity.PlayerMatchStats = null;
		}
		
		private void attach_HostagePickUp(HostagePickUp entity)
		{
			this.SendPropertyChanging();
			entity.PlayerMatchStats = this;
		}
		
		private void detach_HostagePickUp(HostagePickUp entity)
		{
			this.SendPropertyChanging();
			entity.PlayerMatchStats = null;
		}
		
		private void attach_HostageRescue(HostageRescue entity)
		{
			this.SendPropertyChanging();
			entity.PlayerMatchStats = this;
		}
		
		private void detach_HostageRescue(HostageRescue entity)
		{
			this.SendPropertyChanging();
			entity.PlayerMatchStats = null;
		}
		
		private void attach_ItemDropped(ItemDropped entity)
		{
			this.SendPropertyChanging();
			entity.PlayerMatchStats = this;
		}
		
		private void detach_ItemDropped(ItemDropped entity)
		{
			this.SendPropertyChanging();
			entity.PlayerMatchStats = null;
		}
		
		private void attach_ItemPickedUp(ItemPickedUp entity)
		{
			this.SendPropertyChanging();
			entity.PlayerMatchStats = this;
		}
		
		private void detach_ItemPickedUp(ItemPickedUp entity)
		{
			this.SendPropertyChanging();
			entity.PlayerMatchStats = null;
		}
		
		private void attach_ItemSaved(ItemSaved entity)
		{
			this.SendPropertyChanging();
			entity.PlayerMatchStats = this;
		}
		
		private void detach_ItemSaved(ItemSaved entity)
		{
			this.SendPropertyChanging();
			entity.PlayerMatchStats = null;
		}
		
		private void attach_Kills1(Kills entity)
		{
			this.SendPropertyChanging();
			entity.PlayerMatchStats = this;
		}
		
		private void detach_Kills1(Kills entity)
		{
			this.SendPropertyChanging();
			entity.PlayerMatchStats = null;
		}
		
		private void attach_Kills2(Kills entity)
		{
			this.SendPropertyChanging();
			entity.PlayerMatchStats1 = this;
		}
		
		private void detach_Kills2(Kills entity)
		{
			this.SendPropertyChanging();
			entity.PlayerMatchStats1 = null;
		}
		
		private void attach_PlayerPosition(PlayerPosition entity)
		{
			this.SendPropertyChanging();
			entity.PlayerMatchStats = this;
		}
		
		private void detach_PlayerPosition(PlayerPosition entity)
		{
			this.SendPropertyChanging();
			entity.PlayerMatchStats = null;
		}
		
		private void attach_PlayerRoundStats(PlayerRoundStats entity)
		{
			this.SendPropertyChanging();
			entity.PlayerMatchStats = this;
		}
		
		private void detach_PlayerRoundStats(PlayerRoundStats entity)
		{
			this.SendPropertyChanging();
			entity.PlayerMatchStats = null;
		}
		
		private void attach_RoundItem(RoundItem entity)
		{
			this.SendPropertyChanging();
			entity.PlayerMatchStats = this;
		}
		
		private void detach_RoundItem(RoundItem entity)
		{
			this.SendPropertyChanging();
			entity.PlayerMatchStats = null;
		}
		
		private void attach_Smoke(Smoke entity)
		{
			this.SendPropertyChanging();
			entity.PlayerMatchStats = this;
		}
		
		private void detach_Smoke(Smoke entity)
		{
			this.SendPropertyChanging();
			entity.PlayerMatchStats = null;
		}
		
		private void attach_WeaponFired(WeaponFired entity)
		{
			this.SendPropertyChanging();
			entity.PlayerMatchStats = this;
		}
		
		private void detach_WeaponFired(WeaponFired entity)
		{
			this.SendPropertyChanging();
			entity.PlayerMatchStats = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PlayerPosition")]
	public partial class PlayerPosition : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _MatchId;
		
		private short _Round;
		
		private int _Time;
		
		private int _Tick;
		
		private long _PlayerId;
		
		private double _PlayerPosX;
		
		private double _PlayerPosY;
		
		private double _PlayerPosZ;
		
		private double _PlayerViewX;
		
		private double _PlayerViewY;
		
		private double _PlayerVeloX;
		
		private double _PlayerVeloY;
		
		private double _PlayerVeloZ;
		
		private short _Weapon;
		
		private EntityRef<MatchStats> _MatchStats;
		
		private EntityRef<PlayerMatchStats> _PlayerMatchStats;
		
		private EntityRef<PlayerRoundStats> _PlayerRoundStats;
		
		private EntityRef<RoundStats> _RoundStats;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMatchIdChanging(long value);
    partial void OnMatchIdChanged();
    partial void OnRoundChanging(short value);
    partial void OnRoundChanged();
    partial void OnTimeChanging(int value);
    partial void OnTimeChanged();
    partial void OnTickChanging(int value);
    partial void OnTickChanged();
    partial void OnPlayerIdChanging(long value);
    partial void OnPlayerIdChanged();
    partial void OnPlayerPosXChanging(double value);
    partial void OnPlayerPosXChanged();
    partial void OnPlayerPosYChanging(double value);
    partial void OnPlayerPosYChanged();
    partial void OnPlayerPosZChanging(double value);
    partial void OnPlayerPosZChanged();
    partial void OnPlayerViewXChanging(double value);
    partial void OnPlayerViewXChanged();
    partial void OnPlayerViewYChanging(double value);
    partial void OnPlayerViewYChanged();
    partial void OnPlayerVeloXChanging(double value);
    partial void OnPlayerVeloXChanged();
    partial void OnPlayerVeloYChanging(double value);
    partial void OnPlayerVeloYChanged();
    partial void OnPlayerVeloZChanging(double value);
    partial void OnPlayerVeloZChanged();
    partial void OnWeaponChanging(short value);
    partial void OnWeaponChanged();
    #endregion
		
		public PlayerPosition()
		{
			this._MatchStats = default(EntityRef<MatchStats>);
			this._PlayerMatchStats = default(EntityRef<PlayerMatchStats>);
			this._PlayerRoundStats = default(EntityRef<PlayerRoundStats>);
			this._RoundStats = default(EntityRef<RoundStats>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MatchId", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long MatchId
		{
			get
			{
				return this._MatchId;
			}
			set
			{
				if ((this._MatchId != value))
				{
					if ((((this._MatchStats.HasLoadedOrAssignedValue || this._PlayerMatchStats.HasLoadedOrAssignedValue) 
								|| this._PlayerRoundStats.HasLoadedOrAssignedValue) 
								|| this._RoundStats.HasLoadedOrAssignedValue))
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMatchIdChanging(value);
					this.SendPropertyChanging();
					this._MatchId = value;
					this.SendPropertyChanged("MatchId");
					this.OnMatchIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Round", DbType="SmallInt NOT NULL", IsPrimaryKey=true)]
		public short Round
		{
			get
			{
				return this._Round;
			}
			set
			{
				if ((this._Round != value))
				{
					if ((this._PlayerRoundStats.HasLoadedOrAssignedValue || this._RoundStats.HasLoadedOrAssignedValue))
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRoundChanging(value);
					this.SendPropertyChanging();
					this._Round = value;
					this.SendPropertyChanged("Round");
					this.OnRoundChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Time", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Time
		{
			get
			{
				return this._Time;
			}
			set
			{
				if ((this._Time != value))
				{
					this.OnTimeChanging(value);
					this.SendPropertyChanging();
					this._Time = value;
					this.SendPropertyChanged("Time");
					this.OnTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Tick", DbType="Int NOT NULL")]
		public int Tick
		{
			get
			{
				return this._Tick;
			}
			set
			{
				if ((this._Tick != value))
				{
					this.OnTickChanging(value);
					this.SendPropertyChanging();
					this._Tick = value;
					this.SendPropertyChanged("Tick");
					this.OnTickChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlayerId", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long PlayerId
		{
			get
			{
				return this._PlayerId;
			}
			set
			{
				if ((this._PlayerId != value))
				{
					if ((this._PlayerMatchStats.HasLoadedOrAssignedValue || this._PlayerRoundStats.HasLoadedOrAssignedValue))
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPlayerIdChanging(value);
					this.SendPropertyChanging();
					this._PlayerId = value;
					this.SendPropertyChanged("PlayerId");
					this.OnPlayerIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlayerPosX", DbType="Float NOT NULL")]
		public double PlayerPosX
		{
			get
			{
				return this._PlayerPosX;
			}
			set
			{
				if ((this._PlayerPosX != value))
				{
					this.OnPlayerPosXChanging(value);
					this.SendPropertyChanging();
					this._PlayerPosX = value;
					this.SendPropertyChanged("PlayerPosX");
					this.OnPlayerPosXChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlayerPosY", DbType="Float NOT NULL")]
		public double PlayerPosY
		{
			get
			{
				return this._PlayerPosY;
			}
			set
			{
				if ((this._PlayerPosY != value))
				{
					this.OnPlayerPosYChanging(value);
					this.SendPropertyChanging();
					this._PlayerPosY = value;
					this.SendPropertyChanged("PlayerPosY");
					this.OnPlayerPosYChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlayerPosZ", DbType="Float NOT NULL")]
		public double PlayerPosZ
		{
			get
			{
				return this._PlayerPosZ;
			}
			set
			{
				if ((this._PlayerPosZ != value))
				{
					this.OnPlayerPosZChanging(value);
					this.SendPropertyChanging();
					this._PlayerPosZ = value;
					this.SendPropertyChanged("PlayerPosZ");
					this.OnPlayerPosZChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlayerViewX", DbType="Float NOT NULL")]
		public double PlayerViewX
		{
			get
			{
				return this._PlayerViewX;
			}
			set
			{
				if ((this._PlayerViewX != value))
				{
					this.OnPlayerViewXChanging(value);
					this.SendPropertyChanging();
					this._PlayerViewX = value;
					this.SendPropertyChanged("PlayerViewX");
					this.OnPlayerViewXChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlayerViewY", DbType="Float NOT NULL")]
		public double PlayerViewY
		{
			get
			{
				return this._PlayerViewY;
			}
			set
			{
				if ((this._PlayerViewY != value))
				{
					this.OnPlayerViewYChanging(value);
					this.SendPropertyChanging();
					this._PlayerViewY = value;
					this.SendPropertyChanged("PlayerViewY");
					this.OnPlayerViewYChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlayerVeloX", DbType="Float NOT NULL")]
		public double PlayerVeloX
		{
			get
			{
				return this._PlayerVeloX;
			}
			set
			{
				if ((this._PlayerVeloX != value))
				{
					this.OnPlayerVeloXChanging(value);
					this.SendPropertyChanging();
					this._PlayerVeloX = value;
					this.SendPropertyChanged("PlayerVeloX");
					this.OnPlayerVeloXChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlayerVeloY", DbType="Float NOT NULL")]
		public double PlayerVeloY
		{
			get
			{
				return this._PlayerVeloY;
			}
			set
			{
				if ((this._PlayerVeloY != value))
				{
					this.OnPlayerVeloYChanging(value);
					this.SendPropertyChanging();
					this._PlayerVeloY = value;
					this.SendPropertyChanged("PlayerVeloY");
					this.OnPlayerVeloYChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlayerVeloZ", DbType="Float NOT NULL")]
		public double PlayerVeloZ
		{
			get
			{
				return this._PlayerVeloZ;
			}
			set
			{
				if ((this._PlayerVeloZ != value))
				{
					this.OnPlayerVeloZChanging(value);
					this.SendPropertyChanging();
					this._PlayerVeloZ = value;
					this.SendPropertyChanged("PlayerVeloZ");
					this.OnPlayerVeloZChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Weapon", DbType="SmallInt NOT NULL")]
		public short Weapon
		{
			get
			{
				return this._Weapon;
			}
			set
			{
				if ((this._Weapon != value))
				{
					this.OnWeaponChanging(value);
					this.SendPropertyChanging();
					this._Weapon = value;
					this.SendPropertyChanged("Weapon");
					this.OnWeaponChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MatchStats_PlayerPosition", Storage="_MatchStats", ThisKey="MatchId", OtherKey="MatchId", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public MatchStats MatchStats
		{
			get
			{
				return this._MatchStats.Entity;
			}
			set
			{
				MatchStats previousValue = this._MatchStats.Entity;
				if (((previousValue != value) 
							|| (this._MatchStats.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MatchStats.Entity = null;
						previousValue.PlayerPosition.Remove(this);
					}
					this._MatchStats.Entity = value;
					if ((value != null))
					{
						value.PlayerPosition.Add(this);
						this._MatchId = value.MatchId;
					}
					else
					{
						this._MatchId = default(long);
					}
					this.SendPropertyChanged("MatchStats");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PlayerMatchStats_PlayerPosition", Storage="_PlayerMatchStats", ThisKey="MatchId,PlayerId", OtherKey="MatchId,SteamId", IsForeignKey=true)]
		public PlayerMatchStats PlayerMatchStats
		{
			get
			{
				return this._PlayerMatchStats.Entity;
			}
			set
			{
				PlayerMatchStats previousValue = this._PlayerMatchStats.Entity;
				if (((previousValue != value) 
							|| (this._PlayerMatchStats.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PlayerMatchStats.Entity = null;
						previousValue.PlayerPosition.Remove(this);
					}
					this._PlayerMatchStats.Entity = value;
					if ((value != null))
					{
						value.PlayerPosition.Add(this);
						this._MatchId = value.MatchId;
						this._PlayerId = value.SteamId;
					}
					else
					{
						this._MatchId = default(long);
						this._PlayerId = default(long);
					}
					this.SendPropertyChanged("PlayerMatchStats");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PlayerRoundStats_PlayerPosition", Storage="_PlayerRoundStats", ThisKey="MatchId,Round,PlayerId", OtherKey="MatchId,Round,PlayerId", IsForeignKey=true)]
		public PlayerRoundStats PlayerRoundStats
		{
			get
			{
				return this._PlayerRoundStats.Entity;
			}
			set
			{
				PlayerRoundStats previousValue = this._PlayerRoundStats.Entity;
				if (((previousValue != value) 
							|| (this._PlayerRoundStats.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PlayerRoundStats.Entity = null;
						previousValue.PlayerPosition.Remove(this);
					}
					this._PlayerRoundStats.Entity = value;
					if ((value != null))
					{
						value.PlayerPosition.Add(this);
						this._MatchId = value.MatchId;
						this._Round = value.Round;
						this._PlayerId = value.PlayerId;
					}
					else
					{
						this._MatchId = default(long);
						this._Round = default(short);
						this._PlayerId = default(long);
					}
					this.SendPropertyChanged("PlayerRoundStats");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RoundStats_PlayerPosition", Storage="_RoundStats", ThisKey="MatchId,Round", OtherKey="MatchId,Round", IsForeignKey=true)]
		public RoundStats RoundStats
		{
			get
			{
				return this._RoundStats.Entity;
			}
			set
			{
				RoundStats previousValue = this._RoundStats.Entity;
				if (((previousValue != value) 
							|| (this._RoundStats.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._RoundStats.Entity = null;
						previousValue.PlayerPosition.Remove(this);
					}
					this._RoundStats.Entity = value;
					if ((value != null))
					{
						value.PlayerPosition.Add(this);
						this._MatchId = value.MatchId;
						this._Round = value.Round;
					}
					else
					{
						this._MatchId = default(long);
						this._Round = default(short);
					}
					this.SendPropertyChanged("RoundStats");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PlayerRoundStats")]
	public partial class PlayerRoundStats : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _MatchId;
		
		private short _Round;
		
		private long _PlayerId;
		
		private int _PlayedEquipmentValue;
		
		private int _MoneyInitial;
		
		private int _MoneySaved;
		
		private int _MoneyEarned;
		
		private int _MoneySpent;
		
		private int _MoneyLost;
		
		private int _GiftedValue;
		
		private int _ReceivedGiftValue;
		
		private bool _IsCT;
		
		private short _ArmorType;
		
		private int _PathId;
		
		private short _RoundStartKills;
		
		private short _RoundStartDeaths;
		
		private short _RoundStartAssists;
		
		private short _RoundStartScore;
		
		private short _RoundStartMVPs;
		
		private short _RoundStartDamage;
		
		private EntitySet<WeaponReload> _WeaponReload;
		
		private EntitySet<BombDefused> _BombDefused;
		
		private EntitySet<BombPlant> _BombPlant;
		
		private EntitySet<BotTakeOver> _BotTakeOver;
		
		private EntitySet<Damage> _Damage;
		
		private EntitySet<Damage> _Damage1;
		
		private EntitySet<Decoy> _Decoy;
		
		private EntitySet<FireNade> _FireNade;
		
		private EntitySet<Flash> _Flash;
		
		private EntitySet<Flashed> _Flashed;
		
		private EntitySet<HE> _HE;
		
		private EntitySet<HostageDrop> _HostageDrop;
		
		private EntitySet<HostagePickUp> _HostagePickUp;
		
		private EntitySet<HostageRescue> _HostageRescue;
		
		private EntitySet<ItemDropped> _ItemDropped;
		
		private EntitySet<ItemPickedUp> _ItemPickedUp;
		
		private EntitySet<ItemSaved> _ItemSaved;
		
		private EntitySet<Kills> _Kills;
		
		private EntitySet<Kills> _Kills1;
		
		private EntitySet<PlayerPosition> _PlayerPosition;
		
		private EntitySet<RoundItem> _RoundItem;
		
		private EntitySet<Smoke> _Smoke;
		
		private EntitySet<WeaponFired> _WeaponFired;
		
		private EntityRef<MatchStats> _MatchStats;
		
		private EntityRef<PlayerMatchStats> _PlayerMatchStats;
		
		private EntityRef<PlayerStats> _PlayerStats;
		
		private EntityRef<RoundStats> _RoundStats;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMatchIdChanging(long value);
    partial void OnMatchIdChanged();
    partial void OnRoundChanging(short value);
    partial void OnRoundChanged();
    partial void OnPlayerIdChanging(long value);
    partial void OnPlayerIdChanged();
    partial void OnPlayedEquipmentValueChanging(int value);
    partial void OnPlayedEquipmentValueChanged();
    partial void OnMoneyInitialChanging(int value);
    partial void OnMoneyInitialChanged();
    partial void OnMoneySavedChanging(int value);
    partial void OnMoneySavedChanged();
    partial void OnMoneyEarnedChanging(int value);
    partial void OnMoneyEarnedChanged();
    partial void OnMoneySpentChanging(int value);
    partial void OnMoneySpentChanged();
    partial void OnMoneyLostChanging(int value);
    partial void OnMoneyLostChanged();
    partial void OnGiftedValueChanging(int value);
    partial void OnGiftedValueChanged();
    partial void OnReceivedGiftValueChanging(int value);
    partial void OnReceivedGiftValueChanged();
    partial void OnIsCTChanging(bool value);
    partial void OnIsCTChanged();
    partial void OnArmorTypeChanging(short value);
    partial void OnArmorTypeChanged();
    partial void OnPathIdChanging(int value);
    partial void OnPathIdChanged();
    partial void OnRoundStartKillsChanging(short value);
    partial void OnRoundStartKillsChanged();
    partial void OnRoundStartDeathsChanging(short value);
    partial void OnRoundStartDeathsChanged();
    partial void OnRoundStartAssistsChanging(short value);
    partial void OnRoundStartAssistsChanged();
    partial void OnRoundStartScoreChanging(short value);
    partial void OnRoundStartScoreChanged();
    partial void OnRoundStartMVPsChanging(short value);
    partial void OnRoundStartMVPsChanged();
    partial void OnRoundStartDamageChanging(short value);
    partial void OnRoundStartDamageChanged();
    #endregion
		
		public PlayerRoundStats()
		{
			this._WeaponReload = new EntitySet<WeaponReload>(new Action<WeaponReload>(this.attach_WeaponReload), new Action<WeaponReload>(this.detach_WeaponReload));
			this._BombDefused = new EntitySet<BombDefused>(new Action<BombDefused>(this.attach_BombDefused), new Action<BombDefused>(this.detach_BombDefused));
			this._BombPlant = new EntitySet<BombPlant>(new Action<BombPlant>(this.attach_BombPlant), new Action<BombPlant>(this.detach_BombPlant));
			this._BotTakeOver = new EntitySet<BotTakeOver>(new Action<BotTakeOver>(this.attach_BotTakeOver), new Action<BotTakeOver>(this.detach_BotTakeOver));
			this._Damage = new EntitySet<Damage>(new Action<Damage>(this.attach_Damage), new Action<Damage>(this.detach_Damage));
			this._Damage1 = new EntitySet<Damage>(new Action<Damage>(this.attach_Damage1), new Action<Damage>(this.detach_Damage1));
			this._Decoy = new EntitySet<Decoy>(new Action<Decoy>(this.attach_Decoy), new Action<Decoy>(this.detach_Decoy));
			this._FireNade = new EntitySet<FireNade>(new Action<FireNade>(this.attach_FireNade), new Action<FireNade>(this.detach_FireNade));
			this._Flash = new EntitySet<Flash>(new Action<Flash>(this.attach_Flash), new Action<Flash>(this.detach_Flash));
			this._Flashed = new EntitySet<Flashed>(new Action<Flashed>(this.attach_Flashed), new Action<Flashed>(this.detach_Flashed));
			this._HE = new EntitySet<HE>(new Action<HE>(this.attach_HE), new Action<HE>(this.detach_HE));
			this._HostageDrop = new EntitySet<HostageDrop>(new Action<HostageDrop>(this.attach_HostageDrop), new Action<HostageDrop>(this.detach_HostageDrop));
			this._HostagePickUp = new EntitySet<HostagePickUp>(new Action<HostagePickUp>(this.attach_HostagePickUp), new Action<HostagePickUp>(this.detach_HostagePickUp));
			this._HostageRescue = new EntitySet<HostageRescue>(new Action<HostageRescue>(this.attach_HostageRescue), new Action<HostageRescue>(this.detach_HostageRescue));
			this._ItemDropped = new EntitySet<ItemDropped>(new Action<ItemDropped>(this.attach_ItemDropped), new Action<ItemDropped>(this.detach_ItemDropped));
			this._ItemPickedUp = new EntitySet<ItemPickedUp>(new Action<ItemPickedUp>(this.attach_ItemPickedUp), new Action<ItemPickedUp>(this.detach_ItemPickedUp));
			this._ItemSaved = new EntitySet<ItemSaved>(new Action<ItemSaved>(this.attach_ItemSaved), new Action<ItemSaved>(this.detach_ItemSaved));
			this._Kills = new EntitySet<Kills>(new Action<Kills>(this.attach_Kills), new Action<Kills>(this.detach_Kills));
			this._Kills1 = new EntitySet<Kills>(new Action<Kills>(this.attach_Kills1), new Action<Kills>(this.detach_Kills1));
			this._PlayerPosition = new EntitySet<PlayerPosition>(new Action<PlayerPosition>(this.attach_PlayerPosition), new Action<PlayerPosition>(this.detach_PlayerPosition));
			this._RoundItem = new EntitySet<RoundItem>(new Action<RoundItem>(this.attach_RoundItem), new Action<RoundItem>(this.detach_RoundItem));
			this._Smoke = new EntitySet<Smoke>(new Action<Smoke>(this.attach_Smoke), new Action<Smoke>(this.detach_Smoke));
			this._WeaponFired = new EntitySet<WeaponFired>(new Action<WeaponFired>(this.attach_WeaponFired), new Action<WeaponFired>(this.detach_WeaponFired));
			this._MatchStats = default(EntityRef<MatchStats>);
			this._PlayerMatchStats = default(EntityRef<PlayerMatchStats>);
			this._PlayerStats = default(EntityRef<PlayerStats>);
			this._RoundStats = default(EntityRef<RoundStats>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MatchId", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long MatchId
		{
			get
			{
				return this._MatchId;
			}
			set
			{
				if ((this._MatchId != value))
				{
					if (((this._MatchStats.HasLoadedOrAssignedValue || this._PlayerMatchStats.HasLoadedOrAssignedValue) 
								|| this._RoundStats.HasLoadedOrAssignedValue))
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMatchIdChanging(value);
					this.SendPropertyChanging();
					this._MatchId = value;
					this.SendPropertyChanged("MatchId");
					this.OnMatchIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Round", DbType="SmallInt NOT NULL", IsPrimaryKey=true)]
		public short Round
		{
			get
			{
				return this._Round;
			}
			set
			{
				if ((this._Round != value))
				{
					if (this._RoundStats.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRoundChanging(value);
					this.SendPropertyChanging();
					this._Round = value;
					this.SendPropertyChanged("Round");
					this.OnRoundChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlayerId", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long PlayerId
		{
			get
			{
				return this._PlayerId;
			}
			set
			{
				if ((this._PlayerId != value))
				{
					if ((this._PlayerMatchStats.HasLoadedOrAssignedValue || this._PlayerStats.HasLoadedOrAssignedValue))
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPlayerIdChanging(value);
					this.SendPropertyChanging();
					this._PlayerId = value;
					this.SendPropertyChanged("PlayerId");
					this.OnPlayerIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlayedEquipmentValue", DbType="Int NOT NULL")]
		public int PlayedEquipmentValue
		{
			get
			{
				return this._PlayedEquipmentValue;
			}
			set
			{
				if ((this._PlayedEquipmentValue != value))
				{
					this.OnPlayedEquipmentValueChanging(value);
					this.SendPropertyChanging();
					this._PlayedEquipmentValue = value;
					this.SendPropertyChanged("PlayedEquipmentValue");
					this.OnPlayedEquipmentValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MoneyInitial", DbType="Int NOT NULL")]
		public int MoneyInitial
		{
			get
			{
				return this._MoneyInitial;
			}
			set
			{
				if ((this._MoneyInitial != value))
				{
					this.OnMoneyInitialChanging(value);
					this.SendPropertyChanging();
					this._MoneyInitial = value;
					this.SendPropertyChanged("MoneyInitial");
					this.OnMoneyInitialChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MoneySaved", DbType="Int NOT NULL")]
		public int MoneySaved
		{
			get
			{
				return this._MoneySaved;
			}
			set
			{
				if ((this._MoneySaved != value))
				{
					this.OnMoneySavedChanging(value);
					this.SendPropertyChanging();
					this._MoneySaved = value;
					this.SendPropertyChanged("MoneySaved");
					this.OnMoneySavedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MoneyEarned", DbType="Int NOT NULL")]
		public int MoneyEarned
		{
			get
			{
				return this._MoneyEarned;
			}
			set
			{
				if ((this._MoneyEarned != value))
				{
					this.OnMoneyEarnedChanging(value);
					this.SendPropertyChanging();
					this._MoneyEarned = value;
					this.SendPropertyChanged("MoneyEarned");
					this.OnMoneyEarnedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MoneySpent", DbType="Int NOT NULL")]
		public int MoneySpent
		{
			get
			{
				return this._MoneySpent;
			}
			set
			{
				if ((this._MoneySpent != value))
				{
					this.OnMoneySpentChanging(value);
					this.SendPropertyChanging();
					this._MoneySpent = value;
					this.SendPropertyChanged("MoneySpent");
					this.OnMoneySpentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MoneyLost", DbType="Int NOT NULL")]
		public int MoneyLost
		{
			get
			{
				return this._MoneyLost;
			}
			set
			{
				if ((this._MoneyLost != value))
				{
					this.OnMoneyLostChanging(value);
					this.SendPropertyChanging();
					this._MoneyLost = value;
					this.SendPropertyChanged("MoneyLost");
					this.OnMoneyLostChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GiftedValue", DbType="Int NOT NULL")]
		public int GiftedValue
		{
			get
			{
				return this._GiftedValue;
			}
			set
			{
				if ((this._GiftedValue != value))
				{
					this.OnGiftedValueChanging(value);
					this.SendPropertyChanging();
					this._GiftedValue = value;
					this.SendPropertyChanged("GiftedValue");
					this.OnGiftedValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReceivedGiftValue", DbType="Int NOT NULL")]
		public int ReceivedGiftValue
		{
			get
			{
				return this._ReceivedGiftValue;
			}
			set
			{
				if ((this._ReceivedGiftValue != value))
				{
					this.OnReceivedGiftValueChanging(value);
					this.SendPropertyChanging();
					this._ReceivedGiftValue = value;
					this.SendPropertyChanged("ReceivedGiftValue");
					this.OnReceivedGiftValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsCT", DbType="Bit NOT NULL")]
		public bool IsCT
		{
			get
			{
				return this._IsCT;
			}
			set
			{
				if ((this._IsCT != value))
				{
					this.OnIsCTChanging(value);
					this.SendPropertyChanging();
					this._IsCT = value;
					this.SendPropertyChanged("IsCT");
					this.OnIsCTChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ArmorType", DbType="SmallInt NOT NULL")]
		public short ArmorType
		{
			get
			{
				return this._ArmorType;
			}
			set
			{
				if ((this._ArmorType != value))
				{
					this.OnArmorTypeChanging(value);
					this.SendPropertyChanging();
					this._ArmorType = value;
					this.SendPropertyChanged("ArmorType");
					this.OnArmorTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PathId", DbType="Int NOT NULL")]
		public int PathId
		{
			get
			{
				return this._PathId;
			}
			set
			{
				if ((this._PathId != value))
				{
					this.OnPathIdChanging(value);
					this.SendPropertyChanging();
					this._PathId = value;
					this.SendPropertyChanged("PathId");
					this.OnPathIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoundStartKills", DbType="SmallInt NOT NULL")]
		public short RoundStartKills
		{
			get
			{
				return this._RoundStartKills;
			}
			set
			{
				if ((this._RoundStartKills != value))
				{
					this.OnRoundStartKillsChanging(value);
					this.SendPropertyChanging();
					this._RoundStartKills = value;
					this.SendPropertyChanged("RoundStartKills");
					this.OnRoundStartKillsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoundStartDeaths", DbType="SmallInt NOT NULL")]
		public short RoundStartDeaths
		{
			get
			{
				return this._RoundStartDeaths;
			}
			set
			{
				if ((this._RoundStartDeaths != value))
				{
					this.OnRoundStartDeathsChanging(value);
					this.SendPropertyChanging();
					this._RoundStartDeaths = value;
					this.SendPropertyChanged("RoundStartDeaths");
					this.OnRoundStartDeathsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoundStartAssists", DbType="SmallInt NOT NULL")]
		public short RoundStartAssists
		{
			get
			{
				return this._RoundStartAssists;
			}
			set
			{
				if ((this._RoundStartAssists != value))
				{
					this.OnRoundStartAssistsChanging(value);
					this.SendPropertyChanging();
					this._RoundStartAssists = value;
					this.SendPropertyChanged("RoundStartAssists");
					this.OnRoundStartAssistsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoundStartScore", DbType="SmallInt NOT NULL")]
		public short RoundStartScore
		{
			get
			{
				return this._RoundStartScore;
			}
			set
			{
				if ((this._RoundStartScore != value))
				{
					this.OnRoundStartScoreChanging(value);
					this.SendPropertyChanging();
					this._RoundStartScore = value;
					this.SendPropertyChanged("RoundStartScore");
					this.OnRoundStartScoreChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoundStartMVPs", DbType="SmallInt NOT NULL")]
		public short RoundStartMVPs
		{
			get
			{
				return this._RoundStartMVPs;
			}
			set
			{
				if ((this._RoundStartMVPs != value))
				{
					this.OnRoundStartMVPsChanging(value);
					this.SendPropertyChanging();
					this._RoundStartMVPs = value;
					this.SendPropertyChanged("RoundStartMVPs");
					this.OnRoundStartMVPsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoundStartDamage", DbType="SmallInt NOT NULL")]
		public short RoundStartDamage
		{
			get
			{
				return this._RoundStartDamage;
			}
			set
			{
				if ((this._RoundStartDamage != value))
				{
					this.OnRoundStartDamageChanging(value);
					this.SendPropertyChanging();
					this._RoundStartDamage = value;
					this.SendPropertyChanged("RoundStartDamage");
					this.OnRoundStartDamageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PlayerRoundStats_WeaponReload", Storage="_WeaponReload", ThisKey="MatchId,Round,PlayerId", OtherKey="MatchId,Round,PlayerId")]
		public EntitySet<WeaponReload> WeaponReload
		{
			get
			{
				return this._WeaponReload;
			}
			set
			{
				this._WeaponReload.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PlayerRoundStats_BombDefused", Storage="_BombDefused", ThisKey="MatchId,Round,PlayerId", OtherKey="MatchId,Round,PlayerId")]
		public EntitySet<BombDefused> BombDefused
		{
			get
			{
				return this._BombDefused;
			}
			set
			{
				this._BombDefused.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PlayerRoundStats_BombPlant", Storage="_BombPlant", ThisKey="MatchId,Round,PlayerId", OtherKey="MatchId,Round,PlayerId")]
		public EntitySet<BombPlant> BombPlant
		{
			get
			{
				return this._BombPlant;
			}
			set
			{
				this._BombPlant.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PlayerRoundStats_BotTakeOver", Storage="_BotTakeOver", ThisKey="MatchId,Round,PlayerId", OtherKey="MatchId,Round,PlayerId")]
		public EntitySet<BotTakeOver> BotTakeOver
		{
			get
			{
				return this._BotTakeOver;
			}
			set
			{
				this._BotTakeOver.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PlayerRoundStats_Damage", Storage="_Damage", ThisKey="MatchId,Round,PlayerId", OtherKey="MatchId,Round,PlayerId")]
		public EntitySet<Damage> Damage
		{
			get
			{
				return this._Damage;
			}
			set
			{
				this._Damage.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PlayerRoundStats_Damage1", Storage="_Damage1", ThisKey="MatchId,Round,PlayerId", OtherKey="MatchId,Round,VictimId")]
		public EntitySet<Damage> Damage1
		{
			get
			{
				return this._Damage1;
			}
			set
			{
				this._Damage1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PlayerRoundStats_Decoy", Storage="_Decoy", ThisKey="MatchId,Round,PlayerId", OtherKey="MatchId,Round,PlayerId")]
		public EntitySet<Decoy> Decoy
		{
			get
			{
				return this._Decoy;
			}
			set
			{
				this._Decoy.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PlayerRoundStats_FireNade", Storage="_FireNade", ThisKey="MatchId,Round,PlayerId", OtherKey="MatchId,Round,PlayerId")]
		public EntitySet<FireNade> FireNade
		{
			get
			{
				return this._FireNade;
			}
			set
			{
				this._FireNade.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PlayerRoundStats_Flash", Storage="_Flash", ThisKey="MatchId,Round,PlayerId", OtherKey="MatchId,Round,PlayerId")]
		public EntitySet<Flash> Flash
		{
			get
			{
				return this._Flash;
			}
			set
			{
				this._Flash.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PlayerRoundStats_Flashed", Storage="_Flashed", ThisKey="MatchId,Round,PlayerId", OtherKey="MatchId,Round,VictimId")]
		public EntitySet<Flashed> Flashed
		{
			get
			{
				return this._Flashed;
			}
			set
			{
				this._Flashed.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PlayerRoundStats_HE", Storage="_HE", ThisKey="MatchId,Round,PlayerId", OtherKey="MatchId,Round,PlayerId")]
		public EntitySet<HE> HE
		{
			get
			{
				return this._HE;
			}
			set
			{
				this._HE.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PlayerRoundStats_HostageDrop", Storage="_HostageDrop", ThisKey="MatchId,Round,PlayerId", OtherKey="MatchId,Round,PlayerId")]
		public EntitySet<HostageDrop> HostageDrop
		{
			get
			{
				return this._HostageDrop;
			}
			set
			{
				this._HostageDrop.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PlayerRoundStats_HostagePickUp", Storage="_HostagePickUp", ThisKey="MatchId,Round,PlayerId", OtherKey="MatchId,Round,PlayerId")]
		public EntitySet<HostagePickUp> HostagePickUp
		{
			get
			{
				return this._HostagePickUp;
			}
			set
			{
				this._HostagePickUp.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PlayerRoundStats_HostageRescue", Storage="_HostageRescue", ThisKey="MatchId,Round,PlayerId", OtherKey="MatchId,Round,PlayerId")]
		public EntitySet<HostageRescue> HostageRescue
		{
			get
			{
				return this._HostageRescue;
			}
			set
			{
				this._HostageRescue.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PlayerRoundStats_ItemDropped", Storage="_ItemDropped", ThisKey="MatchId,Round,PlayerId", OtherKey="MatchId,Round,PlayerId")]
		public EntitySet<ItemDropped> ItemDropped
		{
			get
			{
				return this._ItemDropped;
			}
			set
			{
				this._ItemDropped.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PlayerRoundStats_ItemPickedUp", Storage="_ItemPickedUp", ThisKey="MatchId,Round,PlayerId", OtherKey="MatchId,Round,PlayerId")]
		public EntitySet<ItemPickedUp> ItemPickedUp
		{
			get
			{
				return this._ItemPickedUp;
			}
			set
			{
				this._ItemPickedUp.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PlayerRoundStats_ItemSaved", Storage="_ItemSaved", ThisKey="MatchId,Round,PlayerId", OtherKey="MatchId,Round,PlayerId")]
		public EntitySet<ItemSaved> ItemSaved
		{
			get
			{
				return this._ItemSaved;
			}
			set
			{
				this._ItemSaved.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PlayerRoundStats_Kills", Storage="_Kills", ThisKey="MatchId,Round,PlayerId", OtherKey="MatchId,Round,PlayerId")]
		public EntitySet<Kills> Kills
		{
			get
			{
				return this._Kills;
			}
			set
			{
				this._Kills.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PlayerRoundStats_Kills1", Storage="_Kills1", ThisKey="MatchId,Round,PlayerId", OtherKey="MatchId,Round,VictimId")]
		public EntitySet<Kills> Kills1
		{
			get
			{
				return this._Kills1;
			}
			set
			{
				this._Kills1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PlayerRoundStats_PlayerPosition", Storage="_PlayerPosition", ThisKey="MatchId,Round,PlayerId", OtherKey="MatchId,Round,PlayerId")]
		public EntitySet<PlayerPosition> PlayerPosition
		{
			get
			{
				return this._PlayerPosition;
			}
			set
			{
				this._PlayerPosition.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PlayerRoundStats_RoundItem", Storage="_RoundItem", ThisKey="MatchId,Round,PlayerId", OtherKey="MatchId,Round,PlayerId")]
		public EntitySet<RoundItem> RoundItem
		{
			get
			{
				return this._RoundItem;
			}
			set
			{
				this._RoundItem.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PlayerRoundStats_Smoke", Storage="_Smoke", ThisKey="MatchId,Round,PlayerId", OtherKey="MatchId,Round,PlayerId")]
		public EntitySet<Smoke> Smoke
		{
			get
			{
				return this._Smoke;
			}
			set
			{
				this._Smoke.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PlayerRoundStats_WeaponFired", Storage="_WeaponFired", ThisKey="MatchId,Round,PlayerId", OtherKey="MatchId,Round,PlayerId")]
		public EntitySet<WeaponFired> WeaponFired
		{
			get
			{
				return this._WeaponFired;
			}
			set
			{
				this._WeaponFired.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MatchStats_PlayerRoundStats", Storage="_MatchStats", ThisKey="MatchId", OtherKey="MatchId", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public MatchStats MatchStats
		{
			get
			{
				return this._MatchStats.Entity;
			}
			set
			{
				MatchStats previousValue = this._MatchStats.Entity;
				if (((previousValue != value) 
							|| (this._MatchStats.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MatchStats.Entity = null;
						previousValue.PlayerRoundStats.Remove(this);
					}
					this._MatchStats.Entity = value;
					if ((value != null))
					{
						value.PlayerRoundStats.Add(this);
						this._MatchId = value.MatchId;
					}
					else
					{
						this._MatchId = default(long);
					}
					this.SendPropertyChanged("MatchStats");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PlayerMatchStats_PlayerRoundStats", Storage="_PlayerMatchStats", ThisKey="MatchId,PlayerId", OtherKey="MatchId,SteamId", IsForeignKey=true)]
		public PlayerMatchStats PlayerMatchStats
		{
			get
			{
				return this._PlayerMatchStats.Entity;
			}
			set
			{
				PlayerMatchStats previousValue = this._PlayerMatchStats.Entity;
				if (((previousValue != value) 
							|| (this._PlayerMatchStats.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PlayerMatchStats.Entity = null;
						previousValue.PlayerRoundStats.Remove(this);
					}
					this._PlayerMatchStats.Entity = value;
					if ((value != null))
					{
						value.PlayerRoundStats.Add(this);
						this._MatchId = value.MatchId;
						this._PlayerId = value.SteamId;
					}
					else
					{
						this._MatchId = default(long);
						this._PlayerId = default(long);
					}
					this.SendPropertyChanged("PlayerMatchStats");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PlayerStats_PlayerRoundStats", Storage="_PlayerStats", ThisKey="PlayerId", OtherKey="SteamId", IsForeignKey=true)]
		public PlayerStats PlayerStats
		{
			get
			{
				return this._PlayerStats.Entity;
			}
			set
			{
				PlayerStats previousValue = this._PlayerStats.Entity;
				if (((previousValue != value) 
							|| (this._PlayerStats.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PlayerStats.Entity = null;
						previousValue.PlayerRoundStats.Remove(this);
					}
					this._PlayerStats.Entity = value;
					if ((value != null))
					{
						value.PlayerRoundStats.Add(this);
						this._PlayerId = value.SteamId;
					}
					else
					{
						this._PlayerId = default(long);
					}
					this.SendPropertyChanged("PlayerStats");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RoundStats_PlayerRoundStats", Storage="_RoundStats", ThisKey="MatchId,Round", OtherKey="MatchId,Round", IsForeignKey=true)]
		public RoundStats RoundStats
		{
			get
			{
				return this._RoundStats.Entity;
			}
			set
			{
				RoundStats previousValue = this._RoundStats.Entity;
				if (((previousValue != value) 
							|| (this._RoundStats.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._RoundStats.Entity = null;
						previousValue.PlayerRoundStats.Remove(this);
					}
					this._RoundStats.Entity = value;
					if ((value != null))
					{
						value.PlayerRoundStats.Add(this);
						this._MatchId = value.MatchId;
						this._Round = value.Round;
					}
					else
					{
						this._MatchId = default(long);
						this._Round = default(short);
					}
					this.SendPropertyChanged("RoundStats");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_WeaponReload(WeaponReload entity)
		{
			this.SendPropertyChanging();
			entity.PlayerRoundStats = this;
		}
		
		private void detach_WeaponReload(WeaponReload entity)
		{
			this.SendPropertyChanging();
			entity.PlayerRoundStats = null;
		}
		
		private void attach_BombDefused(BombDefused entity)
		{
			this.SendPropertyChanging();
			entity.PlayerRoundStats = this;
		}
		
		private void detach_BombDefused(BombDefused entity)
		{
			this.SendPropertyChanging();
			entity.PlayerRoundStats = null;
		}
		
		private void attach_BombPlant(BombPlant entity)
		{
			this.SendPropertyChanging();
			entity.PlayerRoundStats = this;
		}
		
		private void detach_BombPlant(BombPlant entity)
		{
			this.SendPropertyChanging();
			entity.PlayerRoundStats = null;
		}
		
		private void attach_BotTakeOver(BotTakeOver entity)
		{
			this.SendPropertyChanging();
			entity.PlayerRoundStats = this;
		}
		
		private void detach_BotTakeOver(BotTakeOver entity)
		{
			this.SendPropertyChanging();
			entity.PlayerRoundStats = null;
		}
		
		private void attach_Damage(Damage entity)
		{
			this.SendPropertyChanging();
			entity.PlayerRoundStats = this;
		}
		
		private void detach_Damage(Damage entity)
		{
			this.SendPropertyChanging();
			entity.PlayerRoundStats = null;
		}
		
		private void attach_Damage1(Damage entity)
		{
			this.SendPropertyChanging();
			entity.PlayerRoundStats1 = this;
		}
		
		private void detach_Damage1(Damage entity)
		{
			this.SendPropertyChanging();
			entity.PlayerRoundStats1 = null;
		}
		
		private void attach_Decoy(Decoy entity)
		{
			this.SendPropertyChanging();
			entity.PlayerRoundStats = this;
		}
		
		private void detach_Decoy(Decoy entity)
		{
			this.SendPropertyChanging();
			entity.PlayerRoundStats = null;
		}
		
		private void attach_FireNade(FireNade entity)
		{
			this.SendPropertyChanging();
			entity.PlayerRoundStats = this;
		}
		
		private void detach_FireNade(FireNade entity)
		{
			this.SendPropertyChanging();
			entity.PlayerRoundStats = null;
		}
		
		private void attach_Flash(Flash entity)
		{
			this.SendPropertyChanging();
			entity.PlayerRoundStats = this;
		}
		
		private void detach_Flash(Flash entity)
		{
			this.SendPropertyChanging();
			entity.PlayerRoundStats = null;
		}
		
		private void attach_Flashed(Flashed entity)
		{
			this.SendPropertyChanging();
			entity.PlayerRoundStats = this;
		}
		
		private void detach_Flashed(Flashed entity)
		{
			this.SendPropertyChanging();
			entity.PlayerRoundStats = null;
		}
		
		private void attach_HE(HE entity)
		{
			this.SendPropertyChanging();
			entity.PlayerRoundStats = this;
		}
		
		private void detach_HE(HE entity)
		{
			this.SendPropertyChanging();
			entity.PlayerRoundStats = null;
		}
		
		private void attach_HostageDrop(HostageDrop entity)
		{
			this.SendPropertyChanging();
			entity.PlayerRoundStats = this;
		}
		
		private void detach_HostageDrop(HostageDrop entity)
		{
			this.SendPropertyChanging();
			entity.PlayerRoundStats = null;
		}
		
		private void attach_HostagePickUp(HostagePickUp entity)
		{
			this.SendPropertyChanging();
			entity.PlayerRoundStats = this;
		}
		
		private void detach_HostagePickUp(HostagePickUp entity)
		{
			this.SendPropertyChanging();
			entity.PlayerRoundStats = null;
		}
		
		private void attach_HostageRescue(HostageRescue entity)
		{
			this.SendPropertyChanging();
			entity.PlayerRoundStats = this;
		}
		
		private void detach_HostageRescue(HostageRescue entity)
		{
			this.SendPropertyChanging();
			entity.PlayerRoundStats = null;
		}
		
		private void attach_ItemDropped(ItemDropped entity)
		{
			this.SendPropertyChanging();
			entity.PlayerRoundStats = this;
		}
		
		private void detach_ItemDropped(ItemDropped entity)
		{
			this.SendPropertyChanging();
			entity.PlayerRoundStats = null;
		}
		
		private void attach_ItemPickedUp(ItemPickedUp entity)
		{
			this.SendPropertyChanging();
			entity.PlayerRoundStats = this;
		}
		
		private void detach_ItemPickedUp(ItemPickedUp entity)
		{
			this.SendPropertyChanging();
			entity.PlayerRoundStats = null;
		}
		
		private void attach_ItemSaved(ItemSaved entity)
		{
			this.SendPropertyChanging();
			entity.PlayerRoundStats = this;
		}
		
		private void detach_ItemSaved(ItemSaved entity)
		{
			this.SendPropertyChanging();
			entity.PlayerRoundStats = null;
		}
		
		private void attach_Kills(Kills entity)
		{
			this.SendPropertyChanging();
			entity.PlayerRoundStats = this;
		}
		
		private void detach_Kills(Kills entity)
		{
			this.SendPropertyChanging();
			entity.PlayerRoundStats = null;
		}
		
		private void attach_Kills1(Kills entity)
		{
			this.SendPropertyChanging();
			entity.PlayerRoundStats1 = this;
		}
		
		private void detach_Kills1(Kills entity)
		{
			this.SendPropertyChanging();
			entity.PlayerRoundStats1 = null;
		}
		
		private void attach_PlayerPosition(PlayerPosition entity)
		{
			this.SendPropertyChanging();
			entity.PlayerRoundStats = this;
		}
		
		private void detach_PlayerPosition(PlayerPosition entity)
		{
			this.SendPropertyChanging();
			entity.PlayerRoundStats = null;
		}
		
		private void attach_RoundItem(RoundItem entity)
		{
			this.SendPropertyChanging();
			entity.PlayerRoundStats = this;
		}
		
		private void detach_RoundItem(RoundItem entity)
		{
			this.SendPropertyChanging();
			entity.PlayerRoundStats = null;
		}
		
		private void attach_Smoke(Smoke entity)
		{
			this.SendPropertyChanging();
			entity.PlayerRoundStats = this;
		}
		
		private void detach_Smoke(Smoke entity)
		{
			this.SendPropertyChanging();
			entity.PlayerRoundStats = null;
		}
		
		private void attach_WeaponFired(WeaponFired entity)
		{
			this.SendPropertyChanging();
			entity.PlayerRoundStats = this;
		}
		
		private void detach_WeaponFired(WeaponFired entity)
		{
			this.SendPropertyChanging();
			entity.PlayerRoundStats = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PlayerStats")]
	public partial class PlayerStats : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _SteamId;
		
		private string _SteamName;
		
		private string _AvatarIcon;
		
		private bool _Banned;
		
		private int _NumOfVACBans;
		
		private int _NumOfGameBans;
		
		private int _LastVacBan;
		
		private int _LastGameBan;
		
		private int _BlameCounter;
		
		private int _GamesPlayed;
		
		private int _GamesWon;
		
		private byte _Rank;
		
		private System.DateTime _LastRankUpdate;
		
		private long _Kills;
		
		private long _Assists;
		
		private long _Deaths;
		
		private long _Score;
		
		private long _MVPs;
		
		private long _HS;
		
		private long _HSKills;
		
		private long _Shots;
		
		private long _Hits;
		
		private long _HSVictim;
		
		private long _HSDeaths;
		
		private long _Enemy2K;
		
		private long _Enemy3K;
		
		private long _Enemy4K;
		
		private long _Enemy5K;
		
		private long _Damage;
		
		private int _DamageVictim;
		
		private long _BombPlants;
		
		private long _BombExplosions;
		
		private long _BombDefuses;
		
		private long _MoneyEarned;
		
		private long _MoneySpent;
		
		private long _MoneyLost;
		
		private long _DecoysUsed;
		
		private long _FireNadesUsed;
		
		private long _FireNadesDamage;
		
		private long _FireNadesDamageVictim;
		
		private long _FlashesUsed;
		
		private long _FlashesSucceeded;
		
		private long _FlashVictim;
		
		private long _TeamFlashed;
		
		private long _TeamFlashVictim;
		
		private long _SelfFlashed;
		
		private long _HEsUsed;
		
		private long _HEsDamage;
		
		private long _HEsDamageVictim;
		
		private long _SmokesUsed;
		
		private long _FirstBloods;
		
		private long _FirstBloodVictim;
		
		private double _AVGTimeAlive;
		
		private long _TeamDamage;
		
		private long _TeamKills;
		
		private long _EntryKills;
		
		private long _EntryKillVictim;
		
		private long _Suicides;
		
		private long _BombVictim;
		
		private double _HLTVRating1;
		
		private double _HLTVRating2;
		
		private EntitySet<PlayerMatchStats> _PlayerMatchStats;
		
		private EntitySet<PlayerRoundStats> _PlayerRoundStats;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSteamIdChanging(long value);
    partial void OnSteamIdChanged();
    partial void OnSteamNameChanging(string value);
    partial void OnSteamNameChanged();
    partial void OnAvatarIconChanging(string value);
    partial void OnAvatarIconChanged();
    partial void OnBannedChanging(bool value);
    partial void OnBannedChanged();
    partial void OnNumOfVACBansChanging(int value);
    partial void OnNumOfVACBansChanged();
    partial void OnNumOfGameBansChanging(int value);
    partial void OnNumOfGameBansChanged();
    partial void OnLastVacBanChanging(int value);
    partial void OnLastVacBanChanged();
    partial void OnLastGameBanChanging(int value);
    partial void OnLastGameBanChanged();
    partial void OnBlameCounterChanging(int value);
    partial void OnBlameCounterChanged();
    partial void OnGamesPlayedChanging(int value);
    partial void OnGamesPlayedChanged();
    partial void OnGamesWonChanging(int value);
    partial void OnGamesWonChanged();
    partial void OnRankChanging(byte value);
    partial void OnRankChanged();
    partial void OnLastRankUpdateChanging(System.DateTime value);
    partial void OnLastRankUpdateChanged();
    partial void OnKillsChanging(long value);
    partial void OnKillsChanged();
    partial void OnAssistsChanging(long value);
    partial void OnAssistsChanged();
    partial void OnDeathsChanging(long value);
    partial void OnDeathsChanged();
    partial void OnScoreChanging(long value);
    partial void OnScoreChanged();
    partial void OnMVPsChanging(long value);
    partial void OnMVPsChanged();
    partial void OnHSChanging(long value);
    partial void OnHSChanged();
    partial void OnHSKillsChanging(long value);
    partial void OnHSKillsChanged();
    partial void OnShotsChanging(long value);
    partial void OnShotsChanged();
    partial void OnHitsChanging(long value);
    partial void OnHitsChanged();
    partial void OnHSVictimChanging(long value);
    partial void OnHSVictimChanged();
    partial void OnHSDeathsChanging(long value);
    partial void OnHSDeathsChanged();
    partial void OnEnemy2KChanging(long value);
    partial void OnEnemy2KChanged();
    partial void OnEnemy3KChanging(long value);
    partial void OnEnemy3KChanged();
    partial void OnEnemy4KChanging(long value);
    partial void OnEnemy4KChanged();
    partial void OnEnemy5KChanging(long value);
    partial void OnEnemy5KChanged();
    partial void OnDamageChanging(long value);
    partial void OnDamageChanged();
    partial void OnDamageVictimChanging(int value);
    partial void OnDamageVictimChanged();
    partial void OnBombPlantsChanging(long value);
    partial void OnBombPlantsChanged();
    partial void OnBombExplosionsChanging(long value);
    partial void OnBombExplosionsChanged();
    partial void OnBombDefusesChanging(long value);
    partial void OnBombDefusesChanged();
    partial void OnMoneyEarnedChanging(long value);
    partial void OnMoneyEarnedChanged();
    partial void OnMoneySpentChanging(long value);
    partial void OnMoneySpentChanged();
    partial void OnMoneyLostChanging(long value);
    partial void OnMoneyLostChanged();
    partial void OnDecoysUsedChanging(long value);
    partial void OnDecoysUsedChanged();
    partial void OnFireNadesUsedChanging(long value);
    partial void OnFireNadesUsedChanged();
    partial void OnFireNadesDamageChanging(long value);
    partial void OnFireNadesDamageChanged();
    partial void OnFireNadesDamageVictimChanging(long value);
    partial void OnFireNadesDamageVictimChanged();
    partial void OnFlashesUsedChanging(long value);
    partial void OnFlashesUsedChanged();
    partial void OnFlashesSucceededChanging(long value);
    partial void OnFlashesSucceededChanged();
    partial void OnFlashVictimChanging(long value);
    partial void OnFlashVictimChanged();
    partial void OnTeamFlashedChanging(long value);
    partial void OnTeamFlashedChanged();
    partial void OnTeamFlashVictimChanging(long value);
    partial void OnTeamFlashVictimChanged();
    partial void OnSelfFlashedChanging(long value);
    partial void OnSelfFlashedChanged();
    partial void OnHEsUsedChanging(long value);
    partial void OnHEsUsedChanged();
    partial void OnHEsDamageChanging(long value);
    partial void OnHEsDamageChanged();
    partial void OnHEsDamageVictimChanging(long value);
    partial void OnHEsDamageVictimChanged();
    partial void OnSmokesUsedChanging(long value);
    partial void OnSmokesUsedChanged();
    partial void OnFirstBloodsChanging(long value);
    partial void OnFirstBloodsChanged();
    partial void OnFirstBloodVictimChanging(long value);
    partial void OnFirstBloodVictimChanged();
    partial void OnAVGTimeAliveChanging(double value);
    partial void OnAVGTimeAliveChanged();
    partial void OnTeamDamageChanging(long value);
    partial void OnTeamDamageChanged();
    partial void OnTeamKillsChanging(long value);
    partial void OnTeamKillsChanged();
    partial void OnEntryKillsChanging(long value);
    partial void OnEntryKillsChanged();
    partial void OnEntryKillVictimChanging(long value);
    partial void OnEntryKillVictimChanged();
    partial void OnSuicidesChanging(long value);
    partial void OnSuicidesChanged();
    partial void OnBombVictimChanging(long value);
    partial void OnBombVictimChanged();
    partial void OnHLTVRating1Changing(double value);
    partial void OnHLTVRating1Changed();
    partial void OnHLTVRating2Changing(double value);
    partial void OnHLTVRating2Changed();
    #endregion
		
		public PlayerStats()
		{
			this._PlayerMatchStats = new EntitySet<PlayerMatchStats>(new Action<PlayerMatchStats>(this.attach_PlayerMatchStats), new Action<PlayerMatchStats>(this.detach_PlayerMatchStats));
			this._PlayerRoundStats = new EntitySet<PlayerRoundStats>(new Action<PlayerRoundStats>(this.attach_PlayerRoundStats), new Action<PlayerRoundStats>(this.detach_PlayerRoundStats));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SteamId", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long SteamId
		{
			get
			{
				return this._SteamId;
			}
			set
			{
				if ((this._SteamId != value))
				{
					this.OnSteamIdChanging(value);
					this.SendPropertyChanging();
					this._SteamId = value;
					this.SendPropertyChanged("SteamId");
					this.OnSteamIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SteamName", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string SteamName
		{
			get
			{
				return this._SteamName;
			}
			set
			{
				if ((this._SteamName != value))
				{
					this.OnSteamNameChanging(value);
					this.SendPropertyChanging();
					this._SteamName = value;
					this.SendPropertyChanged("SteamName");
					this.OnSteamNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AvatarIcon", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string AvatarIcon
		{
			get
			{
				return this._AvatarIcon;
			}
			set
			{
				if ((this._AvatarIcon != value))
				{
					this.OnAvatarIconChanging(value);
					this.SendPropertyChanging();
					this._AvatarIcon = value;
					this.SendPropertyChanged("AvatarIcon");
					this.OnAvatarIconChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Banned", DbType="Bit NOT NULL")]
		public bool Banned
		{
			get
			{
				return this._Banned;
			}
			set
			{
				if ((this._Banned != value))
				{
					this.OnBannedChanging(value);
					this.SendPropertyChanging();
					this._Banned = value;
					this.SendPropertyChanged("Banned");
					this.OnBannedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NumOfVACBans", DbType="Int NOT NULL")]
		public int NumOfVACBans
		{
			get
			{
				return this._NumOfVACBans;
			}
			set
			{
				if ((this._NumOfVACBans != value))
				{
					this.OnNumOfVACBansChanging(value);
					this.SendPropertyChanging();
					this._NumOfVACBans = value;
					this.SendPropertyChanged("NumOfVACBans");
					this.OnNumOfVACBansChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NumOfGameBans", DbType="Int NOT NULL")]
		public int NumOfGameBans
		{
			get
			{
				return this._NumOfGameBans;
			}
			set
			{
				if ((this._NumOfGameBans != value))
				{
					this.OnNumOfGameBansChanging(value);
					this.SendPropertyChanging();
					this._NumOfGameBans = value;
					this.SendPropertyChanged("NumOfGameBans");
					this.OnNumOfGameBansChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastVacBan", DbType="Int NOT NULL")]
		public int LastVacBan
		{
			get
			{
				return this._LastVacBan;
			}
			set
			{
				if ((this._LastVacBan != value))
				{
					this.OnLastVacBanChanging(value);
					this.SendPropertyChanging();
					this._LastVacBan = value;
					this.SendPropertyChanged("LastVacBan");
					this.OnLastVacBanChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastGameBan", DbType="Int NOT NULL")]
		public int LastGameBan
		{
			get
			{
				return this._LastGameBan;
			}
			set
			{
				if ((this._LastGameBan != value))
				{
					this.OnLastGameBanChanging(value);
					this.SendPropertyChanging();
					this._LastGameBan = value;
					this.SendPropertyChanged("LastGameBan");
					this.OnLastGameBanChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BlameCounter", DbType="Int NOT NULL")]
		public int BlameCounter
		{
			get
			{
				return this._BlameCounter;
			}
			set
			{
				if ((this._BlameCounter != value))
				{
					this.OnBlameCounterChanging(value);
					this.SendPropertyChanging();
					this._BlameCounter = value;
					this.SendPropertyChanged("BlameCounter");
					this.OnBlameCounterChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GamesPlayed", DbType="Int NOT NULL")]
		public int GamesPlayed
		{
			get
			{
				return this._GamesPlayed;
			}
			set
			{
				if ((this._GamesPlayed != value))
				{
					this.OnGamesPlayedChanging(value);
					this.SendPropertyChanging();
					this._GamesPlayed = value;
					this.SendPropertyChanged("GamesPlayed");
					this.OnGamesPlayedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GamesWon", DbType="Int NOT NULL")]
		public int GamesWon
		{
			get
			{
				return this._GamesWon;
			}
			set
			{
				if ((this._GamesWon != value))
				{
					this.OnGamesWonChanging(value);
					this.SendPropertyChanging();
					this._GamesWon = value;
					this.SendPropertyChanged("GamesWon");
					this.OnGamesWonChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Rank", DbType="TinyInt NOT NULL")]
		public byte Rank
		{
			get
			{
				return this._Rank;
			}
			set
			{
				if ((this._Rank != value))
				{
					this.OnRankChanging(value);
					this.SendPropertyChanging();
					this._Rank = value;
					this.SendPropertyChanged("Rank");
					this.OnRankChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastRankUpdate", DbType="DateTime NOT NULL")]
		public System.DateTime LastRankUpdate
		{
			get
			{
				return this._LastRankUpdate;
			}
			set
			{
				if ((this._LastRankUpdate != value))
				{
					this.OnLastRankUpdateChanging(value);
					this.SendPropertyChanging();
					this._LastRankUpdate = value;
					this.SendPropertyChanged("LastRankUpdate");
					this.OnLastRankUpdateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Kills", DbType="BigInt NOT NULL")]
		public long Kills
		{
			get
			{
				return this._Kills;
			}
			set
			{
				if ((this._Kills != value))
				{
					this.OnKillsChanging(value);
					this.SendPropertyChanging();
					this._Kills = value;
					this.SendPropertyChanged("Kills");
					this.OnKillsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Assists", DbType="BigInt NOT NULL")]
		public long Assists
		{
			get
			{
				return this._Assists;
			}
			set
			{
				if ((this._Assists != value))
				{
					this.OnAssistsChanging(value);
					this.SendPropertyChanging();
					this._Assists = value;
					this.SendPropertyChanged("Assists");
					this.OnAssistsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Deaths", DbType="BigInt NOT NULL")]
		public long Deaths
		{
			get
			{
				return this._Deaths;
			}
			set
			{
				if ((this._Deaths != value))
				{
					this.OnDeathsChanging(value);
					this.SendPropertyChanging();
					this._Deaths = value;
					this.SendPropertyChanged("Deaths");
					this.OnDeathsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Score", DbType="BigInt NOT NULL")]
		public long Score
		{
			get
			{
				return this._Score;
			}
			set
			{
				if ((this._Score != value))
				{
					this.OnScoreChanging(value);
					this.SendPropertyChanging();
					this._Score = value;
					this.SendPropertyChanged("Score");
					this.OnScoreChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MVPs", DbType="BigInt NOT NULL")]
		public long MVPs
		{
			get
			{
				return this._MVPs;
			}
			set
			{
				if ((this._MVPs != value))
				{
					this.OnMVPsChanging(value);
					this.SendPropertyChanging();
					this._MVPs = value;
					this.SendPropertyChanged("MVPs");
					this.OnMVPsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HS", DbType="BigInt NOT NULL")]
		public long HS
		{
			get
			{
				return this._HS;
			}
			set
			{
				if ((this._HS != value))
				{
					this.OnHSChanging(value);
					this.SendPropertyChanging();
					this._HS = value;
					this.SendPropertyChanged("HS");
					this.OnHSChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HSKills", DbType="BigInt NOT NULL")]
		public long HSKills
		{
			get
			{
				return this._HSKills;
			}
			set
			{
				if ((this._HSKills != value))
				{
					this.OnHSKillsChanging(value);
					this.SendPropertyChanging();
					this._HSKills = value;
					this.SendPropertyChanged("HSKills");
					this.OnHSKillsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Shots", DbType="BigInt NOT NULL")]
		public long Shots
		{
			get
			{
				return this._Shots;
			}
			set
			{
				if ((this._Shots != value))
				{
					this.OnShotsChanging(value);
					this.SendPropertyChanging();
					this._Shots = value;
					this.SendPropertyChanged("Shots");
					this.OnShotsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Hits", DbType="BigInt NOT NULL")]
		public long Hits
		{
			get
			{
				return this._Hits;
			}
			set
			{
				if ((this._Hits != value))
				{
					this.OnHitsChanging(value);
					this.SendPropertyChanging();
					this._Hits = value;
					this.SendPropertyChanged("Hits");
					this.OnHitsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HSVictim", DbType="BigInt NOT NULL")]
		public long HSVictim
		{
			get
			{
				return this._HSVictim;
			}
			set
			{
				if ((this._HSVictim != value))
				{
					this.OnHSVictimChanging(value);
					this.SendPropertyChanging();
					this._HSVictim = value;
					this.SendPropertyChanged("HSVictim");
					this.OnHSVictimChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HSDeaths", DbType="BigInt NOT NULL")]
		public long HSDeaths
		{
			get
			{
				return this._HSDeaths;
			}
			set
			{
				if ((this._HSDeaths != value))
				{
					this.OnHSDeathsChanging(value);
					this.SendPropertyChanging();
					this._HSDeaths = value;
					this.SendPropertyChanged("HSDeaths");
					this.OnHSDeathsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Enemy2K", DbType="BigInt NOT NULL")]
		public long Enemy2K
		{
			get
			{
				return this._Enemy2K;
			}
			set
			{
				if ((this._Enemy2K != value))
				{
					this.OnEnemy2KChanging(value);
					this.SendPropertyChanging();
					this._Enemy2K = value;
					this.SendPropertyChanged("Enemy2K");
					this.OnEnemy2KChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Enemy3K", DbType="BigInt NOT NULL")]
		public long Enemy3K
		{
			get
			{
				return this._Enemy3K;
			}
			set
			{
				if ((this._Enemy3K != value))
				{
					this.OnEnemy3KChanging(value);
					this.SendPropertyChanging();
					this._Enemy3K = value;
					this.SendPropertyChanged("Enemy3K");
					this.OnEnemy3KChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Enemy4K", DbType="BigInt NOT NULL")]
		public long Enemy4K
		{
			get
			{
				return this._Enemy4K;
			}
			set
			{
				if ((this._Enemy4K != value))
				{
					this.OnEnemy4KChanging(value);
					this.SendPropertyChanging();
					this._Enemy4K = value;
					this.SendPropertyChanged("Enemy4K");
					this.OnEnemy4KChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Enemy5K", DbType="BigInt NOT NULL")]
		public long Enemy5K
		{
			get
			{
				return this._Enemy5K;
			}
			set
			{
				if ((this._Enemy5K != value))
				{
					this.OnEnemy5KChanging(value);
					this.SendPropertyChanging();
					this._Enemy5K = value;
					this.SendPropertyChanged("Enemy5K");
					this.OnEnemy5KChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Damage", DbType="BigInt NOT NULL")]
		public long Damage
		{
			get
			{
				return this._Damage;
			}
			set
			{
				if ((this._Damage != value))
				{
					this.OnDamageChanging(value);
					this.SendPropertyChanging();
					this._Damage = value;
					this.SendPropertyChanged("Damage");
					this.OnDamageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DamageVictim", DbType="Int NOT NULL")]
		public int DamageVictim
		{
			get
			{
				return this._DamageVictim;
			}
			set
			{
				if ((this._DamageVictim != value))
				{
					this.OnDamageVictimChanging(value);
					this.SendPropertyChanging();
					this._DamageVictim = value;
					this.SendPropertyChanged("DamageVictim");
					this.OnDamageVictimChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BombPlants", DbType="BigInt NOT NULL")]
		public long BombPlants
		{
			get
			{
				return this._BombPlants;
			}
			set
			{
				if ((this._BombPlants != value))
				{
					this.OnBombPlantsChanging(value);
					this.SendPropertyChanging();
					this._BombPlants = value;
					this.SendPropertyChanged("BombPlants");
					this.OnBombPlantsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BombExplosions", DbType="BigInt NOT NULL")]
		public long BombExplosions
		{
			get
			{
				return this._BombExplosions;
			}
			set
			{
				if ((this._BombExplosions != value))
				{
					this.OnBombExplosionsChanging(value);
					this.SendPropertyChanging();
					this._BombExplosions = value;
					this.SendPropertyChanged("BombExplosions");
					this.OnBombExplosionsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BombDefuses", DbType="BigInt NOT NULL")]
		public long BombDefuses
		{
			get
			{
				return this._BombDefuses;
			}
			set
			{
				if ((this._BombDefuses != value))
				{
					this.OnBombDefusesChanging(value);
					this.SendPropertyChanging();
					this._BombDefuses = value;
					this.SendPropertyChanged("BombDefuses");
					this.OnBombDefusesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MoneyEarned", DbType="BigInt NOT NULL")]
		public long MoneyEarned
		{
			get
			{
				return this._MoneyEarned;
			}
			set
			{
				if ((this._MoneyEarned != value))
				{
					this.OnMoneyEarnedChanging(value);
					this.SendPropertyChanging();
					this._MoneyEarned = value;
					this.SendPropertyChanged("MoneyEarned");
					this.OnMoneyEarnedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MoneySpent", DbType="BigInt NOT NULL")]
		public long MoneySpent
		{
			get
			{
				return this._MoneySpent;
			}
			set
			{
				if ((this._MoneySpent != value))
				{
					this.OnMoneySpentChanging(value);
					this.SendPropertyChanging();
					this._MoneySpent = value;
					this.SendPropertyChanged("MoneySpent");
					this.OnMoneySpentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MoneyLost", DbType="BigInt NOT NULL")]
		public long MoneyLost
		{
			get
			{
				return this._MoneyLost;
			}
			set
			{
				if ((this._MoneyLost != value))
				{
					this.OnMoneyLostChanging(value);
					this.SendPropertyChanging();
					this._MoneyLost = value;
					this.SendPropertyChanged("MoneyLost");
					this.OnMoneyLostChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DecoysUsed", DbType="BigInt NOT NULL")]
		public long DecoysUsed
		{
			get
			{
				return this._DecoysUsed;
			}
			set
			{
				if ((this._DecoysUsed != value))
				{
					this.OnDecoysUsedChanging(value);
					this.SendPropertyChanging();
					this._DecoysUsed = value;
					this.SendPropertyChanged("DecoysUsed");
					this.OnDecoysUsedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FireNadesUsed", DbType="BigInt NOT NULL")]
		public long FireNadesUsed
		{
			get
			{
				return this._FireNadesUsed;
			}
			set
			{
				if ((this._FireNadesUsed != value))
				{
					this.OnFireNadesUsedChanging(value);
					this.SendPropertyChanging();
					this._FireNadesUsed = value;
					this.SendPropertyChanged("FireNadesUsed");
					this.OnFireNadesUsedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FireNadesDamage", DbType="BigInt NOT NULL")]
		public long FireNadesDamage
		{
			get
			{
				return this._FireNadesDamage;
			}
			set
			{
				if ((this._FireNadesDamage != value))
				{
					this.OnFireNadesDamageChanging(value);
					this.SendPropertyChanging();
					this._FireNadesDamage = value;
					this.SendPropertyChanged("FireNadesDamage");
					this.OnFireNadesDamageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FireNadesDamageVictim", DbType="BigInt NOT NULL")]
		public long FireNadesDamageVictim
		{
			get
			{
				return this._FireNadesDamageVictim;
			}
			set
			{
				if ((this._FireNadesDamageVictim != value))
				{
					this.OnFireNadesDamageVictimChanging(value);
					this.SendPropertyChanging();
					this._FireNadesDamageVictim = value;
					this.SendPropertyChanged("FireNadesDamageVictim");
					this.OnFireNadesDamageVictimChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FlashesUsed", DbType="BigInt NOT NULL")]
		public long FlashesUsed
		{
			get
			{
				return this._FlashesUsed;
			}
			set
			{
				if ((this._FlashesUsed != value))
				{
					this.OnFlashesUsedChanging(value);
					this.SendPropertyChanging();
					this._FlashesUsed = value;
					this.SendPropertyChanged("FlashesUsed");
					this.OnFlashesUsedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FlashesSucceeded", DbType="BigInt NOT NULL")]
		public long FlashesSucceeded
		{
			get
			{
				return this._FlashesSucceeded;
			}
			set
			{
				if ((this._FlashesSucceeded != value))
				{
					this.OnFlashesSucceededChanging(value);
					this.SendPropertyChanging();
					this._FlashesSucceeded = value;
					this.SendPropertyChanged("FlashesSucceeded");
					this.OnFlashesSucceededChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FlashVictim", DbType="BigInt NOT NULL")]
		public long FlashVictim
		{
			get
			{
				return this._FlashVictim;
			}
			set
			{
				if ((this._FlashVictim != value))
				{
					this.OnFlashVictimChanging(value);
					this.SendPropertyChanging();
					this._FlashVictim = value;
					this.SendPropertyChanged("FlashVictim");
					this.OnFlashVictimChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TeamFlashed", DbType="BigInt NOT NULL")]
		public long TeamFlashed
		{
			get
			{
				return this._TeamFlashed;
			}
			set
			{
				if ((this._TeamFlashed != value))
				{
					this.OnTeamFlashedChanging(value);
					this.SendPropertyChanging();
					this._TeamFlashed = value;
					this.SendPropertyChanged("TeamFlashed");
					this.OnTeamFlashedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TeamFlashVictim", DbType="BigInt NOT NULL")]
		public long TeamFlashVictim
		{
			get
			{
				return this._TeamFlashVictim;
			}
			set
			{
				if ((this._TeamFlashVictim != value))
				{
					this.OnTeamFlashVictimChanging(value);
					this.SendPropertyChanging();
					this._TeamFlashVictim = value;
					this.SendPropertyChanged("TeamFlashVictim");
					this.OnTeamFlashVictimChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SelfFlashed", DbType="BigInt NOT NULL")]
		public long SelfFlashed
		{
			get
			{
				return this._SelfFlashed;
			}
			set
			{
				if ((this._SelfFlashed != value))
				{
					this.OnSelfFlashedChanging(value);
					this.SendPropertyChanging();
					this._SelfFlashed = value;
					this.SendPropertyChanged("SelfFlashed");
					this.OnSelfFlashedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HEsUsed", DbType="BigInt NOT NULL")]
		public long HEsUsed
		{
			get
			{
				return this._HEsUsed;
			}
			set
			{
				if ((this._HEsUsed != value))
				{
					this.OnHEsUsedChanging(value);
					this.SendPropertyChanging();
					this._HEsUsed = value;
					this.SendPropertyChanged("HEsUsed");
					this.OnHEsUsedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HEsDamage", DbType="BigInt NOT NULL")]
		public long HEsDamage
		{
			get
			{
				return this._HEsDamage;
			}
			set
			{
				if ((this._HEsDamage != value))
				{
					this.OnHEsDamageChanging(value);
					this.SendPropertyChanging();
					this._HEsDamage = value;
					this.SendPropertyChanged("HEsDamage");
					this.OnHEsDamageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HEsDamageVictim", DbType="BigInt NOT NULL")]
		public long HEsDamageVictim
		{
			get
			{
				return this._HEsDamageVictim;
			}
			set
			{
				if ((this._HEsDamageVictim != value))
				{
					this.OnHEsDamageVictimChanging(value);
					this.SendPropertyChanging();
					this._HEsDamageVictim = value;
					this.SendPropertyChanged("HEsDamageVictim");
					this.OnHEsDamageVictimChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SmokesUsed", DbType="BigInt NOT NULL")]
		public long SmokesUsed
		{
			get
			{
				return this._SmokesUsed;
			}
			set
			{
				if ((this._SmokesUsed != value))
				{
					this.OnSmokesUsedChanging(value);
					this.SendPropertyChanging();
					this._SmokesUsed = value;
					this.SendPropertyChanged("SmokesUsed");
					this.OnSmokesUsedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstBloods", DbType="BigInt NOT NULL")]
		public long FirstBloods
		{
			get
			{
				return this._FirstBloods;
			}
			set
			{
				if ((this._FirstBloods != value))
				{
					this.OnFirstBloodsChanging(value);
					this.SendPropertyChanging();
					this._FirstBloods = value;
					this.SendPropertyChanged("FirstBloods");
					this.OnFirstBloodsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstBloodVictim", DbType="BigInt NOT NULL")]
		public long FirstBloodVictim
		{
			get
			{
				return this._FirstBloodVictim;
			}
			set
			{
				if ((this._FirstBloodVictim != value))
				{
					this.OnFirstBloodVictimChanging(value);
					this.SendPropertyChanging();
					this._FirstBloodVictim = value;
					this.SendPropertyChanged("FirstBloodVictim");
					this.OnFirstBloodVictimChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AVGTimeAlive", DbType="Float NOT NULL")]
		public double AVGTimeAlive
		{
			get
			{
				return this._AVGTimeAlive;
			}
			set
			{
				if ((this._AVGTimeAlive != value))
				{
					this.OnAVGTimeAliveChanging(value);
					this.SendPropertyChanging();
					this._AVGTimeAlive = value;
					this.SendPropertyChanged("AVGTimeAlive");
					this.OnAVGTimeAliveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TeamDamage", DbType="BigInt NOT NULL")]
		public long TeamDamage
		{
			get
			{
				return this._TeamDamage;
			}
			set
			{
				if ((this._TeamDamage != value))
				{
					this.OnTeamDamageChanging(value);
					this.SendPropertyChanging();
					this._TeamDamage = value;
					this.SendPropertyChanged("TeamDamage");
					this.OnTeamDamageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TeamKills", DbType="BigInt NOT NULL")]
		public long TeamKills
		{
			get
			{
				return this._TeamKills;
			}
			set
			{
				if ((this._TeamKills != value))
				{
					this.OnTeamKillsChanging(value);
					this.SendPropertyChanging();
					this._TeamKills = value;
					this.SendPropertyChanged("TeamKills");
					this.OnTeamKillsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EntryKills", DbType="BigInt NOT NULL")]
		public long EntryKills
		{
			get
			{
				return this._EntryKills;
			}
			set
			{
				if ((this._EntryKills != value))
				{
					this.OnEntryKillsChanging(value);
					this.SendPropertyChanging();
					this._EntryKills = value;
					this.SendPropertyChanged("EntryKills");
					this.OnEntryKillsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EntryKillVictim", DbType="BigInt NOT NULL")]
		public long EntryKillVictim
		{
			get
			{
				return this._EntryKillVictim;
			}
			set
			{
				if ((this._EntryKillVictim != value))
				{
					this.OnEntryKillVictimChanging(value);
					this.SendPropertyChanging();
					this._EntryKillVictim = value;
					this.SendPropertyChanged("EntryKillVictim");
					this.OnEntryKillVictimChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Suicides", DbType="BigInt NOT NULL")]
		public long Suicides
		{
			get
			{
				return this._Suicides;
			}
			set
			{
				if ((this._Suicides != value))
				{
					this.OnSuicidesChanging(value);
					this.SendPropertyChanging();
					this._Suicides = value;
					this.SendPropertyChanged("Suicides");
					this.OnSuicidesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BombVictim", DbType="BigInt NOT NULL")]
		public long BombVictim
		{
			get
			{
				return this._BombVictim;
			}
			set
			{
				if ((this._BombVictim != value))
				{
					this.OnBombVictimChanging(value);
					this.SendPropertyChanging();
					this._BombVictim = value;
					this.SendPropertyChanged("BombVictim");
					this.OnBombVictimChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HLTVRating1", DbType="Float NOT NULL")]
		public double HLTVRating1
		{
			get
			{
				return this._HLTVRating1;
			}
			set
			{
				if ((this._HLTVRating1 != value))
				{
					this.OnHLTVRating1Changing(value);
					this.SendPropertyChanging();
					this._HLTVRating1 = value;
					this.SendPropertyChanged("HLTVRating1");
					this.OnHLTVRating1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HLTVRating2", DbType="Float NOT NULL")]
		public double HLTVRating2
		{
			get
			{
				return this._HLTVRating2;
			}
			set
			{
				if ((this._HLTVRating2 != value))
				{
					this.OnHLTVRating2Changing(value);
					this.SendPropertyChanging();
					this._HLTVRating2 = value;
					this.SendPropertyChanged("HLTVRating2");
					this.OnHLTVRating2Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PlayerStats_PlayerMatchStats", Storage="_PlayerMatchStats", ThisKey="SteamId", OtherKey="SteamId")]
		public EntitySet<PlayerMatchStats> PlayerMatchStats
		{
			get
			{
				return this._PlayerMatchStats;
			}
			set
			{
				this._PlayerMatchStats.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PlayerStats_PlayerRoundStats", Storage="_PlayerRoundStats", ThisKey="SteamId", OtherKey="PlayerId")]
		public EntitySet<PlayerRoundStats> PlayerRoundStats
		{
			get
			{
				return this._PlayerRoundStats;
			}
			set
			{
				this._PlayerRoundStats.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PlayerMatchStats(PlayerMatchStats entity)
		{
			this.SendPropertyChanging();
			entity.PlayerStats = this;
		}
		
		private void detach_PlayerMatchStats(PlayerMatchStats entity)
		{
			this.SendPropertyChanging();
			entity.PlayerStats = null;
		}
		
		private void attach_PlayerRoundStats(PlayerRoundStats entity)
		{
			this.SendPropertyChanging();
			entity.PlayerStats = this;
		}
		
		private void detach_PlayerRoundStats(PlayerRoundStats entity)
		{
			this.SendPropertyChanging();
			entity.PlayerStats = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.RoundItem")]
	public partial class RoundItem : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _MatchId;
		
		private short _Round;
		
		private long _PlayerId;
		
		private bool _IsCT;
		
		private long _RoundItemId;
		
		private long _ItemId;
		
		private short _Equipment;
		
		private EntityRef<MatchStats> _MatchStats;
		
		private EntityRef<PlayerMatchStats> _PlayerMatchStats;
		
		private EntityRef<PlayerRoundStats> _PlayerRoundStats;
		
		private EntityRef<RoundStats> _RoundStats;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMatchIdChanging(long value);
    partial void OnMatchIdChanged();
    partial void OnRoundChanging(short value);
    partial void OnRoundChanged();
    partial void OnPlayerIdChanging(long value);
    partial void OnPlayerIdChanged();
    partial void OnIsCTChanging(bool value);
    partial void OnIsCTChanged();
    partial void OnRoundItemIdChanging(long value);
    partial void OnRoundItemIdChanged();
    partial void OnItemIdChanging(long value);
    partial void OnItemIdChanged();
    partial void OnEquipmentChanging(short value);
    partial void OnEquipmentChanged();
    #endregion
		
		public RoundItem()
		{
			this._MatchStats = default(EntityRef<MatchStats>);
			this._PlayerMatchStats = default(EntityRef<PlayerMatchStats>);
			this._PlayerRoundStats = default(EntityRef<PlayerRoundStats>);
			this._RoundStats = default(EntityRef<RoundStats>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MatchId", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long MatchId
		{
			get
			{
				return this._MatchId;
			}
			set
			{
				if ((this._MatchId != value))
				{
					if ((((this._MatchStats.HasLoadedOrAssignedValue || this._PlayerMatchStats.HasLoadedOrAssignedValue) 
								|| this._PlayerRoundStats.HasLoadedOrAssignedValue) 
								|| this._RoundStats.HasLoadedOrAssignedValue))
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMatchIdChanging(value);
					this.SendPropertyChanging();
					this._MatchId = value;
					this.SendPropertyChanged("MatchId");
					this.OnMatchIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Round", DbType="SmallInt NOT NULL")]
		public short Round
		{
			get
			{
				return this._Round;
			}
			set
			{
				if ((this._Round != value))
				{
					if ((this._PlayerRoundStats.HasLoadedOrAssignedValue || this._RoundStats.HasLoadedOrAssignedValue))
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRoundChanging(value);
					this.SendPropertyChanging();
					this._Round = value;
					this.SendPropertyChanged("Round");
					this.OnRoundChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlayerId", DbType="BigInt NOT NULL")]
		public long PlayerId
		{
			get
			{
				return this._PlayerId;
			}
			set
			{
				if ((this._PlayerId != value))
				{
					if ((this._PlayerMatchStats.HasLoadedOrAssignedValue || this._PlayerRoundStats.HasLoadedOrAssignedValue))
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPlayerIdChanging(value);
					this.SendPropertyChanging();
					this._PlayerId = value;
					this.SendPropertyChanged("PlayerId");
					this.OnPlayerIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsCT", DbType="Bit NOT NULL")]
		public bool IsCT
		{
			get
			{
				return this._IsCT;
			}
			set
			{
				if ((this._IsCT != value))
				{
					this.OnIsCTChanging(value);
					this.SendPropertyChanging();
					this._IsCT = value;
					this.SendPropertyChanged("IsCT");
					this.OnIsCTChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoundItemId", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long RoundItemId
		{
			get
			{
				return this._RoundItemId;
			}
			set
			{
				if ((this._RoundItemId != value))
				{
					this.OnRoundItemIdChanging(value);
					this.SendPropertyChanging();
					this._RoundItemId = value;
					this.SendPropertyChanged("RoundItemId");
					this.OnRoundItemIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ItemId", DbType="BigInt NOT NULL")]
		public long ItemId
		{
			get
			{
				return this._ItemId;
			}
			set
			{
				if ((this._ItemId != value))
				{
					this.OnItemIdChanging(value);
					this.SendPropertyChanging();
					this._ItemId = value;
					this.SendPropertyChanged("ItemId");
					this.OnItemIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Equipment", DbType="SmallInt NOT NULL")]
		public short Equipment
		{
			get
			{
				return this._Equipment;
			}
			set
			{
				if ((this._Equipment != value))
				{
					this.OnEquipmentChanging(value);
					this.SendPropertyChanging();
					this._Equipment = value;
					this.SendPropertyChanged("Equipment");
					this.OnEquipmentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MatchStats_RoundItem", Storage="_MatchStats", ThisKey="MatchId", OtherKey="MatchId", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public MatchStats MatchStats
		{
			get
			{
				return this._MatchStats.Entity;
			}
			set
			{
				MatchStats previousValue = this._MatchStats.Entity;
				if (((previousValue != value) 
							|| (this._MatchStats.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MatchStats.Entity = null;
						previousValue.RoundItem.Remove(this);
					}
					this._MatchStats.Entity = value;
					if ((value != null))
					{
						value.RoundItem.Add(this);
						this._MatchId = value.MatchId;
					}
					else
					{
						this._MatchId = default(long);
					}
					this.SendPropertyChanged("MatchStats");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PlayerMatchStats_RoundItem", Storage="_PlayerMatchStats", ThisKey="MatchId,PlayerId", OtherKey="MatchId,SteamId", IsForeignKey=true)]
		public PlayerMatchStats PlayerMatchStats
		{
			get
			{
				return this._PlayerMatchStats.Entity;
			}
			set
			{
				PlayerMatchStats previousValue = this._PlayerMatchStats.Entity;
				if (((previousValue != value) 
							|| (this._PlayerMatchStats.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PlayerMatchStats.Entity = null;
						previousValue.RoundItem.Remove(this);
					}
					this._PlayerMatchStats.Entity = value;
					if ((value != null))
					{
						value.RoundItem.Add(this);
						this._MatchId = value.MatchId;
						this._PlayerId = value.SteamId;
					}
					else
					{
						this._MatchId = default(long);
						this._PlayerId = default(long);
					}
					this.SendPropertyChanged("PlayerMatchStats");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PlayerRoundStats_RoundItem", Storage="_PlayerRoundStats", ThisKey="MatchId,Round,PlayerId", OtherKey="MatchId,Round,PlayerId", IsForeignKey=true)]
		public PlayerRoundStats PlayerRoundStats
		{
			get
			{
				return this._PlayerRoundStats.Entity;
			}
			set
			{
				PlayerRoundStats previousValue = this._PlayerRoundStats.Entity;
				if (((previousValue != value) 
							|| (this._PlayerRoundStats.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PlayerRoundStats.Entity = null;
						previousValue.RoundItem.Remove(this);
					}
					this._PlayerRoundStats.Entity = value;
					if ((value != null))
					{
						value.RoundItem.Add(this);
						this._MatchId = value.MatchId;
						this._Round = value.Round;
						this._PlayerId = value.PlayerId;
					}
					else
					{
						this._MatchId = default(long);
						this._Round = default(short);
						this._PlayerId = default(long);
					}
					this.SendPropertyChanged("PlayerRoundStats");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RoundStats_RoundItem", Storage="_RoundStats", ThisKey="MatchId,Round", OtherKey="MatchId,Round", IsForeignKey=true)]
		public RoundStats RoundStats
		{
			get
			{
				return this._RoundStats.Entity;
			}
			set
			{
				RoundStats previousValue = this._RoundStats.Entity;
				if (((previousValue != value) 
							|| (this._RoundStats.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._RoundStats.Entity = null;
						previousValue.RoundItem.Remove(this);
					}
					this._RoundStats.Entity = value;
					if ((value != null))
					{
						value.RoundItem.Add(this);
						this._MatchId = value.MatchId;
						this._Round = value.Round;
					}
					else
					{
						this._MatchId = default(long);
						this._Round = default(short);
					}
					this.SendPropertyChanged("RoundStats");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.RoundStats")]
	public partial class RoundStats : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _MatchId;
		
		private short _Round;
		
		private byte _WinnerTeam;
		
		private bool _OriginalSide;
		
		private bool _BombPlanted;
		
		private System.Nullable<byte> _WinType;
		
		private int _RoundTime;
		
		private int _StartTime;
		
		private int _EndTime;
		
		private int _RealEndTime;
		
		private int _StartTick;
		
		private int _EndTick;
		
		private int _RealEndTick;
		
		private int _TerrorStrategyId;
		
		private int _CtStrategyId;
		
		private int _CtPlayedValue;
		
		private int _TPlayedValue;
		
		private int @__CtBuyStrat;
		
		private int @__TBuyStrat;
		
		private EntitySet<WeaponReload> _WeaponReload;
		
		private EntitySet<_StutterStep> @__StutterStep;
		
		private EntityRef<BombDefused> _BombDefused;
		
		private EntityRef<BombExplosion> _BombExplosion;
		
		private EntityRef<BombPlant> _BombPlant;
		
		private EntitySet<BotTakeOver> _BotTakeOver;
		
		private EntitySet<ConnectDisconnect> _ConnectDisconnect;
		
		private EntitySet<Damage> _Damage;
		
		private EntitySet<Decoy> _Decoy;
		
		private EntitySet<FireNade> _FireNade;
		
		private EntitySet<Flash> _Flash;
		
		private EntitySet<Flashed> _Flashed;
		
		private EntitySet<HE> _HE;
		
		private EntitySet<HostageDrop> _HostageDrop;
		
		private EntitySet<HostagePickUp> _HostagePickUp;
		
		private EntitySet<HostageRescue> _HostageRescue;
		
		private EntitySet<ItemDropped> _ItemDropped;
		
		private EntitySet<ItemPickedUp> _ItemPickedUp;
		
		private EntitySet<ItemSaved> _ItemSaved;
		
		private EntitySet<Kills> _Kills;
		
		private EntitySet<PlayerPosition> _PlayerPosition;
		
		private EntitySet<PlayerRoundStats> _PlayerRoundStats;
		
		private EntitySet<RoundItem> _RoundItem;
		
		private EntitySet<Smoke> _Smoke;
		
		private EntitySet<WeaponFired> _WeaponFired;
		
		private EntityRef<MatchStats> _MatchStats;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMatchIdChanging(long value);
    partial void OnMatchIdChanged();
    partial void OnRoundChanging(short value);
    partial void OnRoundChanged();
    partial void OnWinnerTeamChanging(byte value);
    partial void OnWinnerTeamChanged();
    partial void OnOriginalSideChanging(bool value);
    partial void OnOriginalSideChanged();
    partial void OnBombPlantedChanging(bool value);
    partial void OnBombPlantedChanged();
    partial void OnWinTypeChanging(System.Nullable<byte> value);
    partial void OnWinTypeChanged();
    partial void OnRoundTimeChanging(int value);
    partial void OnRoundTimeChanged();
    partial void OnStartTimeChanging(int value);
    partial void OnStartTimeChanged();
    partial void OnEndTimeChanging(int value);
    partial void OnEndTimeChanged();
    partial void OnRealEndTimeChanging(int value);
    partial void OnRealEndTimeChanged();
    partial void OnStartTickChanging(int value);
    partial void OnStartTickChanged();
    partial void OnEndTickChanging(int value);
    partial void OnEndTickChanged();
    partial void OnRealEndTickChanging(int value);
    partial void OnRealEndTickChanged();
    partial void OnTerrorStrategyIdChanging(int value);
    partial void OnTerrorStrategyIdChanged();
    partial void OnCtStrategyIdChanging(int value);
    partial void OnCtStrategyIdChanged();
    partial void OnCtPlayedValueChanging(int value);
    partial void OnCtPlayedValueChanged();
    partial void OnTPlayedValueChanging(int value);
    partial void OnTPlayedValueChanged();
    partial void On_CtBuyStratChanging(int value);
    partial void On_CtBuyStratChanged();
    partial void On_TBuyStratChanging(int value);
    partial void On_TBuyStratChanged();
    #endregion
		
		public RoundStats()
		{
			this._WeaponReload = new EntitySet<WeaponReload>(new Action<WeaponReload>(this.attach_WeaponReload), new Action<WeaponReload>(this.detach_WeaponReload));
			this.@__StutterStep = new EntitySet<_StutterStep>(new Action<_StutterStep>(this.attach__StutterStep), new Action<_StutterStep>(this.detach__StutterStep));
			this._BombDefused = default(EntityRef<BombDefused>);
			this._BombExplosion = default(EntityRef<BombExplosion>);
			this._BombPlant = default(EntityRef<BombPlant>);
			this._BotTakeOver = new EntitySet<BotTakeOver>(new Action<BotTakeOver>(this.attach_BotTakeOver), new Action<BotTakeOver>(this.detach_BotTakeOver));
			this._ConnectDisconnect = new EntitySet<ConnectDisconnect>(new Action<ConnectDisconnect>(this.attach_ConnectDisconnect), new Action<ConnectDisconnect>(this.detach_ConnectDisconnect));
			this._Damage = new EntitySet<Damage>(new Action<Damage>(this.attach_Damage), new Action<Damage>(this.detach_Damage));
			this._Decoy = new EntitySet<Decoy>(new Action<Decoy>(this.attach_Decoy), new Action<Decoy>(this.detach_Decoy));
			this._FireNade = new EntitySet<FireNade>(new Action<FireNade>(this.attach_FireNade), new Action<FireNade>(this.detach_FireNade));
			this._Flash = new EntitySet<Flash>(new Action<Flash>(this.attach_Flash), new Action<Flash>(this.detach_Flash));
			this._Flashed = new EntitySet<Flashed>(new Action<Flashed>(this.attach_Flashed), new Action<Flashed>(this.detach_Flashed));
			this._HE = new EntitySet<HE>(new Action<HE>(this.attach_HE), new Action<HE>(this.detach_HE));
			this._HostageDrop = new EntitySet<HostageDrop>(new Action<HostageDrop>(this.attach_HostageDrop), new Action<HostageDrop>(this.detach_HostageDrop));
			this._HostagePickUp = new EntitySet<HostagePickUp>(new Action<HostagePickUp>(this.attach_HostagePickUp), new Action<HostagePickUp>(this.detach_HostagePickUp));
			this._HostageRescue = new EntitySet<HostageRescue>(new Action<HostageRescue>(this.attach_HostageRescue), new Action<HostageRescue>(this.detach_HostageRescue));
			this._ItemDropped = new EntitySet<ItemDropped>(new Action<ItemDropped>(this.attach_ItemDropped), new Action<ItemDropped>(this.detach_ItemDropped));
			this._ItemPickedUp = new EntitySet<ItemPickedUp>(new Action<ItemPickedUp>(this.attach_ItemPickedUp), new Action<ItemPickedUp>(this.detach_ItemPickedUp));
			this._ItemSaved = new EntitySet<ItemSaved>(new Action<ItemSaved>(this.attach_ItemSaved), new Action<ItemSaved>(this.detach_ItemSaved));
			this._Kills = new EntitySet<Kills>(new Action<Kills>(this.attach_Kills), new Action<Kills>(this.detach_Kills));
			this._PlayerPosition = new EntitySet<PlayerPosition>(new Action<PlayerPosition>(this.attach_PlayerPosition), new Action<PlayerPosition>(this.detach_PlayerPosition));
			this._PlayerRoundStats = new EntitySet<PlayerRoundStats>(new Action<PlayerRoundStats>(this.attach_PlayerRoundStats), new Action<PlayerRoundStats>(this.detach_PlayerRoundStats));
			this._RoundItem = new EntitySet<RoundItem>(new Action<RoundItem>(this.attach_RoundItem), new Action<RoundItem>(this.detach_RoundItem));
			this._Smoke = new EntitySet<Smoke>(new Action<Smoke>(this.attach_Smoke), new Action<Smoke>(this.detach_Smoke));
			this._WeaponFired = new EntitySet<WeaponFired>(new Action<WeaponFired>(this.attach_WeaponFired), new Action<WeaponFired>(this.detach_WeaponFired));
			this._MatchStats = default(EntityRef<MatchStats>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MatchId", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long MatchId
		{
			get
			{
				return this._MatchId;
			}
			set
			{
				if ((this._MatchId != value))
				{
					if (this._MatchStats.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMatchIdChanging(value);
					this.SendPropertyChanging();
					this._MatchId = value;
					this.SendPropertyChanged("MatchId");
					this.OnMatchIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Round", DbType="SmallInt NOT NULL", IsPrimaryKey=true)]
		public short Round
		{
			get
			{
				return this._Round;
			}
			set
			{
				if ((this._Round != value))
				{
					this.OnRoundChanging(value);
					this.SendPropertyChanging();
					this._Round = value;
					this.SendPropertyChanged("Round");
					this.OnRoundChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WinnerTeam", DbType="TinyInt NOT NULL")]
		public byte WinnerTeam
		{
			get
			{
				return this._WinnerTeam;
			}
			set
			{
				if ((this._WinnerTeam != value))
				{
					this.OnWinnerTeamChanging(value);
					this.SendPropertyChanging();
					this._WinnerTeam = value;
					this.SendPropertyChanged("WinnerTeam");
					this.OnWinnerTeamChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OriginalSide", DbType="Bit NOT NULL")]
		public bool OriginalSide
		{
			get
			{
				return this._OriginalSide;
			}
			set
			{
				if ((this._OriginalSide != value))
				{
					this.OnOriginalSideChanging(value);
					this.SendPropertyChanging();
					this._OriginalSide = value;
					this.SendPropertyChanged("OriginalSide");
					this.OnOriginalSideChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BombPlanted", DbType="Bit NOT NULL")]
		public bool BombPlanted
		{
			get
			{
				return this._BombPlanted;
			}
			set
			{
				if ((this._BombPlanted != value))
				{
					this.OnBombPlantedChanging(value);
					this.SendPropertyChanging();
					this._BombPlanted = value;
					this.SendPropertyChanged("BombPlanted");
					this.OnBombPlantedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WinType", DbType="TinyInt")]
		public System.Nullable<byte> WinType
		{
			get
			{
				return this._WinType;
			}
			set
			{
				if ((this._WinType != value))
				{
					this.OnWinTypeChanging(value);
					this.SendPropertyChanging();
					this._WinType = value;
					this.SendPropertyChanged("WinType");
					this.OnWinTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoundTime", DbType="Int NOT NULL")]
		public int RoundTime
		{
			get
			{
				return this._RoundTime;
			}
			set
			{
				if ((this._RoundTime != value))
				{
					this.OnRoundTimeChanging(value);
					this.SendPropertyChanging();
					this._RoundTime = value;
					this.SendPropertyChanged("RoundTime");
					this.OnRoundTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StartTime", DbType="Int NOT NULL")]
		public int StartTime
		{
			get
			{
				return this._StartTime;
			}
			set
			{
				if ((this._StartTime != value))
				{
					this.OnStartTimeChanging(value);
					this.SendPropertyChanging();
					this._StartTime = value;
					this.SendPropertyChanged("StartTime");
					this.OnStartTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EndTime", DbType="Int NOT NULL")]
		public int EndTime
		{
			get
			{
				return this._EndTime;
			}
			set
			{
				if ((this._EndTime != value))
				{
					this.OnEndTimeChanging(value);
					this.SendPropertyChanging();
					this._EndTime = value;
					this.SendPropertyChanged("EndTime");
					this.OnEndTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RealEndTime", DbType="Int NOT NULL")]
		public int RealEndTime
		{
			get
			{
				return this._RealEndTime;
			}
			set
			{
				if ((this._RealEndTime != value))
				{
					this.OnRealEndTimeChanging(value);
					this.SendPropertyChanging();
					this._RealEndTime = value;
					this.SendPropertyChanged("RealEndTime");
					this.OnRealEndTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StartTick", DbType="Int NOT NULL")]
		public int StartTick
		{
			get
			{
				return this._StartTick;
			}
			set
			{
				if ((this._StartTick != value))
				{
					this.OnStartTickChanging(value);
					this.SendPropertyChanging();
					this._StartTick = value;
					this.SendPropertyChanged("StartTick");
					this.OnStartTickChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EndTick", DbType="Int NOT NULL")]
		public int EndTick
		{
			get
			{
				return this._EndTick;
			}
			set
			{
				if ((this._EndTick != value))
				{
					this.OnEndTickChanging(value);
					this.SendPropertyChanging();
					this._EndTick = value;
					this.SendPropertyChanged("EndTick");
					this.OnEndTickChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RealEndTick", DbType="Int NOT NULL")]
		public int RealEndTick
		{
			get
			{
				return this._RealEndTick;
			}
			set
			{
				if ((this._RealEndTick != value))
				{
					this.OnRealEndTickChanging(value);
					this.SendPropertyChanging();
					this._RealEndTick = value;
					this.SendPropertyChanged("RealEndTick");
					this.OnRealEndTickChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TerrorStrategyId", DbType="Int NOT NULL")]
		public int TerrorStrategyId
		{
			get
			{
				return this._TerrorStrategyId;
			}
			set
			{
				if ((this._TerrorStrategyId != value))
				{
					this.OnTerrorStrategyIdChanging(value);
					this.SendPropertyChanging();
					this._TerrorStrategyId = value;
					this.SendPropertyChanged("TerrorStrategyId");
					this.OnTerrorStrategyIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CtStrategyId", DbType="Int NOT NULL")]
		public int CtStrategyId
		{
			get
			{
				return this._CtStrategyId;
			}
			set
			{
				if ((this._CtStrategyId != value))
				{
					this.OnCtStrategyIdChanging(value);
					this.SendPropertyChanging();
					this._CtStrategyId = value;
					this.SendPropertyChanged("CtStrategyId");
					this.OnCtStrategyIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CtPlayedValue", DbType="Int NOT NULL")]
		public int CtPlayedValue
		{
			get
			{
				return this._CtPlayedValue;
			}
			set
			{
				if ((this._CtPlayedValue != value))
				{
					this.OnCtPlayedValueChanging(value);
					this.SendPropertyChanging();
					this._CtPlayedValue = value;
					this.SendPropertyChanged("CtPlayedValue");
					this.OnCtPlayedValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TPlayedValue", DbType="Int NOT NULL")]
		public int TPlayedValue
		{
			get
			{
				return this._TPlayedValue;
			}
			set
			{
				if ((this._TPlayedValue != value))
				{
					this.OnTPlayedValueChanging(value);
					this.SendPropertyChanging();
					this._TPlayedValue = value;
					this.SendPropertyChanged("TPlayedValue");
					this.OnTPlayedValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[_CtBuyStrat]", Storage="__CtBuyStrat", DbType="Int NOT NULL")]
		public int _CtBuyStrat
		{
			get
			{
				return this.@__CtBuyStrat;
			}
			set
			{
				if ((this.@__CtBuyStrat != value))
				{
					this.On_CtBuyStratChanging(value);
					this.SendPropertyChanging();
					this.@__CtBuyStrat = value;
					this.SendPropertyChanged("_CtBuyStrat");
					this.On_CtBuyStratChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[_TBuyStrat]", Storage="__TBuyStrat", DbType="Int NOT NULL")]
		public int _TBuyStrat
		{
			get
			{
				return this.@__TBuyStrat;
			}
			set
			{
				if ((this.@__TBuyStrat != value))
				{
					this.On_TBuyStratChanging(value);
					this.SendPropertyChanging();
					this.@__TBuyStrat = value;
					this.SendPropertyChanged("_TBuyStrat");
					this.On_TBuyStratChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RoundStats_WeaponReload", Storage="_WeaponReload", ThisKey="MatchId,Round", OtherKey="MatchId,Round")]
		public EntitySet<WeaponReload> WeaponReload
		{
			get
			{
				return this._WeaponReload;
			}
			set
			{
				this._WeaponReload.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RoundStats__StutterStep", Storage="__StutterStep", ThisKey="MatchId,Round", OtherKey="MatchId,Round")]
		public EntitySet<_StutterStep> _StutterStep
		{
			get
			{
				return this.@__StutterStep;
			}
			set
			{
				this.@__StutterStep.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RoundStats_BombDefused", Storage="_BombDefused", ThisKey="MatchId,Round", OtherKey="MatchId,Round", IsUnique=true, IsForeignKey=false)]
		public BombDefused BombDefused
		{
			get
			{
				return this._BombDefused.Entity;
			}
			set
			{
				BombDefused previousValue = this._BombDefused.Entity;
				if (((previousValue != value) 
							|| (this._BombDefused.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BombDefused.Entity = null;
						previousValue.RoundStats = null;
					}
					this._BombDefused.Entity = value;
					if ((value != null))
					{
						value.RoundStats = this;
					}
					this.SendPropertyChanged("BombDefused");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RoundStats_BombExplosion", Storage="_BombExplosion", ThisKey="MatchId,Round", OtherKey="MatchId,Round", IsUnique=true, IsForeignKey=false)]
		public BombExplosion BombExplosion
		{
			get
			{
				return this._BombExplosion.Entity;
			}
			set
			{
				BombExplosion previousValue = this._BombExplosion.Entity;
				if (((previousValue != value) 
							|| (this._BombExplosion.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BombExplosion.Entity = null;
						previousValue.RoundStats = null;
					}
					this._BombExplosion.Entity = value;
					if ((value != null))
					{
						value.RoundStats = this;
					}
					this.SendPropertyChanged("BombExplosion");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RoundStats_BombPlant", Storage="_BombPlant", ThisKey="MatchId,Round", OtherKey="MatchId,Round", IsUnique=true, IsForeignKey=false)]
		public BombPlant BombPlant
		{
			get
			{
				return this._BombPlant.Entity;
			}
			set
			{
				BombPlant previousValue = this._BombPlant.Entity;
				if (((previousValue != value) 
							|| (this._BombPlant.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BombPlant.Entity = null;
						previousValue.RoundStats = null;
					}
					this._BombPlant.Entity = value;
					if ((value != null))
					{
						value.RoundStats = this;
					}
					this.SendPropertyChanged("BombPlant");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RoundStats_BotTakeOver", Storage="_BotTakeOver", ThisKey="MatchId,Round", OtherKey="MatchId,Round")]
		public EntitySet<BotTakeOver> BotTakeOver
		{
			get
			{
				return this._BotTakeOver;
			}
			set
			{
				this._BotTakeOver.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RoundStats_ConnectDisconnect", Storage="_ConnectDisconnect", ThisKey="MatchId,Round", OtherKey="MatchId,Round")]
		public EntitySet<ConnectDisconnect> ConnectDisconnect
		{
			get
			{
				return this._ConnectDisconnect;
			}
			set
			{
				this._ConnectDisconnect.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RoundStats_Damage", Storage="_Damage", ThisKey="MatchId,Round", OtherKey="MatchId,Round")]
		public EntitySet<Damage> Damage
		{
			get
			{
				return this._Damage;
			}
			set
			{
				this._Damage.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RoundStats_Decoy", Storage="_Decoy", ThisKey="MatchId,Round", OtherKey="MatchId,Round")]
		public EntitySet<Decoy> Decoy
		{
			get
			{
				return this._Decoy;
			}
			set
			{
				this._Decoy.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RoundStats_FireNade", Storage="_FireNade", ThisKey="MatchId,Round", OtherKey="MatchId,Round")]
		public EntitySet<FireNade> FireNade
		{
			get
			{
				return this._FireNade;
			}
			set
			{
				this._FireNade.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RoundStats_Flash", Storage="_Flash", ThisKey="MatchId,Round", OtherKey="MatchId,Round")]
		public EntitySet<Flash> Flash
		{
			get
			{
				return this._Flash;
			}
			set
			{
				this._Flash.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RoundStats_Flashed", Storage="_Flashed", ThisKey="MatchId,Round", OtherKey="MatchId,Round")]
		public EntitySet<Flashed> Flashed
		{
			get
			{
				return this._Flashed;
			}
			set
			{
				this._Flashed.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RoundStats_HE", Storage="_HE", ThisKey="MatchId,Round", OtherKey="MatchId,Round")]
		public EntitySet<HE> HE
		{
			get
			{
				return this._HE;
			}
			set
			{
				this._HE.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RoundStats_HostageDrop", Storage="_HostageDrop", ThisKey="MatchId,Round", OtherKey="MatchId,Round")]
		public EntitySet<HostageDrop> HostageDrop
		{
			get
			{
				return this._HostageDrop;
			}
			set
			{
				this._HostageDrop.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RoundStats_HostagePickUp", Storage="_HostagePickUp", ThisKey="MatchId,Round", OtherKey="MatchId,Round")]
		public EntitySet<HostagePickUp> HostagePickUp
		{
			get
			{
				return this._HostagePickUp;
			}
			set
			{
				this._HostagePickUp.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RoundStats_HostageRescue", Storage="_HostageRescue", ThisKey="MatchId,Round", OtherKey="MatchId,Round")]
		public EntitySet<HostageRescue> HostageRescue
		{
			get
			{
				return this._HostageRescue;
			}
			set
			{
				this._HostageRescue.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RoundStats_ItemDropped", Storage="_ItemDropped", ThisKey="MatchId,Round", OtherKey="MatchId,Round")]
		public EntitySet<ItemDropped> ItemDropped
		{
			get
			{
				return this._ItemDropped;
			}
			set
			{
				this._ItemDropped.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RoundStats_ItemPickedUp", Storage="_ItemPickedUp", ThisKey="MatchId,Round", OtherKey="MatchId,Round")]
		public EntitySet<ItemPickedUp> ItemPickedUp
		{
			get
			{
				return this._ItemPickedUp;
			}
			set
			{
				this._ItemPickedUp.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RoundStats_ItemSaved", Storage="_ItemSaved", ThisKey="MatchId,Round", OtherKey="MatchId,Round")]
		public EntitySet<ItemSaved> ItemSaved
		{
			get
			{
				return this._ItemSaved;
			}
			set
			{
				this._ItemSaved.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RoundStats_Kills", Storage="_Kills", ThisKey="MatchId,Round", OtherKey="MatchId,Round")]
		public EntitySet<Kills> Kills
		{
			get
			{
				return this._Kills;
			}
			set
			{
				this._Kills.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RoundStats_PlayerPosition", Storage="_PlayerPosition", ThisKey="MatchId,Round", OtherKey="MatchId,Round")]
		public EntitySet<PlayerPosition> PlayerPosition
		{
			get
			{
				return this._PlayerPosition;
			}
			set
			{
				this._PlayerPosition.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RoundStats_PlayerRoundStats", Storage="_PlayerRoundStats", ThisKey="MatchId,Round", OtherKey="MatchId,Round")]
		public EntitySet<PlayerRoundStats> PlayerRoundStats
		{
			get
			{
				return this._PlayerRoundStats;
			}
			set
			{
				this._PlayerRoundStats.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RoundStats_RoundItem", Storage="_RoundItem", ThisKey="MatchId,Round", OtherKey="MatchId,Round")]
		public EntitySet<RoundItem> RoundItem
		{
			get
			{
				return this._RoundItem;
			}
			set
			{
				this._RoundItem.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RoundStats_Smoke", Storage="_Smoke", ThisKey="MatchId,Round", OtherKey="MatchId,Round")]
		public EntitySet<Smoke> Smoke
		{
			get
			{
				return this._Smoke;
			}
			set
			{
				this._Smoke.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RoundStats_WeaponFired", Storage="_WeaponFired", ThisKey="MatchId,Round", OtherKey="MatchId,Round")]
		public EntitySet<WeaponFired> WeaponFired
		{
			get
			{
				return this._WeaponFired;
			}
			set
			{
				this._WeaponFired.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MatchStats_RoundStats", Storage="_MatchStats", ThisKey="MatchId", OtherKey="MatchId", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public MatchStats MatchStats
		{
			get
			{
				return this._MatchStats.Entity;
			}
			set
			{
				MatchStats previousValue = this._MatchStats.Entity;
				if (((previousValue != value) 
							|| (this._MatchStats.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MatchStats.Entity = null;
						previousValue.RoundStats.Remove(this);
					}
					this._MatchStats.Entity = value;
					if ((value != null))
					{
						value.RoundStats.Add(this);
						this._MatchId = value.MatchId;
					}
					else
					{
						this._MatchId = default(long);
					}
					this.SendPropertyChanged("MatchStats");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_WeaponReload(WeaponReload entity)
		{
			this.SendPropertyChanging();
			entity.RoundStats = this;
		}
		
		private void detach_WeaponReload(WeaponReload entity)
		{
			this.SendPropertyChanging();
			entity.RoundStats = null;
		}
		
		private void attach__StutterStep(_StutterStep entity)
		{
			this.SendPropertyChanging();
			entity.RoundStats = this;
		}
		
		private void detach__StutterStep(_StutterStep entity)
		{
			this.SendPropertyChanging();
			entity.RoundStats = null;
		}
		
		private void attach_BotTakeOver(BotTakeOver entity)
		{
			this.SendPropertyChanging();
			entity.RoundStats = this;
		}
		
		private void detach_BotTakeOver(BotTakeOver entity)
		{
			this.SendPropertyChanging();
			entity.RoundStats = null;
		}
		
		private void attach_ConnectDisconnect(ConnectDisconnect entity)
		{
			this.SendPropertyChanging();
			entity.RoundStats = this;
		}
		
		private void detach_ConnectDisconnect(ConnectDisconnect entity)
		{
			this.SendPropertyChanging();
			entity.RoundStats = null;
		}
		
		private void attach_Damage(Damage entity)
		{
			this.SendPropertyChanging();
			entity.RoundStats = this;
		}
		
		private void detach_Damage(Damage entity)
		{
			this.SendPropertyChanging();
			entity.RoundStats = null;
		}
		
		private void attach_Decoy(Decoy entity)
		{
			this.SendPropertyChanging();
			entity.RoundStats = this;
		}
		
		private void detach_Decoy(Decoy entity)
		{
			this.SendPropertyChanging();
			entity.RoundStats = null;
		}
		
		private void attach_FireNade(FireNade entity)
		{
			this.SendPropertyChanging();
			entity.RoundStats = this;
		}
		
		private void detach_FireNade(FireNade entity)
		{
			this.SendPropertyChanging();
			entity.RoundStats = null;
		}
		
		private void attach_Flash(Flash entity)
		{
			this.SendPropertyChanging();
			entity.RoundStats = this;
		}
		
		private void detach_Flash(Flash entity)
		{
			this.SendPropertyChanging();
			entity.RoundStats = null;
		}
		
		private void attach_Flashed(Flashed entity)
		{
			this.SendPropertyChanging();
			entity.RoundStats = this;
		}
		
		private void detach_Flashed(Flashed entity)
		{
			this.SendPropertyChanging();
			entity.RoundStats = null;
		}
		
		private void attach_HE(HE entity)
		{
			this.SendPropertyChanging();
			entity.RoundStats = this;
		}
		
		private void detach_HE(HE entity)
		{
			this.SendPropertyChanging();
			entity.RoundStats = null;
		}
		
		private void attach_HostageDrop(HostageDrop entity)
		{
			this.SendPropertyChanging();
			entity.RoundStats = this;
		}
		
		private void detach_HostageDrop(HostageDrop entity)
		{
			this.SendPropertyChanging();
			entity.RoundStats = null;
		}
		
		private void attach_HostagePickUp(HostagePickUp entity)
		{
			this.SendPropertyChanging();
			entity.RoundStats = this;
		}
		
		private void detach_HostagePickUp(HostagePickUp entity)
		{
			this.SendPropertyChanging();
			entity.RoundStats = null;
		}
		
		private void attach_HostageRescue(HostageRescue entity)
		{
			this.SendPropertyChanging();
			entity.RoundStats = this;
		}
		
		private void detach_HostageRescue(HostageRescue entity)
		{
			this.SendPropertyChanging();
			entity.RoundStats = null;
		}
		
		private void attach_ItemDropped(ItemDropped entity)
		{
			this.SendPropertyChanging();
			entity.RoundStats = this;
		}
		
		private void detach_ItemDropped(ItemDropped entity)
		{
			this.SendPropertyChanging();
			entity.RoundStats = null;
		}
		
		private void attach_ItemPickedUp(ItemPickedUp entity)
		{
			this.SendPropertyChanging();
			entity.RoundStats = this;
		}
		
		private void detach_ItemPickedUp(ItemPickedUp entity)
		{
			this.SendPropertyChanging();
			entity.RoundStats = null;
		}
		
		private void attach_ItemSaved(ItemSaved entity)
		{
			this.SendPropertyChanging();
			entity.RoundStats = this;
		}
		
		private void detach_ItemSaved(ItemSaved entity)
		{
			this.SendPropertyChanging();
			entity.RoundStats = null;
		}
		
		private void attach_Kills(Kills entity)
		{
			this.SendPropertyChanging();
			entity.RoundStats = this;
		}
		
		private void detach_Kills(Kills entity)
		{
			this.SendPropertyChanging();
			entity.RoundStats = null;
		}
		
		private void attach_PlayerPosition(PlayerPosition entity)
		{
			this.SendPropertyChanging();
			entity.RoundStats = this;
		}
		
		private void detach_PlayerPosition(PlayerPosition entity)
		{
			this.SendPropertyChanging();
			entity.RoundStats = null;
		}
		
		private void attach_PlayerRoundStats(PlayerRoundStats entity)
		{
			this.SendPropertyChanging();
			entity.RoundStats = this;
		}
		
		private void detach_PlayerRoundStats(PlayerRoundStats entity)
		{
			this.SendPropertyChanging();
			entity.RoundStats = null;
		}
		
		private void attach_RoundItem(RoundItem entity)
		{
			this.SendPropertyChanging();
			entity.RoundStats = this;
		}
		
		private void detach_RoundItem(RoundItem entity)
		{
			this.SendPropertyChanging();
			entity.RoundStats = null;
		}
		
		private void attach_Smoke(Smoke entity)
		{
			this.SendPropertyChanging();
			entity.RoundStats = this;
		}
		
		private void detach_Smoke(Smoke entity)
		{
			this.SendPropertyChanging();
			entity.RoundStats = null;
		}
		
		private void attach_WeaponFired(WeaponFired entity)
		{
			this.SendPropertyChanging();
			entity.RoundStats = this;
		}
		
		private void detach_WeaponFired(WeaponFired entity)
		{
			this.SendPropertyChanging();
			entity.RoundStats = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Smoke")]
	public partial class Smoke : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _MatchId;
		
		private long _GrenadeId;
		
		private short _Round;
		
		private int _Time;
		
		private int _Tick;
		
		private long _PlayerId;
		
		private double _PlayerPosX;
		
		private double _PlayerPosY;
		
		private double _PlayerPosZ;
		
		private double _PlayerViewX;
		
		private double _PlayerViewY;
		
		private bool _IsCT;
		
		private double _GrenadePosX;
		
		private double _GrenadePosY;
		
		private double _GrenadePosZ;
		
		private int @__Category;
		
		private int @__Target;
		
		private byte @__Result;
		
		private string _Trajectory;
		
		private EntityRef<MatchStats> _MatchStats;
		
		private EntityRef<PlayerMatchStats> _PlayerMatchStats;
		
		private EntityRef<PlayerRoundStats> _PlayerRoundStats;
		
		private EntityRef<RoundStats> _RoundStats;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMatchIdChanging(long value);
    partial void OnMatchIdChanged();
    partial void OnGrenadeIdChanging(long value);
    partial void OnGrenadeIdChanged();
    partial void OnRoundChanging(short value);
    partial void OnRoundChanged();
    partial void OnTimeChanging(int value);
    partial void OnTimeChanged();
    partial void OnTickChanging(int value);
    partial void OnTickChanged();
    partial void OnPlayerIdChanging(long value);
    partial void OnPlayerIdChanged();
    partial void OnPlayerPosXChanging(double value);
    partial void OnPlayerPosXChanged();
    partial void OnPlayerPosYChanging(double value);
    partial void OnPlayerPosYChanged();
    partial void OnPlayerPosZChanging(double value);
    partial void OnPlayerPosZChanged();
    partial void OnPlayerViewXChanging(double value);
    partial void OnPlayerViewXChanged();
    partial void OnPlayerViewYChanging(double value);
    partial void OnPlayerViewYChanged();
    partial void OnIsCTChanging(bool value);
    partial void OnIsCTChanged();
    partial void OnGrenadePosXChanging(double value);
    partial void OnGrenadePosXChanged();
    partial void OnGrenadePosYChanging(double value);
    partial void OnGrenadePosYChanged();
    partial void OnGrenadePosZChanging(double value);
    partial void OnGrenadePosZChanged();
    partial void On_CategoryChanging(int value);
    partial void On_CategoryChanged();
    partial void On_TargetChanging(int value);
    partial void On_TargetChanged();
    partial void On_ResultChanging(byte value);
    partial void On_ResultChanged();
    partial void OnTrajectoryChanging(string value);
    partial void OnTrajectoryChanged();
    #endregion
		
		public Smoke()
		{
			this._MatchStats = default(EntityRef<MatchStats>);
			this._PlayerMatchStats = default(EntityRef<PlayerMatchStats>);
			this._PlayerRoundStats = default(EntityRef<PlayerRoundStats>);
			this._RoundStats = default(EntityRef<RoundStats>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MatchId", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long MatchId
		{
			get
			{
				return this._MatchId;
			}
			set
			{
				if ((this._MatchId != value))
				{
					if ((((this._MatchStats.HasLoadedOrAssignedValue || this._PlayerMatchStats.HasLoadedOrAssignedValue) 
								|| this._PlayerRoundStats.HasLoadedOrAssignedValue) 
								|| this._RoundStats.HasLoadedOrAssignedValue))
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMatchIdChanging(value);
					this.SendPropertyChanging();
					this._MatchId = value;
					this.SendPropertyChanged("MatchId");
					this.OnMatchIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GrenadeId", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long GrenadeId
		{
			get
			{
				return this._GrenadeId;
			}
			set
			{
				if ((this._GrenadeId != value))
				{
					this.OnGrenadeIdChanging(value);
					this.SendPropertyChanging();
					this._GrenadeId = value;
					this.SendPropertyChanged("GrenadeId");
					this.OnGrenadeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Round", DbType="SmallInt NOT NULL")]
		public short Round
		{
			get
			{
				return this._Round;
			}
			set
			{
				if ((this._Round != value))
				{
					if ((this._PlayerRoundStats.HasLoadedOrAssignedValue || this._RoundStats.HasLoadedOrAssignedValue))
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRoundChanging(value);
					this.SendPropertyChanging();
					this._Round = value;
					this.SendPropertyChanged("Round");
					this.OnRoundChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Time", DbType="Int NOT NULL")]
		public int Time
		{
			get
			{
				return this._Time;
			}
			set
			{
				if ((this._Time != value))
				{
					this.OnTimeChanging(value);
					this.SendPropertyChanging();
					this._Time = value;
					this.SendPropertyChanged("Time");
					this.OnTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Tick", DbType="Int NOT NULL")]
		public int Tick
		{
			get
			{
				return this._Tick;
			}
			set
			{
				if ((this._Tick != value))
				{
					this.OnTickChanging(value);
					this.SendPropertyChanging();
					this._Tick = value;
					this.SendPropertyChanged("Tick");
					this.OnTickChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlayerId", DbType="BigInt NOT NULL")]
		public long PlayerId
		{
			get
			{
				return this._PlayerId;
			}
			set
			{
				if ((this._PlayerId != value))
				{
					if ((this._PlayerMatchStats.HasLoadedOrAssignedValue || this._PlayerRoundStats.HasLoadedOrAssignedValue))
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPlayerIdChanging(value);
					this.SendPropertyChanging();
					this._PlayerId = value;
					this.SendPropertyChanged("PlayerId");
					this.OnPlayerIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlayerPosX", DbType="Float NOT NULL")]
		public double PlayerPosX
		{
			get
			{
				return this._PlayerPosX;
			}
			set
			{
				if ((this._PlayerPosX != value))
				{
					this.OnPlayerPosXChanging(value);
					this.SendPropertyChanging();
					this._PlayerPosX = value;
					this.SendPropertyChanged("PlayerPosX");
					this.OnPlayerPosXChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlayerPosY", DbType="Float NOT NULL")]
		public double PlayerPosY
		{
			get
			{
				return this._PlayerPosY;
			}
			set
			{
				if ((this._PlayerPosY != value))
				{
					this.OnPlayerPosYChanging(value);
					this.SendPropertyChanging();
					this._PlayerPosY = value;
					this.SendPropertyChanged("PlayerPosY");
					this.OnPlayerPosYChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlayerPosZ", DbType="Float NOT NULL")]
		public double PlayerPosZ
		{
			get
			{
				return this._PlayerPosZ;
			}
			set
			{
				if ((this._PlayerPosZ != value))
				{
					this.OnPlayerPosZChanging(value);
					this.SendPropertyChanging();
					this._PlayerPosZ = value;
					this.SendPropertyChanged("PlayerPosZ");
					this.OnPlayerPosZChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlayerViewX", DbType="Float NOT NULL")]
		public double PlayerViewX
		{
			get
			{
				return this._PlayerViewX;
			}
			set
			{
				if ((this._PlayerViewX != value))
				{
					this.OnPlayerViewXChanging(value);
					this.SendPropertyChanging();
					this._PlayerViewX = value;
					this.SendPropertyChanged("PlayerViewX");
					this.OnPlayerViewXChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlayerViewY", DbType="Float NOT NULL")]
		public double PlayerViewY
		{
			get
			{
				return this._PlayerViewY;
			}
			set
			{
				if ((this._PlayerViewY != value))
				{
					this.OnPlayerViewYChanging(value);
					this.SendPropertyChanging();
					this._PlayerViewY = value;
					this.SendPropertyChanged("PlayerViewY");
					this.OnPlayerViewYChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsCT", DbType="Bit NOT NULL")]
		public bool IsCT
		{
			get
			{
				return this._IsCT;
			}
			set
			{
				if ((this._IsCT != value))
				{
					this.OnIsCTChanging(value);
					this.SendPropertyChanging();
					this._IsCT = value;
					this.SendPropertyChanged("IsCT");
					this.OnIsCTChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GrenadePosX", DbType="Float NOT NULL")]
		public double GrenadePosX
		{
			get
			{
				return this._GrenadePosX;
			}
			set
			{
				if ((this._GrenadePosX != value))
				{
					this.OnGrenadePosXChanging(value);
					this.SendPropertyChanging();
					this._GrenadePosX = value;
					this.SendPropertyChanged("GrenadePosX");
					this.OnGrenadePosXChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GrenadePosY", DbType="Float NOT NULL")]
		public double GrenadePosY
		{
			get
			{
				return this._GrenadePosY;
			}
			set
			{
				if ((this._GrenadePosY != value))
				{
					this.OnGrenadePosYChanging(value);
					this.SendPropertyChanging();
					this._GrenadePosY = value;
					this.SendPropertyChanged("GrenadePosY");
					this.OnGrenadePosYChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GrenadePosZ", DbType="Float NOT NULL")]
		public double GrenadePosZ
		{
			get
			{
				return this._GrenadePosZ;
			}
			set
			{
				if ((this._GrenadePosZ != value))
				{
					this.OnGrenadePosZChanging(value);
					this.SendPropertyChanging();
					this._GrenadePosZ = value;
					this.SendPropertyChanged("GrenadePosZ");
					this.OnGrenadePosZChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[_Category]", Storage="__Category", DbType="Int NOT NULL")]
		public int _Category
		{
			get
			{
				return this.@__Category;
			}
			set
			{
				if ((this.@__Category != value))
				{
					this.On_CategoryChanging(value);
					this.SendPropertyChanging();
					this.@__Category = value;
					this.SendPropertyChanged("_Category");
					this.On_CategoryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[_Target]", Storage="__Target", DbType="Int NOT NULL")]
		public int _Target
		{
			get
			{
				return this.@__Target;
			}
			set
			{
				if ((this.@__Target != value))
				{
					this.On_TargetChanging(value);
					this.SendPropertyChanging();
					this.@__Target = value;
					this.SendPropertyChanged("_Target");
					this.On_TargetChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[_Result]", Storage="__Result", DbType="TinyInt NOT NULL")]
		public byte _Result
		{
			get
			{
				return this.@__Result;
			}
			set
			{
				if ((this.@__Result != value))
				{
					this.On_ResultChanging(value);
					this.SendPropertyChanging();
					this.@__Result = value;
					this.SendPropertyChanged("_Result");
					this.On_ResultChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Trajectory", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Trajectory
		{
			get
			{
				return this._Trajectory;
			}
			set
			{
				if ((this._Trajectory != value))
				{
					this.OnTrajectoryChanging(value);
					this.SendPropertyChanging();
					this._Trajectory = value;
					this.SendPropertyChanged("Trajectory");
					this.OnTrajectoryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MatchStats_Smoke", Storage="_MatchStats", ThisKey="MatchId", OtherKey="MatchId", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public MatchStats MatchStats
		{
			get
			{
				return this._MatchStats.Entity;
			}
			set
			{
				MatchStats previousValue = this._MatchStats.Entity;
				if (((previousValue != value) 
							|| (this._MatchStats.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MatchStats.Entity = null;
						previousValue.Smoke.Remove(this);
					}
					this._MatchStats.Entity = value;
					if ((value != null))
					{
						value.Smoke.Add(this);
						this._MatchId = value.MatchId;
					}
					else
					{
						this._MatchId = default(long);
					}
					this.SendPropertyChanged("MatchStats");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PlayerMatchStats_Smoke", Storage="_PlayerMatchStats", ThisKey="MatchId,PlayerId", OtherKey="MatchId,SteamId", IsForeignKey=true)]
		public PlayerMatchStats PlayerMatchStats
		{
			get
			{
				return this._PlayerMatchStats.Entity;
			}
			set
			{
				PlayerMatchStats previousValue = this._PlayerMatchStats.Entity;
				if (((previousValue != value) 
							|| (this._PlayerMatchStats.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PlayerMatchStats.Entity = null;
						previousValue.Smoke.Remove(this);
					}
					this._PlayerMatchStats.Entity = value;
					if ((value != null))
					{
						value.Smoke.Add(this);
						this._MatchId = value.MatchId;
						this._PlayerId = value.SteamId;
					}
					else
					{
						this._MatchId = default(long);
						this._PlayerId = default(long);
					}
					this.SendPropertyChanged("PlayerMatchStats");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PlayerRoundStats_Smoke", Storage="_PlayerRoundStats", ThisKey="MatchId,Round,PlayerId", OtherKey="MatchId,Round,PlayerId", IsForeignKey=true)]
		public PlayerRoundStats PlayerRoundStats
		{
			get
			{
				return this._PlayerRoundStats.Entity;
			}
			set
			{
				PlayerRoundStats previousValue = this._PlayerRoundStats.Entity;
				if (((previousValue != value) 
							|| (this._PlayerRoundStats.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PlayerRoundStats.Entity = null;
						previousValue.Smoke.Remove(this);
					}
					this._PlayerRoundStats.Entity = value;
					if ((value != null))
					{
						value.Smoke.Add(this);
						this._MatchId = value.MatchId;
						this._Round = value.Round;
						this._PlayerId = value.PlayerId;
					}
					else
					{
						this._MatchId = default(long);
						this._Round = default(short);
						this._PlayerId = default(long);
					}
					this.SendPropertyChanged("PlayerRoundStats");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RoundStats_Smoke", Storage="_RoundStats", ThisKey="MatchId,Round", OtherKey="MatchId,Round", IsForeignKey=true)]
		public RoundStats RoundStats
		{
			get
			{
				return this._RoundStats.Entity;
			}
			set
			{
				RoundStats previousValue = this._RoundStats.Entity;
				if (((previousValue != value) 
							|| (this._RoundStats.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._RoundStats.Entity = null;
						previousValue.Smoke.Remove(this);
					}
					this._RoundStats.Entity = value;
					if ((value != null))
					{
						value.Smoke.Add(this);
						this._MatchId = value.MatchId;
						this._Round = value.Round;
					}
					else
					{
						this._MatchId = default(long);
						this._Round = default(short);
					}
					this.SendPropertyChanged("RoundStats");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.WeaponFired")]
	public partial class WeaponFired : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _MatchId;
		
		private long _WeaponFiredId;
		
		private short _Round;
		
		private int _Time;
		
		private int _Tick;
		
		private long _PlayerId;
		
		private double _PlayerPosX;
		
		private double _PlayerPosY;
		
		private double _PlayerPosZ;
		
		private double _PlayerViewX;
		
		private double _PlayerViewY;
		
		private double _PlayerVeloX;
		
		private double _PlayerVeloY;
		
		private double _PlayerVeloZ;
		
		private bool _IsCT;
		
		private short _Weapon;
		
		private double _InAccuracyFromFiring;
		
		private double _InAccuracyFromMoving;
		
		private short _PlayerState;
		
		private EntitySet<_StutterStep> @__StutterStep;
		
		private EntitySet<Damage> _Damage;
		
		private EntityRef<MatchStats> _MatchStats;
		
		private EntityRef<PlayerMatchStats> _PlayerMatchStats;
		
		private EntityRef<PlayerRoundStats> _PlayerRoundStats;
		
		private EntityRef<RoundStats> _RoundStats;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMatchIdChanging(long value);
    partial void OnMatchIdChanged();
    partial void OnWeaponFiredIdChanging(long value);
    partial void OnWeaponFiredIdChanged();
    partial void OnRoundChanging(short value);
    partial void OnRoundChanged();
    partial void OnTimeChanging(int value);
    partial void OnTimeChanged();
    partial void OnTickChanging(int value);
    partial void OnTickChanged();
    partial void OnPlayerIdChanging(long value);
    partial void OnPlayerIdChanged();
    partial void OnPlayerPosXChanging(double value);
    partial void OnPlayerPosXChanged();
    partial void OnPlayerPosYChanging(double value);
    partial void OnPlayerPosYChanged();
    partial void OnPlayerPosZChanging(double value);
    partial void OnPlayerPosZChanged();
    partial void OnPlayerViewXChanging(double value);
    partial void OnPlayerViewXChanged();
    partial void OnPlayerViewYChanging(double value);
    partial void OnPlayerViewYChanged();
    partial void OnPlayerVeloXChanging(double value);
    partial void OnPlayerVeloXChanged();
    partial void OnPlayerVeloYChanging(double value);
    partial void OnPlayerVeloYChanged();
    partial void OnPlayerVeloZChanging(double value);
    partial void OnPlayerVeloZChanged();
    partial void OnIsCTChanging(bool value);
    partial void OnIsCTChanged();
    partial void OnWeaponChanging(short value);
    partial void OnWeaponChanged();
    partial void OnInAccuracyFromFiringChanging(double value);
    partial void OnInAccuracyFromFiringChanged();
    partial void OnInAccuracyFromMovingChanging(double value);
    partial void OnInAccuracyFromMovingChanged();
    partial void OnPlayerStateChanging(short value);
    partial void OnPlayerStateChanged();
    #endregion
		
		public WeaponFired()
		{
			this.@__StutterStep = new EntitySet<_StutterStep>(new Action<_StutterStep>(this.attach__StutterStep), new Action<_StutterStep>(this.detach__StutterStep));
			this._Damage = new EntitySet<Damage>(new Action<Damage>(this.attach_Damage), new Action<Damage>(this.detach_Damage));
			this._MatchStats = default(EntityRef<MatchStats>);
			this._PlayerMatchStats = default(EntityRef<PlayerMatchStats>);
			this._PlayerRoundStats = default(EntityRef<PlayerRoundStats>);
			this._RoundStats = default(EntityRef<RoundStats>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MatchId", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long MatchId
		{
			get
			{
				return this._MatchId;
			}
			set
			{
				if ((this._MatchId != value))
				{
					if ((((this._MatchStats.HasLoadedOrAssignedValue || this._PlayerMatchStats.HasLoadedOrAssignedValue) 
								|| this._PlayerRoundStats.HasLoadedOrAssignedValue) 
								|| this._RoundStats.HasLoadedOrAssignedValue))
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMatchIdChanging(value);
					this.SendPropertyChanging();
					this._MatchId = value;
					this.SendPropertyChanged("MatchId");
					this.OnMatchIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WeaponFiredId", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long WeaponFiredId
		{
			get
			{
				return this._WeaponFiredId;
			}
			set
			{
				if ((this._WeaponFiredId != value))
				{
					this.OnWeaponFiredIdChanging(value);
					this.SendPropertyChanging();
					this._WeaponFiredId = value;
					this.SendPropertyChanged("WeaponFiredId");
					this.OnWeaponFiredIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Round", DbType="SmallInt NOT NULL")]
		public short Round
		{
			get
			{
				return this._Round;
			}
			set
			{
				if ((this._Round != value))
				{
					if ((this._PlayerRoundStats.HasLoadedOrAssignedValue || this._RoundStats.HasLoadedOrAssignedValue))
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRoundChanging(value);
					this.SendPropertyChanging();
					this._Round = value;
					this.SendPropertyChanged("Round");
					this.OnRoundChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Time", DbType="Int NOT NULL")]
		public int Time
		{
			get
			{
				return this._Time;
			}
			set
			{
				if ((this._Time != value))
				{
					this.OnTimeChanging(value);
					this.SendPropertyChanging();
					this._Time = value;
					this.SendPropertyChanged("Time");
					this.OnTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Tick", DbType="Int NOT NULL")]
		public int Tick
		{
			get
			{
				return this._Tick;
			}
			set
			{
				if ((this._Tick != value))
				{
					this.OnTickChanging(value);
					this.SendPropertyChanging();
					this._Tick = value;
					this.SendPropertyChanged("Tick");
					this.OnTickChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlayerId", DbType="BigInt NOT NULL")]
		public long PlayerId
		{
			get
			{
				return this._PlayerId;
			}
			set
			{
				if ((this._PlayerId != value))
				{
					if ((this._PlayerMatchStats.HasLoadedOrAssignedValue || this._PlayerRoundStats.HasLoadedOrAssignedValue))
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPlayerIdChanging(value);
					this.SendPropertyChanging();
					this._PlayerId = value;
					this.SendPropertyChanged("PlayerId");
					this.OnPlayerIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlayerPosX", DbType="Float NOT NULL")]
		public double PlayerPosX
		{
			get
			{
				return this._PlayerPosX;
			}
			set
			{
				if ((this._PlayerPosX != value))
				{
					this.OnPlayerPosXChanging(value);
					this.SendPropertyChanging();
					this._PlayerPosX = value;
					this.SendPropertyChanged("PlayerPosX");
					this.OnPlayerPosXChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlayerPosY", DbType="Float NOT NULL")]
		public double PlayerPosY
		{
			get
			{
				return this._PlayerPosY;
			}
			set
			{
				if ((this._PlayerPosY != value))
				{
					this.OnPlayerPosYChanging(value);
					this.SendPropertyChanging();
					this._PlayerPosY = value;
					this.SendPropertyChanged("PlayerPosY");
					this.OnPlayerPosYChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlayerPosZ", DbType="Float NOT NULL")]
		public double PlayerPosZ
		{
			get
			{
				return this._PlayerPosZ;
			}
			set
			{
				if ((this._PlayerPosZ != value))
				{
					this.OnPlayerPosZChanging(value);
					this.SendPropertyChanging();
					this._PlayerPosZ = value;
					this.SendPropertyChanged("PlayerPosZ");
					this.OnPlayerPosZChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlayerViewX", DbType="Float NOT NULL")]
		public double PlayerViewX
		{
			get
			{
				return this._PlayerViewX;
			}
			set
			{
				if ((this._PlayerViewX != value))
				{
					this.OnPlayerViewXChanging(value);
					this.SendPropertyChanging();
					this._PlayerViewX = value;
					this.SendPropertyChanged("PlayerViewX");
					this.OnPlayerViewXChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlayerViewY", DbType="Float NOT NULL")]
		public double PlayerViewY
		{
			get
			{
				return this._PlayerViewY;
			}
			set
			{
				if ((this._PlayerViewY != value))
				{
					this.OnPlayerViewYChanging(value);
					this.SendPropertyChanging();
					this._PlayerViewY = value;
					this.SendPropertyChanged("PlayerViewY");
					this.OnPlayerViewYChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlayerVeloX", DbType="Float NOT NULL")]
		public double PlayerVeloX
		{
			get
			{
				return this._PlayerVeloX;
			}
			set
			{
				if ((this._PlayerVeloX != value))
				{
					this.OnPlayerVeloXChanging(value);
					this.SendPropertyChanging();
					this._PlayerVeloX = value;
					this.SendPropertyChanged("PlayerVeloX");
					this.OnPlayerVeloXChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlayerVeloY", DbType="Float NOT NULL")]
		public double PlayerVeloY
		{
			get
			{
				return this._PlayerVeloY;
			}
			set
			{
				if ((this._PlayerVeloY != value))
				{
					this.OnPlayerVeloYChanging(value);
					this.SendPropertyChanging();
					this._PlayerVeloY = value;
					this.SendPropertyChanged("PlayerVeloY");
					this.OnPlayerVeloYChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlayerVeloZ", DbType="Float NOT NULL")]
		public double PlayerVeloZ
		{
			get
			{
				return this._PlayerVeloZ;
			}
			set
			{
				if ((this._PlayerVeloZ != value))
				{
					this.OnPlayerVeloZChanging(value);
					this.SendPropertyChanging();
					this._PlayerVeloZ = value;
					this.SendPropertyChanged("PlayerVeloZ");
					this.OnPlayerVeloZChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsCT", DbType="Bit NOT NULL")]
		public bool IsCT
		{
			get
			{
				return this._IsCT;
			}
			set
			{
				if ((this._IsCT != value))
				{
					this.OnIsCTChanging(value);
					this.SendPropertyChanging();
					this._IsCT = value;
					this.SendPropertyChanged("IsCT");
					this.OnIsCTChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Weapon", DbType="SmallInt NOT NULL")]
		public short Weapon
		{
			get
			{
				return this._Weapon;
			}
			set
			{
				if ((this._Weapon != value))
				{
					this.OnWeaponChanging(value);
					this.SendPropertyChanging();
					this._Weapon = value;
					this.SendPropertyChanged("Weapon");
					this.OnWeaponChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InAccuracyFromFiring", DbType="Float NOT NULL")]
		public double InAccuracyFromFiring
		{
			get
			{
				return this._InAccuracyFromFiring;
			}
			set
			{
				if ((this._InAccuracyFromFiring != value))
				{
					this.OnInAccuracyFromFiringChanging(value);
					this.SendPropertyChanging();
					this._InAccuracyFromFiring = value;
					this.SendPropertyChanged("InAccuracyFromFiring");
					this.OnInAccuracyFromFiringChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InAccuracyFromMoving", DbType="Float NOT NULL")]
		public double InAccuracyFromMoving
		{
			get
			{
				return this._InAccuracyFromMoving;
			}
			set
			{
				if ((this._InAccuracyFromMoving != value))
				{
					this.OnInAccuracyFromMovingChanging(value);
					this.SendPropertyChanging();
					this._InAccuracyFromMoving = value;
					this.SendPropertyChanged("InAccuracyFromMoving");
					this.OnInAccuracyFromMovingChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlayerState", DbType="SmallInt NOT NULL")]
		public short PlayerState
		{
			get
			{
				return this._PlayerState;
			}
			set
			{
				if ((this._PlayerState != value))
				{
					this.OnPlayerStateChanging(value);
					this.SendPropertyChanging();
					this._PlayerState = value;
					this.SendPropertyChanged("PlayerState");
					this.OnPlayerStateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="WeaponFired__StutterStep", Storage="__StutterStep", ThisKey="MatchId,WeaponFiredId", OtherKey="MatchId,WeaponFiredId")]
		public EntitySet<_StutterStep> _StutterStep
		{
			get
			{
				return this.@__StutterStep;
			}
			set
			{
				this.@__StutterStep.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="WeaponFired_Damage", Storage="_Damage", ThisKey="MatchId,WeaponFiredId", OtherKey="MatchId,WeaponFiredId")]
		public EntitySet<Damage> Damage
		{
			get
			{
				return this._Damage;
			}
			set
			{
				this._Damage.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MatchStats_WeaponFired", Storage="_MatchStats", ThisKey="MatchId", OtherKey="MatchId", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public MatchStats MatchStats
		{
			get
			{
				return this._MatchStats.Entity;
			}
			set
			{
				MatchStats previousValue = this._MatchStats.Entity;
				if (((previousValue != value) 
							|| (this._MatchStats.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MatchStats.Entity = null;
						previousValue.WeaponFired.Remove(this);
					}
					this._MatchStats.Entity = value;
					if ((value != null))
					{
						value.WeaponFired.Add(this);
						this._MatchId = value.MatchId;
					}
					else
					{
						this._MatchId = default(long);
					}
					this.SendPropertyChanged("MatchStats");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PlayerMatchStats_WeaponFired", Storage="_PlayerMatchStats", ThisKey="MatchId,PlayerId", OtherKey="MatchId,SteamId", IsForeignKey=true)]
		public PlayerMatchStats PlayerMatchStats
		{
			get
			{
				return this._PlayerMatchStats.Entity;
			}
			set
			{
				PlayerMatchStats previousValue = this._PlayerMatchStats.Entity;
				if (((previousValue != value) 
							|| (this._PlayerMatchStats.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PlayerMatchStats.Entity = null;
						previousValue.WeaponFired.Remove(this);
					}
					this._PlayerMatchStats.Entity = value;
					if ((value != null))
					{
						value.WeaponFired.Add(this);
						this._MatchId = value.MatchId;
						this._PlayerId = value.SteamId;
					}
					else
					{
						this._MatchId = default(long);
						this._PlayerId = default(long);
					}
					this.SendPropertyChanged("PlayerMatchStats");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PlayerRoundStats_WeaponFired", Storage="_PlayerRoundStats", ThisKey="MatchId,Round,PlayerId", OtherKey="MatchId,Round,PlayerId", IsForeignKey=true)]
		public PlayerRoundStats PlayerRoundStats
		{
			get
			{
				return this._PlayerRoundStats.Entity;
			}
			set
			{
				PlayerRoundStats previousValue = this._PlayerRoundStats.Entity;
				if (((previousValue != value) 
							|| (this._PlayerRoundStats.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PlayerRoundStats.Entity = null;
						previousValue.WeaponFired.Remove(this);
					}
					this._PlayerRoundStats.Entity = value;
					if ((value != null))
					{
						value.WeaponFired.Add(this);
						this._MatchId = value.MatchId;
						this._Round = value.Round;
						this._PlayerId = value.PlayerId;
					}
					else
					{
						this._MatchId = default(long);
						this._Round = default(short);
						this._PlayerId = default(long);
					}
					this.SendPropertyChanged("PlayerRoundStats");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RoundStats_WeaponFired", Storage="_RoundStats", ThisKey="MatchId,Round", OtherKey="MatchId,Round", IsForeignKey=true)]
		public RoundStats RoundStats
		{
			get
			{
				return this._RoundStats.Entity;
			}
			set
			{
				RoundStats previousValue = this._RoundStats.Entity;
				if (((previousValue != value) 
							|| (this._RoundStats.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._RoundStats.Entity = null;
						previousValue.WeaponFired.Remove(this);
					}
					this._RoundStats.Entity = value;
					if ((value != null))
					{
						value.WeaponFired.Add(this);
						this._MatchId = value.MatchId;
						this._Round = value.Round;
					}
					else
					{
						this._MatchId = default(long);
						this._Round = default(short);
					}
					this.SendPropertyChanged("RoundStats");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach__StutterStep(_StutterStep entity)
		{
			this.SendPropertyChanging();
			entity.WeaponFired = this;
		}
		
		private void detach__StutterStep(_StutterStep entity)
		{
			this.SendPropertyChanging();
			entity.WeaponFired = null;
		}
		
		private void attach_Damage(Damage entity)
		{
			this.SendPropertyChanging();
			entity.WeaponFired = this;
		}
		
		private void detach_Damage(Damage entity)
		{
			this.SendPropertyChanging();
			entity.WeaponFired = null;
		}
	}
}
#pragma warning restore 1591
